<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blacktea&#39;s Life</title>
  <subtitle>A programmer who love music and football</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blackteachinese.com/"/>
  <updated>2017-12-24T05:34:28.046Z</updated>
  <id>http://blackteachinese.com/</id>
  
  <author>
    <name>Blacktea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React到UIKit完整渲染过程</title>
    <link href="http://blackteachinese.com/2017/12/24/2017-12-15/"/>
    <id>http://blackteachinese.com/2017/12/24/2017-12-15/</id>
    <published>2017-12-24T05:33:01.000Z</published>
    <updated>2017-12-24T05:34:28.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-渲染过程"><a href="#React-渲染过程" class="headerlink" title="React 渲染过程"></a>React 渲染过程</h1><p>HelloWorld Component：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var HelloWorld = React.createClass(&#123;</div><div class="line">  getInitialState: function() &#123;</div><div class="line">    return &#123;type: &apos;say:&apos;&#125;;</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">    return React.createElement(&quot;div&quot;, null,this.state.type, &quot;Hello &quot;, this.props.name);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(React.createElement(HelloWorld, &#123;name: &quot;John&quot;&#125;), document.getElementById(&quot;container&quot;));</div></pre></td></tr></table></figure></p>
<p>JS Dom:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div data-reactid=&quot;0&quot;&gt;</div><div class="line">    &lt;span data-reactid=&quot;0.0&quot;&gt;say:&lt;/span&gt;</div><div class="line">    &lt;span data-reactid=&quot;0.1&quot;&gt;Hello &lt;/span&gt;</div><div class="line">    &lt;span data-reactid=&quot;0.2&quot;&gt;John&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>React.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// ReactElement：创建虚拟DOM</div><div class="line">function ReactElement(type,key,props)&#123;</div><div class="line">  this.type = type;</div><div class="line">  this.key = key;</div><div class="line">  this.props = props;</div><div class="line">&#125;</div><div class="line">// mountComponent：渲染component，生成的dom结构</div><div class="line">ReactDOMTextComponent.prototype.mountComponent = function(rootID) &#123;</div><div class="line">    this._rootNodeID = rootID;</div><div class="line">    return &apos;&lt;span data-reactid=&quot;&apos; + rootID + &apos;&quot;&gt;&apos; + this._currentElement + &apos;&lt;/span&gt;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// instantiateReactComponent：生成component</div><div class="line">function instantiateReactComponent(node)&#123;</div><div class="line">        ......</div><div class="line">&#125;</div><div class="line">React = &#123;</div><div class="line">    createElement:function(type,config,children)&#123;</div><div class="line">        ...</div><div class="line">        return new ReactElement(type, key,props);</div><div class="line">    &#125;，</div><div class="line">    createClass:function(spec)&#123;</div><div class="line">        ...</div><div class="line">    &#125;,</div><div class="line">    // 渲染入口</div><div class="line">    render:function(element,container)&#123;</div><div class="line">        var componentInstance = instantiateReactComponent(element);</div><div class="line">        var markup = componentInstance.mountComponent(React.nextReactRootIndex++);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmjuovkxsyj31kw0san5r.jpg" alt=""></p>
<h1 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h1><p>JS拿出所有组件，循环调用nativeFlushQueueImmediate</p>
<p>buffer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;__NSArrayM 0x60c00024b8e0&gt;(</div><div class="line">51</div><div class="line">)</div><div class="line">,</div><div class="line">&lt;__NSArrayM 0x60c00024b730&gt;(</div><div class="line">5</div><div class="line">)</div><div class="line">,</div><div class="line">&lt;__NSArrayM 0x60c00024b850&gt;(</div><div class="line">&lt;__NSArrayM 0x60c00024b550&gt;(</div><div class="line">3,</div><div class="line">RCTText,</div><div class="line">1,</div><div class="line">&#123;</div><div class="line">    accessible = 1;</div><div class="line">    allowFontScaling = 1;</div><div class="line">    color = 4286846340;</div><div class="line">    ellipsizeMode = tail;</div><div class="line">    fontSize = 18;</div><div class="line">    padding = 8;</div><div class="line">    textAlign = center;</div><div class="line">&#125;</div><div class="line">)</div><div class="line"></div><div class="line">)</div><div class="line">,</div><div class="line">1</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>moduleIDs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;__NSArrayM 0x60c00024b8e0&gt;(</div><div class="line">51</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>methodIDs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;__NSArrayM 0x60c00024b730&gt;(</div><div class="line">5</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>paramsArrays<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;__NSArrayM 0x60c00024b850&gt;(</div><div class="line">&lt;__NSArrayM 0x60c00024b550&gt;(</div><div class="line">3,</div><div class="line">RCTText,</div><div class="line">1,</div><div class="line">&#123;</div><div class="line">    accessible = 1;</div><div class="line">    allowFontScaling = 1;</div><div class="line">    color = 4286846340;</div><div class="line">    ellipsizeMode = tail;</div><div class="line">    fontSize = 18;</div><div class="line">    padding = 8;</div><div class="line">    textAlign = center;</div><div class="line">&#125;</div><div class="line">)</div><div class="line"></div><div class="line">)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-渲染过程&quot;&gt;&lt;a href=&quot;#React-渲染过程&quot; class=&quot;headerlink&quot; title=&quot;React 渲染过程&quot;&gt;&lt;/a&gt;React 渲染过程&lt;/h1&gt;&lt;p&gt;HelloWorld Component：&lt;br&gt;&lt;figure class
    
    </summary>
    
      <category term="web" scheme="http://blackteachinese.com/categories/web/"/>
    
    
      <category term="render tree" scheme="http://blackteachinese.com/tags/render-tree/"/>
    
      <category term="dom tree" scheme="http://blackteachinese.com/tags/dom-tree/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染原理</title>
    <link href="http://blackteachinese.com/2017/12/11/web_brower_render/"/>
    <id>http://blackteachinese.com/2017/12/11/web_brower_render/</id>
    <published>2017-12-11T10:01:23.000Z</published>
    <updated>2017-12-14T09:03:41.550Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn" target="_blank" rel="external">渲染树构建、布局及绘制</a><br><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="external">浏览器工作原理</a><br><a href="https://docs.google.com/presentation/d/1ZRIQbUKw9Tf077odCh66OrrwRIVNLvI_nhLm2Gi__F0/embed?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.g312aaaf6_1_188" target="_blank" rel="external">How WebKit Works</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn&quot; target=&quot;_b
    
    </summary>
    
      <category term="web" scheme="http://blackteachinese.com/categories/web/"/>
    
    
      <category term="render tree" scheme="http://blackteachinese.com/tags/render-tree/"/>
    
      <category term="dom tree" scheme="http://blackteachinese.com/tags/dom-tree/"/>
    
  </entry>
  
  <entry>
    <title>如何设计一个iOS统一持久化SDK</title>
    <link href="http://blackteachinese.com/2017/12/11/ios_%20unified_storage/"/>
    <id>http://blackteachinese.com/2017/12/11/ios_ unified_storage/</id>
    <published>2017-12-11T10:01:23.000Z</published>
    <updated>2017-12-11T17:32:00.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计一个统一持久化SDK的意义"><a href="#设计一个统一持久化SDK的意义" class="headerlink" title="设计一个统一持久化SDK的意义"></a>设计一个统一持久化SDK的意义</h2><p>提高可维护性和安全性。<br>没有统一的存储层，业务代码里存储功能会有很多重复代码，不仅维护性差、安全性也无法保障</p>
<p>提高存储质量和性能。<br>不同业务场景适合使用的存储方式是不一样的，为了提高性能我们得使用复合式的存储策略，为了保证稳定性还得考虑监控</p>
<h2 id="不同场景的存储方式"><a href="#不同场景的存储方式" class="headerlink" title="不同场景的存储方式"></a>不同场景的存储方式</h2><h3 id="KV存储"><a href="#KV存储" class="headerlink" title="KV存储"></a>KV存储</h3><p>kV存储是最常用的存储方式，超过80%的业务存储会用到，它是一种NoSQL（非关系型数据库）模型搜索，适用于非复杂业务关系的场景。KV存储又包含5种类型分别是内存KV、文件KV、数据库KV、二级索引KV、流式大文件KV。</p>
<h4 id="内存KV"><a href="#内存KV" class="headerlink" title="内存KV"></a>内存KV</h4><p>内存KV是在内存上存储，也是最快速的存储方式，通常文件KV、数据库KV也会实现内存KV进行对象级别的加速。<br>内存KV的实现要考虑几个关键点，接口设计、清理机制、淘汰机制、并发管理。</p>
<p><strong>淘汰机制</strong><br>具体实现上建议使用LRU淘汰机制，它的核心思想是“最近用到的数据被重用的概率是最高的”，因此我们需要对缓存进行排序，并且保证位置调整的高性能，很自然地我们会想到使用双向链表来实现。查找一个链表中元素的时间复杂度是O(n)，每次命中的时候，我们就需要花费O(n)的时间来进行查找，如果不添加其他的数据结构，这个就是我们能实现的最高效率了。我们还可以组合上hash表，它查找时间复杂度是O(1)。<br>最后我们可以设计一个数据结构，里面包含一个hashmap和双向链表，使用hashmap查询cache,使用双向链表做排列和位置管理。</p>
<p><strong>清理机制</strong><br>手机设备内存是奢侈品，在内存紧张时，我们要有清理缓存的机制</p>
<p><strong>并发管理</strong><br>为了保证多线程调用的安全性，增删改查每项操作我们都要加锁</p>
<h4 id="数据库KV"><a href="#数据库KV" class="headerlink" title="数据库KV"></a>数据库KV</h4><p>数据大小在20K~30k以内，使用数据库存储效率较高，数据库KV的安全保障，要支持数据库级别的加密。</p>
<h4 id="文件KV"><a href="#文件KV" class="headerlink" title="文件KV"></a>文件KV</h4><p>数据大小大雨20K~30k，适合使用文件KV，需要提供文件校验、加密能力。</p>
<h4 id="二级索引KV"><a href="#二级索引KV" class="headerlink" title="二级索引KV"></a>二级索引KV</h4><p>在文件KV的基础上，使用两个key来指定一个value，适合图片库这种需要基于图片url和尺寸信息的场景。</p>
<h4 id="流式文件KV"><a href="#流式文件KV" class="headerlink" title="流式文件KV"></a>流式文件KV</h4><p>针对视频等较大的流式文件，如果我们对整块数据进行存取会消耗大量内存，需要进行分段处理。</p>
<h3 id="ORM存储"><a href="#ORM存储" class="headerlink" title="ORM存储"></a>ORM存储</h3><p>ORM是对象关系映射Object Relational Mapping，它的核心是将复杂的数据结构对象化，将sql操作转化为简单易用的的面向对象操作。<br>ORM的开发需要考虑到各种feature，多线程安全、事务、时间模型、列级加密、支持批处理操作、对象域，支持对对象管理方式的控制等。</p>
<h3 id="DB储存"><a href="#DB储存" class="headerlink" title="DB储存"></a>DB储存</h3><p>需要进行复杂数据的操作的存储场景，一般就要直接用到DB，DB的设计是一门大学问，要考虑的要点有很多。比如线程池管理、读写互斥、并发控制、任务调度，数据库的加密,Api的易用(SQLite3难用)。其中SQLite3免费版不支持加密的，但它是有预留加密数据库的接口，可以自己实现加密功能。如果要追求极致的性能，在SQL的查询还可以做缓存功能。</p>
<h2 id="执行计划缓存"><a href="#执行计划缓存" class="headerlink" title="执行计划缓存"></a>执行计划缓存</h2><p>SQL响应时间包括两部分：RT = 解析时间和 + 执行时间。<br>如果将执行计划进行缓存可以减少解析的时间，如果将结果集进行缓存，可以减少执行时间。But,由于查询的结果集可能很多，而且数据精彩会被修改，结果集缓存意义不大，因此我们主要考虑对执行计划进行缓存。</p>
<p>相识的sql可以使用同一个执行计划，比如“select <em> from t where num=1”和“select </em> from t where num=2”。因此我们可以先将语句标准化（忽略大小写，忽略空格数目，将常量全部抽象成 ?），减少缓存数量，最后还要考虑淘汰机制，整体思路如下。<br>1对SQL进行词法语法分析，抽象出常量<br>2查询执行计划缓存是否命中，若不命中，则进行解析<br>3将常量绑定到执行计划</p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>TODO</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计一个统一持久化SDK的意义&quot;&gt;&lt;a href=&quot;#设计一个统一持久化SDK的意义&quot; class=&quot;headerlink&quot; title=&quot;设计一个统一持久化SDK的意义&quot;&gt;&lt;/a&gt;设计一个统一持久化SDK的意义&lt;/h2&gt;&lt;p&gt;提高可维护性和安全性。&lt;br&gt;没有统
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative到底做了什么？</title>
    <link href="http://blackteachinese.com/2017/11/26/react_native_ios_source_code/"/>
    <id>http://blackteachinese.com/2017/11/26/react_native_ios_source_code/</id>
    <published>2017-11-26T04:35:00.000Z</published>
    <updated>2017-12-17T13:39:33.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Native-是什么"><a href="#React-Native-是什么" class="headerlink" title="React Native 是什么"></a>React Native 是什么</h2><p>react.js是一个流行的前端开发框架，相信大家都有了解，它用了flexbox布局技术、jsx等语法糖的技术，这让前端同学能象喝茶一样轻松地开发H5页面。React本来是用来开发h5页面，facebook的工程师们，希望做一套能同时运行在iOS和Android的高性能开发框架，就将React render()方法渲染出来的js代码通过JSbridge加载到native，native再通过JSCore和V8这两个js解析引擎，解析为native的页面。</p>
<h2 id="React-Native-的组成"><a href="#React-Native-的组成" class="headerlink" title="React Native 的组成"></a>React Native 的组成</h2><p>ReactNative功能结构可以分为两部分，JS模块和Native模块。JS模块和Native模块都有Bridge组件，两端的Bridge遵守一套通信协议、通信机制，从而实现了js和native的无缝连接。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fmacuj6ha9j31f412uwk4.jpg" alt=""></p>
<h3 id="JS模块"><a href="#JS模块" class="headerlink" title="JS模块"></a>JS模块</h3><p>JS模块主要由React.js框架和JSBridge两部分组成，React.js是开发UI逻辑的框架，而JSBridge包含管理NativeModel配置的NativeModules和管理js、native双向通信的MessageQueue。</p>
<h4 id="JSBridge如何匹配和调用Native提供的能力"><a href="#JSBridge如何匹配和调用Native提供的能力" class="headerlink" title="JSBridge如何匹配和调用Native提供的能力"></a>JSBridge如何匹配和调用Native提供的能力</h4><p>Nativebridge初始化时会把Native能提供给JS的所有能力Module按约定好的方式序列化为一个对象‘__fbBatchedBridgeConfig’，设置到JS的全局对象global里。</p>
<p>JSBridge封装了NativeModules对象，NativeModules会读取__fbBatchedBridgeConfig的bridgep配置，组装成方便js调用的映射对象.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">let NativeModules : &#123;[moduleName: string]: Object&#125; = &#123;&#125;;</div><div class="line">const bridgeConfig = global.__fbBatchedBridgeConfig;</div><div class="line">(bridgeConfig.remoteModuleConfig || []).forEach((config: ModuleConfig, moduleID: number) =&gt; &#123;</div><div class="line">    // configuration of the module will be lazily loaded.</div><div class="line">    const info = genModule(config, moduleID);</div><div class="line">    if (info.module) &#123;</div><div class="line">      NativeModules[info.name] = info.module;</div><div class="line">    &#125;</div><div class="line">    // If there&apos;s no module config, define a lazy getter</div><div class="line">    else &#123;</div><div class="line">      defineLazyObjectProperty(NativeModules, info.name, &#123;</div><div class="line">        get: () =&gt; loadModule(info.name, moduleID)</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>js组件通过methodName可以调用Native提供的各项能力。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NativeModules.DialogManagerAndroid.showAlert();</div></pre></td></tr></table></figure>
<h4 id="MessageQueue实现了Native-call-JS的Api和js-call-native的机制"><a href="#MessageQueue实现了Native-call-JS的Api和js-call-native的机制" class="headerlink" title="MessageQueue实现了Native call JS的Api和js call native的机制"></a>MessageQueue实现了Native call JS的Api和js call native的机制</h4><p>MessageQueue里有4个暴露给Native调用的API<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">flushedQueue()</div><div class="line">invokeCallbackAndReturnFlushedQueue(cbID: number, args: any[])</div><div class="line">callFunctionReturnFlushedQueue(module: string, method: string, args: any[])</div><div class="line">callFunctionReturnResultAndFlushedQueue(module: string,method: string,args: any[],)</div></pre></td></tr></table></figure></p>
<p><strong>Native想要调用JS的方法</strong><br>JS也会通过Module封装提供给Native调用的组件和方法，当native需要主动调用时就会call”callFunctionReturnFlushedQueue”和“callFunctionReturnResultAndFlushedQueue”，并传递module、method做为找到对应方法的钥匙。</p>
<p><strong>JS想要调用Native的方法</strong><br>事实上JS不能直接调用Native的方法，RN里设置了被动调用的机制来实现相同的功能。<br>当JS要调用Native的方法时，会通过enqueueNativeCall把moduleID和methodID放到队列this._queue里，调用成功和失败的Callback放到this._successCallbacks和this._failureCallbacks里。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">enqueueNativeCall(moduleID: number,methodID: number,params: any[],onFail: ?Function,onSucc: ?Function,)</div></pre></td></tr></table></figure>
<p>每次Native调用JS时，都会把this._queue的消息通过返回值传递给Native,Native拿到消息队列后就会执行MessageQueue里对应的Native方法。</p>
<p>TODO: js要调用Native时方法注入queue的时机？</p>
<p><strong>调用Native方法执行后的回调</strong><br>native暴露给js调用的方法，可以使用RCTResponseSenderBlock对象做为参数实现回调的功能。RCTResponseSenderBlock执行最后会调用到invokeCallbackAndReturnFlushedQueue方法,回调MessageQueue里成功或失败的回调。</p>
<p><strong>JS消息队列超过5ms还未被调用</strong><br>当JS通过enqueueNativeCall注入需要被Native调用的方法时，需要等待native来拉去消息队列。如果native一直不过来拉消息怎么办呢？在enqueueNativeCall注入时有一个保障机制，如果距离上次消息队列被拉去超过5ms，就会调用‘global.nativeFlushQueueImmediate(queue)’方法，启用JS强制让Native拉去的机制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (global.nativeFlushQueueImmediate &amp;&amp; (now - this._lastFlush &gt;= MIN_TIME_BETWEEN_FLUSHES_MS || this._inCall === 0)</div><div class="line">  ) &#123;</div><div class="line">    var queue = this._queue;</div><div class="line">    this._queue = [[], [], [], this._callID];</div><div class="line">    this._lastFlush = now;</div><div class="line">    global.nativeFlushQueueImmediate(queue);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="Native部分-OC"><a href="#Native部分-OC" class="headerlink" title="Native部分(OC)"></a>Native部分(OC)</h3><p>native部分可分为OC bridge和一系列基础Module和自定义的扩展Module.</p>
<p><strong>Module</strong><br>每一个Module都会根据约定的协议去注册，Bridge初始化时就会读取Navtive所有的Module，序列化为配置表，并将这部分配置信息传递到JS模块，JS也会生成一一对应配置表，这样无论是js想调用native的api,还是native想调用js的api都可以找到。</p>
<p><strong>NativeBridge</strong><br>Nativebridge需要做很多事情，它包含了JSbundle加载、初始化缓存Module组件、管控js和oc之间消息传递的分发。</p>
<p>下面是NativeBridge初始化的过程</p>
<ul>
<li>RCTRootView 根视图<ul>
<li>RCTBridge 桥的抽象类。持有BatchBridge，将核心逻辑转发给BatchBridge实现<ul>
<li>RCTBatchBridge 负责主要核心功能的初始化<ul>
<li>RCTJavaScriptLoader 加载JSBundle</li>
<li>RCTDisplayLink 提供屏幕渲染频率的回调，为timer和桢动画等组件提供支持</li>
<li>RCTModuleData 所有的RN组件UI或Api，都是RCTModuleData<ul>
<li>RCTJSCExecutor 一个特殊的RCTModuleData，维护一个独立线程处理JS代码执行和js回调，是bridge的核心通道</li>
<li>RCTEventDispatcher UIModule触发点击事件后先通过EventDispatcher的api进行事件分发，再传到JSCExecutor找到JS模块的回调函数，最后通知js进行处理</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Module配置表生成流程解析"><a href="#Module配置表生成流程解析" class="headerlink" title="Module配置表生成流程解析"></a>Module配置表生成流程解析</h4><p>RCTModuleData是组装native的功能模块，提供给JS调用</p>
<p><em>native导出注册的Modules给JS</em></p>
<p>RCTRootView初始化流程</p>
<ul>
<li>初始化Module</li>
<li>生成Module配置表</li>
<li>将Module配置表注入到JS里</li>
<li>JS读取Module配置</li>
</ul>
<p>初始化Module<br>从RCTModuleClasses拿到所有Moduled的Class,各自创建RCTModuleData，并将创建后的module保存到moduleClassesByID、moduleDataByID、moduleDataByName三个集合进行缓存</p>
<p>生成Module配置表<br>RCTBatchBridge会循环moduleDataByID数组表，把每一个APIModule的name都写进数组，然后写进key为remoteModuleConfig的字典，最后序列化成JS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;remoteModuleConfig&quot;:[[&quot;VKAlertModule&quot;],</div><div class="line">[&quot;RCTFileRequestHandler&quot;],</div><div class="line">[&quot;RCTDataRequestHandler&quot;],</div><div class="line">...]&#125;</div></pre></td></tr></table></figure>
<p>moduleConfigInject</p>
<p>将所有module名注入到__fbBatchedBridgeConfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;remoteModuleConfig&quot;:[[&quot;JSCExecutor&quot;],[&quot;AccessibilityManager&quot;],[&quot;ViewManager&quot;],[&quot;ActivityIndicatorViewManager&quot;],[&quot;AlertManager&quot;],[&quot;AppState&quot;],[&quot;AsyncLocalStorage&quot;],[&quot;BlobModule&quot;],[&quot;Clipboard&quot;],[&quot;DataRequestHandler&quot;],[&quot;DatePickerManager&quot;],[&quot;DeviceInfo&quot;],[&quot;DevLoadingView&quot;],[&quot;DevMenu&quot;],[&quot;DevSettings&quot;],[&quot;EventDispatcher&quot;],[&quot;ExceptionsManager&quot;],[&quot;FileRequestHandler&quot;],[&quot;HTTPRequestHandler&quot;],[&quot;I18nManager&quot;],[&quot;JSCSamplingProfiler&quot;],[&quot;KeyboardObserver&quot;],[&quot;MaskedViewManager&quot;],[&quot;ModalHostViewManager&quot;],[&quot;ModalManager&quot;],[&quot;NavigatorManager&quot;],[&quot;NavItemManager&quot;],[&quot;NetInfo&quot;],[&quot;Networking&quot;],[&quot;PerfMonitor&quot;],[&quot;PickerManager&quot;],[&quot;PlatformConstants&quot;],[&quot;ProgressViewManager&quot;],[&quot;RawTextManager&quot;],[&quot;RedBox&quot;],[&quot;RefreshControlManager&quot;],[&quot;SafeAreaViewManager&quot;],[&quot;ScrollContentViewManager&quot;],[&quot;ScrollViewManager&quot;],[&quot;SegmentedControlManager&quot;],[&quot;SliderManager&quot;],[&quot;SourceCode&quot;],[&quot;StatusBarManager&quot;],[&quot;SwitchManager&quot;],[&quot;TabBarItemManager&quot;],[&quot;TabBarManager&quot;],[&quot;TextFieldManager&quot;],[&quot;TextManager&quot;],[&quot;TextViewManager&quot;],[&quot;Timing&quot;],[&quot;TVNavigationEventEmitter&quot;],[&quot;UIManager&quot;],[&quot;WebSocketExecutor&quot;],[&quot;WebSocketModule&quot;],[&quot;WebViewManager&quot;]]&#125;</div></pre></td></tr></table></figure></p>
<p>遍历所有Module,将每个Module被注册的method配置，注入到JSContext的nativeRequireModuleConfig里。的block注入到js的global全局对象里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context[@&quot;nativeRequireModuleConfig&quot;] = ^NSArray *(NSString *moduleName) &#123;</div><div class="line">      RCTJSCExecutor *strongSelf = weakSelf;</div><div class="line">      NSArray *result = [strongSelf-&gt;_bridge configForModuleName:moduleName];</div><div class="line">      return RCTNullIfNil(result);</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>JS读取Module配置</p>
<p>JS加载时NativeModules.js会执行一段脚本，先通过global.__fbBatchedBridgeConfig获取Native所有Module的列表，再通过’global.nativeRequireModuleConfig’方法拿到Native所有Module的配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const bridgeConfig = global.__fbBatchedBridgeConfig;</div><div class="line">  invariant(bridgeConfig, &apos;__fbBatchedBridgeConfig is not set, cannot invoke native modules&apos;);</div><div class="line"></div><div class="line">  const defineLazyObjectProperty = require(&apos;defineLazyObjectProperty&apos;);</div><div class="line">  (bridgeConfig.remoteModuleConfig || []).forEach((config: ModuleConfig, moduleID: number) =&gt; &#123;</div><div class="line">    const info = genModule(config, moduleID);</div><div class="line">    defineLazyObjectProperty(NativeModules, info.name, &#123;</div><div class="line">        get: () =&gt; loadModule(info.name, moduleID)</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p><em>注册Module</em></p>
<p>  RCT_EXPORT_MODULE()</p>
<p><em>导出方法</em></p>
<p>  RCT_EXPORT_METHOD() </p>
<h4 id="ReactNativeUI渲染解析"><a href="#ReactNativeUI渲染解析" class="headerlink" title="ReactNativeUI渲染解析"></a>ReactNativeUI渲染解析</h4><p>React开发的页面，最终都会解析回原生的JS标签,最终组装成JSBundle，Native初始化后会加载JSBundle，并将UI逻辑一一解析成Native的原生控件，整个页面会拼装为一个Native的RootView。<br>这个过程需要解析JS的UI逻辑，于是RN定一个一个Module专门用来做UI解析，它就是UIManage,在JS是UIManager.js，在Native时RCTUIManager和RCTComponentData。<br>RCTComponentData组装Native各种视图控件，将所有视图组件的配置信息提供给JS，js根据native提供的配置信息，创建Native视图。</p>
<p><strong>UIModule的组成</strong><br>UIModule包含RCTView和RCTViewManage,每个UIModule还对应一个RCTComponentData。RCTViewManage相当于Controller了，决定如何绘制RCTView。</p>
<p><strong>管理UI组件生命周期的RCTUIManager和RCTComponentData</strong><br>RCTUIManager是一个ApiModule,所以他是被RCTModuleData管理，并被RCTBatchBridge持有。</p>
<p>RCTUIManager在初始化的时候setBridge方法会被调用，在setBridge里会遍历所有的Module,找到所有继承自RCTViewModule的对象，然后以ModuleName为key缓存到_componentDataByName里</p>
<p><strong>UI的创建和修改</strong><br>React.js里UI组件由各个component组成，component使用flexbox进行布局，最后会转换成绝对的位置、样式。<br>Native里会对React的每个组件都实现对应的一个View，每一个View会继承RCTViewManager，并通过RCT_EXPORT_MODULE注册成为一个module，我们可以称他们为UIModule。<br>当一个JS Component对象需要创建/改变自己的样式时，React会把需要渲染的所有component生成对应的JS Component配置，Native根据配置找到对应的RCTView,根据配置信息初始化Native的UI组件。</p>
<p><strong>RN一个页面的渲染流程</strong></p>
<p>1.[RCTRootView runApplication:bridge]<br>通知JS准备好可以开始渲染</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)runApplication:(RCTBridge *)bridge</div><div class="line">&#123;</div><div class="line">  NSString *moduleName = _moduleName ?: @&quot;&quot;;</div><div class="line">  NSDictionary *appParameters = @&#123;</div><div class="line">    @&quot;rootTag&quot;: _contentView.reactTag,</div><div class="line">    @&quot;initialProps&quot;: _appProperties ?: @&#123;&#125;,</div><div class="line">  &#125;;</div><div class="line">  [bridge enqueueJSCall:@&quot;AppRegistry&quot;</div><div class="line">                 method:@&quot;runApplication&quot;</div><div class="line">                   args:@[moduleName, appParameters]</div><div class="line">             completion:NULL];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.由JS调用createView方法创建每一个Native的View，这个方法里会根据viewName找到对应的RCTComponentData。<br>调用RCTComponentData的createShadowViewWithTag创建shadow view，缓存到_shadowViewRegistry里。<br>调用RCTComponentData的createViewWithTag创建view，缓存到_viewRegistry里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_METHOD(createView:(nonnull NSNumber *)reactTag</div><div class="line">                  viewName:(NSString *)viewName</div><div class="line">                  rootTag:(nonnull NSNumber *)rootTag</div><div class="line">                  props:(NSDictionary *)props)&#123;</div><div class="line">RCTComponentData *componentData = _componentDataByName[viewName];</div><div class="line">  // Register shadow view</div><div class="line">  RCTShadowView *shadowView = [componentData createShadowViewWithTag:reactTag];</div><div class="line">  if (shadowView) &#123;</div><div class="line">    [componentData setProps:props forShadowView:shadowView];</div><div class="line">    _shadowViewRegistry[reactTag] = shadowView;</div><div class="line">    RCTShadowView *rootView = _shadowViewRegistry[rootTag];</div><div class="line">    shadowView.rootView = (RCTRootShadowView *)rootView;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">    __weak RCTUIManager *weakManager = self;</div><div class="line">  RCTExecuteOnMainQueue(^&#123;</div><div class="line">    RCTUIManager *uiManager = weakManager;</div><div class="line">    UIView *view = [componentData createViewWithTag:reactTag];</div><div class="line">    if (view) &#123;</div><div class="line">      [componentData setProps:props forView:view]; // Must be done before bgColor to prevent wrong default</div><div class="line">      uiManager-&gt;_viewRegistry[reactTag] = view;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.调用_layoutAndMount对RCTRootView及其子视图进行布局。<br>在RCTUIManage-&gt;uiBlockWithLayoutUpdateForRootView-&gt;collectViewsWithUpdatedFrames，将flexbox布局协议解析为绝对布局的Frame,将每个视图的frame设置到对应的shaowView里。</p>
<p>4.根据组件视图关系，由JS调用“setChildren”给每个View设置子Views。<br>其中创建一个View都会对应创建一个RCTShadowView，RCTShadowView保存View的布局关系和属性，管理View的加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_METHOD(setChildren:(nonnull NSNumber *)containerTag</div><div class="line">                  reactTags:(NSArray&lt;NSNumber *&gt; *)reactTags)</div></pre></td></tr></table></figure></p>
<p>5.通过RCTShadowView的processUpdatedProperties，调用每个View的didUpdateReactSubviews方法，添加各自的子视图。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)didUpdateReactSubviews</div><div class="line">&#123;</div><div class="line">  for (UIView *subview in self.reactSubviews) &#123;</div><div class="line">    [self addSubview:subview];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>布局计算核心算法</strong><br>我们写React时使用的是flex布局或绝对布局，这部分布局代码会随着jsbundle通过Native的JS引擎加载。但Native是识别不了Flex布局协议，所以需要通过facebook的yoga开源库来解析flex布局协议成为绝对Native可以识别的绝对布局。</p>
<ul>
<li>YGNodeCalculateLayout<ul>
<li>YGLayoutNodeInternal</li>
<li>YGNodelayoutImpl<ul>
<li>YGNodeWithMeasureFuncSetMeasuredDimensions 计算size</li>
<li>YGNodeComputeFlexBasisForChild 计算child的布局</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>UI组件事件响应</strong><br>当RCTView组件触发了点击、滑动等触摸事件时，会通过bridge找倒自己的JSComponent,根据预先缓存的js callback函数，将参数传递给对应的React组件进行响应。</p>
<p><strong>自定义UIModule组件</strong><br>1 创建RCTViewManager子类<br>a注册Module,使用RCT_EXPORT_MODULE注册宏<br>b实现视图创建的方法，’-(UIView *)view’<br>cJS层导入Native原生组件。在js模块的requireNativeComponent.js里操作UIManage导入。<br>2 创建属性<br>注册属性，使用RCT_EXPORT_VIEW_PROPERTY或RCT_CUSTOM_VIEW_PROPERTY<br>3 创建事件<br>注册事件，也是通过RCT_EXPORT_VIEW_PROPERTY，注册type为RCTBubblingEventBlock的事件属性<br>4 创建常量<br>a.native通过constantsToExport方法return一个NSDictionary注册常量<br>b.js通过UIManager.XXUIModule.Constants拿到注册的常量</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fmk3g15ifrj31kw0w5kbn.jpg" alt=""></p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://github.com/facebook/react-native" target="_blank" rel="external">react-native</a><br><a href="http://blog.cnbang.net/tech/2698/" target="_blank" rel="external">React Native通信机制详解</a><br><a href="https://github.com/facebook/yoga" target="_blank" rel="external">yoga</a><br><a href="http://awhisper.github.io/2016/06/24/ReactNative流程源码分析/" target="_blank" rel="external">ReactNative源码分析</a><a href="http://www.cocoachina.com/programmer/20170505/19189.html" target="_blank" rel="external">从源码一步一步解析它的实现原理</a><br><a href="https://www.w3.org/TR/css-flexbox-1/" target="_blank" rel="external">W3C 标准的 Flexbox 模型</a><br><a href="http://code.liqingyao.com/flex-layout-algorithm-introduction/" target="_blank" rel="external">CSS Flex Layout 算法解析</a>            </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-Native-是什么&quot;&gt;&lt;a href=&quot;#React-Native-是什么&quot; class=&quot;headerlink&quot; title=&quot;React Native 是什么&quot;&gt;&lt;/a&gt;React Native 是什么&lt;/h2&gt;&lt;p&gt;react.js是一个流行的
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React源码的秘密</title>
    <link href="http://blackteachinese.com/2017/11/24/react_render_concept/"/>
    <id>http://blackteachinese.com/2017/11/24/react_render_concept/</id>
    <published>2017-11-24T12:35:00.000Z</published>
    <updated>2017-12-17T03:46:22.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-React"><a href="#What-is-React" class="headerlink" title="What is React"></a>What is React</h2><p>A JavaScript library for building user interfaces</p>
<p><strong>基本概念</strong></p>
<ul>
<li>VIRTUAL DOM<br>React render执行的结果并不是真正的DOM节点，只是是轻量级的JavaScript对象，我们称之为virtual DOM。虚拟DOM是React的一大亮点，具有batching(批处理)和高效的Diff算法。使用Virtual dom在性能上不会比纯手动优化的DOM操作更快，使用Virtual Dom能再不需要手动优化的情况下，保证过得去的性能，从而提高代码的可维护性和开发效率。这让我们可以无需担心性能问题而随时“刷新”整个页面，由虚拟DOM来确保只对界面上真正变化的节点进行实际的DOM操作。</li>
</ul>
<p>下图式浏览器的工作流：<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmjjwrfm1mj30hc081q3m.jpg" alt=""><br>a.Create DOM tree：浏览器的渲染引擎根据html的elements，生成Dom node，组成Dom tree<br>b.Create Render tree：浏览器解析外部CSS文件和元素的inline样式，结合Dom tree的nodes，生成render tree<br>c.layout:render tree上每一个node生成在屏幕上的具体位置的坐标值<br>d.painting:绘制</p>
<p>如果直接操作Dom，每次操作都会触发整个渲染流程，如果连续修改50个节点，那就会造成50次重新渲染，这会造成不必要的渲染消耗。我们可以自己编写逻辑，将每个Dom操作汇总到一个Dom fragment,再传递给Dom tree。但这样我们就得自己去记录哪些节点改变，哪些没有改变，这显然开发效率太低，所以我们可以把这个工作抽象一下，于是就有了virtual dom。<br>virtual dom这个抽象层的作用就是将这件事自动化、抽象化，通过Diff算法计算出需要改变的节点，使用batching批处理多个节点的改动，然后操作Dom树进行渲染，避免不必要的重新渲染。</p>
<ul>
<li>JSX<br>JSX just provides syntactic sugar for “React.createElement(component, props, …children)”</li>
<li>Component<br>无论是复杂的元素还是简单的元素，都定义为组件。通过组合组件的方式可以构建容易维护、高复用性的组件。</li>
<li>one-way reactive data flow<br>React 的单向数据流的设计让前端 bug 定位变得简单，页面的UI和数据的对应是唯一的,我们可以通过定位数据变化就可以定位页面展现问题。<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fmiqw9swr5j30dx0asmxc.jpg" alt=""></li>
</ul>
<h2 id="React-Render-Mechanism-渲染机制源码解析"><a href="#React-Render-Mechanism-渲染机制源码解析" class="headerlink" title="React Render Mechanism 渲染机制源码解析"></a>React Render Mechanism 渲染机制源码解析</h2><h3 id="Render-analyse"><a href="#Render-analyse" class="headerlink" title="Render  analyse"></a>Render  analyse</h3><h4 id="Render-DOM-implement-analyse"><a href="#Render-DOM-implement-analyse" class="headerlink" title="Render DOM implement analyse"></a>Render DOM implement analyse</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DOM example:</div><div class="line"></div><div class="line">var element = React.createElement(&apos;div&apos;,&#123;id:&apos;test&apos;,onclick:hello&#125;,&apos;click me&apos;)</div><div class="line">React.render(element,document.getElementById(&quot;container&quot;))</div></pre></td></tr></table></figure>
<p>React.createElement:</p>
<p>use createElement function to create a virtual dom -&gt; React.createElement</p>
<ul>
<li>keep the key to identify element</li>
<li>copy the config(attributes) to the props</li>
<li>copy the children to the props.children</li>
<li>call ReactElement function and send ‘type’,’key’,’props’ for initial a element object</li>
</ul>
<p>React.render:</p>
<ul>
<li>instantiateReactComponent<ul>
<li>init component instance </li>
</ul>
</li>
<li>mountComponent<ul>
<li>render component instance to html content</li>
</ul>
</li>
</ul>
<p>instantiateReactComponent:</p>
<ul>
<li>return ReactDOMTextComponent <ul>
<li>if(typeof node === ‘string’ || typeof node === ‘number’) </li>
</ul>
</li>
<li>return ReactDOMComponent<ul>
<li>if(typeof node === ‘object’ &amp;&amp; typeof node.type === ‘string’)</li>
</ul>
</li>
<li>return new ReactCompositeComponent <ul>
<li>if(typeof node === ‘object’ &amp;&amp; typeof node.type === ‘function’)</li>
</ul>
</li>
</ul>
<p>ReactDOMComponent.prototype.mountComponent: 浏览器默认元素</p>
<ul>
<li>assign type : tagOpen = ‘&lt;’ + ‘dic’</li>
<li>add props : tagOpen += propKey + props[propKey]</li>
<li>recursive child node to be content : each(content += childComponentInstance.mountComponent)</li>
<li>result : tagOpen + ‘&gt;’ + content + tagClose</li>
</ul>
<h4 id="Render-Composite-implement-analyse"><a href="#Render-Composite-implement-analyse" class="headerlink" title="Render Composite implement analyse"></a>Render Composite implement analyse</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var HelloMessage = React.createClass(&#123;</div><div class="line">  getInitialState: function() &#123;</div><div class="line">    return &#123;type: &apos;say:&apos;&#125;;</div><div class="line">  &#125;,</div><div class="line">  componentWillMount: function() &#123;</div><div class="line">    console.log(&apos;我就要开始渲染了。。。&apos;)</div><div class="line">  &#125;,</div><div class="line">  componentDidMount: function() &#123;</div><div class="line">    console.log(&apos;我已经渲染好了。。。&apos;)</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">    return React.createElement(&quot;div&quot;, null,this.state.type, &quot;Hello &quot;, this.props.name);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">React.render(React.createElement(HelloMessage, &#123;name: &quot;John&quot;&#125;), document.getElementById(&quot;container&quot;));</div></pre></td></tr></table></figure>
<p>React.createClass</p>
<ul>
<li>Constructor a child class</li>
<li>inserit to ReactClasss <ul>
<li>Constructor.prototype = new ReactClass();</li>
</ul>
</li>
<li>extend Constructor.prototype,spec</li>
</ul>
<p>ReactCompositeComponent.prototype.mountComponent</p>
<ul>
<li>initialize public class  by ‘ReactClass’ function <ul>
<li>var inst = new ReactClass(publicProps);</li>
</ul>
</li>
<li>life cycle callback <ul>
<li>inst.componentWillMount()</li>
</ul>
</li>
<li>call render to instance a  element<ul>
<li>renderedElement = inst.render() 返回的可能是一个DOM element</li>
</ul>
</li>
<li>getting component instance<ul>
<li>renderedComponentInstance = instantiateReactComponent(renderedElement)</li>
</ul>
</li>
<li>get rendered result by renderedComponentInstance<ul>
<li>renderedComponentInstance.mountComponent</li>
</ul>
</li>
<li>life cycle callback<ul>
<li>inst.componentDidMount()</li>
</ul>
</li>
</ul>
<h2 id="React-Native-ReRender-mechanism-重新渲染机制"><a href="#React-Native-ReRender-mechanism-重新渲染机制" class="headerlink" title="React Native ReRender mechanism 重新渲染机制"></a>React Native ReRender mechanism 重新渲染机制</h2><p>ReactClass.prototype.setState</p>
<ul>
<li>call ‘this._reactInternalInstance.receiveComponent(null, newState);’</li>
</ul>
<h3 id="All-the-component-implement-the-‘receiveComponent’-the-handle-the-render-of-themself-the-DOMComponent-is-the-most-complexest-it-used-diff-algorithm-to-handle-the-child-node-update"><a href="#All-the-component-implement-the-‘receiveComponent’-the-handle-the-render-of-themself-the-DOMComponent-is-the-most-complexest-it-used-diff-algorithm-to-handle-the-child-node-update" class="headerlink" title="All the component implement the ‘receiveComponent’ the handle the render of themself. the DOMComponent is the most complexest ,it used diff algorithm to handle the child node update."></a>All the component implement the ‘receiveComponent’ the handle the render of themself. the DOMComponent is the most complexest ,it used diff algorithm to handle the child node update.</h3><p>ReactCompositeComponent.prototype.receiveComponent</p>
<ul>
<li>update element 更新element对象</li>
<li>bind the new state and props 生成心的state和props</li>
<li>judge whether update or reRender the element by type and key</li>
</ul>
<p>ReactDOMTextComponent.prototype.receiveComponent </p>
<ul>
<li>if the text string is change, update content of the node 如果text的内容有变化，刷新节点</li>
</ul>
<p>ReactDOMComponent.prototype.receiveComponent</p>
<ul>
<li>update element 更新element对象</li>
<li>updateDOMProperties 更新属性</li>
<li>updateDOMChildren 更新子节点</li>
</ul>
<h3 id="implementation-of-DomComponent-RecevieComponent"><a href="#implementation-of-DomComponent-RecevieComponent" class="headerlink" title="implementation of DomComponent RecevieComponent"></a>implementation of DomComponent RecevieComponent</h3><p>ReactDOMComponent.prototype._updateDOMProperties</p>
<ul>
<li>remove the old attribute</li>
<li>remove the event monitor</li>
<li>add the new attribute</li>
<li>add the new event monitor</li>
</ul>
<p>ReactDOMComponent.prototype._updateDOMChildren</p>
<ul>
<li>diff<ul>
<li>user diff algorithm the find out diffrence and add the diffrence to the diffQueue</li>
</ul>
</li>
<li>patch<ul>
<li>traversal diffQueue for removing the changed node ， inserting the new note and inserting the modified node</li>
</ul>
</li>
</ul>
<h3 id="analyse-diff-and-patch"><a href="#analyse-diff-and-patch" class="headerlink" title="analyse diff and patch"></a>analyse diff and patch</h3><p>ReactDOMComponent.prototype._diff</p>
<ul>
<li>getting the previous component of childrend</li>
<li>generating the next component of childrend</li>
<li>assign the new children</li>
<li>compare the previous and next components<ul>
<li>previous Child handle <ul>
<li>if these is the same component and element , move it (MOVE_EXISTING)</li>
<li>if these is the same component but not the same element, remove element (REMOVE_NODE)<ul>
<li>remove event monitor of previous child</li>
</ul>
</li>
<li>if a previous child which was not exist in nest queue, delete the component</li>
</ul>
</li>
<li>next child handle<ul>
<li>add the new node (INSERT_MARKUP)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>ReactDOMComponent.prototype._patch</p>
<ul>
<li>delete REMOVE_NODE nodes</li>
<li>delete MOVE_EXISTING nodes</li>
<li>insert INSERT_MARKUP nodes</li>
<li>insert MOVE_EXISTING nodes</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/" target="_blank" rel="external">reactjs源码分析-上篇</a><br><a href="http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_two/" target="_blank" rel="external">reactjs源码分析-下篇（更新机制实现原理）</a><br><a href="http://www.jianshu.com/p/f75c1f0af3f0" target="_blank" rel="external">React为什么要使用Virtual DOM</a><br><a href="http://www.alloyteam.com/2015/10/react-virtual-analysis-of-the-dom/" target="_blank" rel="external">React虚拟DOM浅析</a><br><a href="https://zhuanlan.zhihu.com/p/21108312?refer=leanreact" target="_blank" rel="external">React 介绍</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-React&quot;&gt;&lt;a href=&quot;#What-is-React&quot; class=&quot;headerlink&quot; title=&quot;What is React&quot;&gt;&lt;/a&gt;What is React&lt;/h2&gt;&lt;p&gt;A JavaScript library for b
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS布局技术的演变和iPhoneX适配</title>
    <link href="http://blackteachinese.com/2017/11/02/ios_iOS11_iphoneX_problem/"/>
    <id>http://blackteachinese.com/2017/11/02/ios_iOS11_iphoneX_problem/</id>
    <published>2017-11-02T09:35:20.000Z</published>
    <updated>2017-11-05T14:19:26.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Top-and-Bottom-Layouts-Guides"><a href="#Top-and-Bottom-Layouts-Guides" class="headerlink" title="Top and Bottom Layouts Guides"></a>Top and Bottom Layouts Guides</h1><p>iOS11后苹果推出了”Safe Area Layout Guide”布局技术，废弃了iOS7推出的布局技术”Top and Bottom Layouts Guides”,”Top and Bottom Layouts Guides”寿终正寝，让我们回顾一下它彪悍的历史。</p>
<p>借用Harrison的一张图来说明一下”Top and Bottom Layouts Guides”<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fl4ni5bxkpj30lc12e0v9.jpg" alt=""></p>
<p>Apple 引入topLayoutGuide和bottomLayoutGuide做为UIViewController的属性,用来设置你内容区域不要被navigation、status、tabbar遮挡。<br>上图绿色部分的Content View，加了一个顶部约束相对于topLayoutGuide的底部的锚，加了一个底部约束相对于bottomLayoutGuide的顶部的锚。</p>
<h1 id="Safe-Area-Layout-Guide"><a href="#Safe-Area-Layout-Guide" class="headerlink" title="Safe Area Layout Guide"></a>Safe Area Layout Guide</h1><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fl4oqxa9e2j30ki0kkt93.jpg" alt=""><br>safe Area帮助我们将View放到整个屏幕可视的区域。即使navigationbar被设置为透明，系统也认为安全区域是从navigationbar的bottom开始计算的</p>
<p><strong>additionalSafeAreaInsets扩展安全区域</strong><br>使用additionalSafeAreaInsets可以扩展安全区域使它包括你自定义的content,每个View、controller都可以改变安全区域嵌入的区域</p>
<p><strong>safeAreaInsets</strong><br>safeAreaInsets表示一个view距离该View的安全区域的边距。一个controller的根视图的safeAreaInsets包括了被statusBar、navigationBar、tabbar等覆盖的区域，同时包括<br>additionalSafeAreaInsets自定义的insert值。</p>
<p><a href="https://developer.apple.com/documentation/uikit/uiview/positioning_content_relative_to_the_safe_area" target="_blank" rel="external">Positioning Content Relative to the Safe Area</a></p>
<h1 id="Adapt-for-Safe-Area-Layout-Guide"><a href="#Adapt-for-Safe-Area-Layout-Guide" class="headerlink" title="Adapt for Safe Area Layout Guide"></a>Adapt for Safe Area Layout Guide</h1><h2 id="tableview下移20pt或64pt"><a href="#tableview下移20pt或64pt" class="headerlink" title="tableview下移20pt或64pt"></a>tableview下移20pt或64pt</h2><p>iOS11的automaticallyAdjustsScrollViewInsets被废弃了。在iOS 11中决定tableView的内容与边缘距离的是adjustedContentInset属性，而不是contentInset。<br>当tableView超出安全区域时系统自动调整了SafeAreaInsets值从而影响adjustedContentInset值。</p>
<h1 id="iPhoneX的适配"><a href="#iPhoneX的适配" class="headerlink" title="iPhoneX的适配"></a>iPhoneX的适配</h1><p>iPhoneX设备的top多了刘海，bottom去了home键变成圆角的全屏区域。</p>
<h2 id="竖屏"><a href="#竖屏" class="headerlink" title="竖屏"></a>竖屏</h2><p>iPhone8 竖屏<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fl4pobnfu0j30af0ijglr.jpg" alt=""></p>
<p>iPhoneX 竖屏<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fl4pofkx0jj30fm0xt74r.jpg" alt=""></p>
<p>iPhoneX竖屏状态时top的安全区域从20到44，如果带navigationbar则从64到88。bottom的安全区域从0变成34</p>
<h2 id="横屏"><a href="#横屏" class="headerlink" title="横屏"></a>横屏</h2><p>iPhone8 横屏<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fl4pwlgtw4j30ij0aft8t.jpg" alt=""></p>
<p>iPhoneX 横屏<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fl4pwntmp0j30xu0fnmxl.jpg" alt=""></p>
<p>iPhoneX横屏状态时top安全区域为0，如果带navigationbar横屏下会缩小top为34，bottom的安全区域也为0，但是left和right都变成44</p>
<h2 id="controls适配"><a href="#controls适配" class="headerlink" title="controls适配"></a>controls适配</h2><p>所有的controls都不应该出现在safe area,项目中可能有一些自动布局的代码bottom的约束没有相对于bottomLayoutGuide，由于iPhoneX的底部是圆弧状的，所以控件如果靠边可能会被遮挡。适配的方法是添加约束到layoutMargins。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let margin = view.layoutMarginsGuide</div><div class="line">NSLayoutConstraint.activate([</div><div class="line">  button.leadingAnchor.constraint(equalTo: margin.leadingAnchor),</div><div class="line">  button.bottomAnchor.constraint(equalTo: margin.bottomAnchor)</div><div class="line">])</div></pre></td></tr></table></figure>
<h2 id="滑动手势适配"><a href="#滑动手势适配" class="headerlink" title="滑动手势适配"></a>滑动手势适配</h2><p>因为iPhoneX没有Home键，所以开锁是从底部往上滑来进行的。因此在底部34高度的区域，我们不应该放置会被响应的控件</p>
<h2 id="Table-View-Content-Insets适配"><a href="#Table-View-Content-Insets适配" class="headerlink" title="Table View Content Insets适配"></a>Table View Content Insets适配</h2><p>iOS11新增了一个insetsContentViewsToSafeArea属性来控制cell的content View是否insert到safe area。默认是true，这会导致在横屏时iPhoneX有一些微妙的变化。</p>
<p>看一下给Cell的content view设置背景色会是什么效果：</p>
<p>iPhone8下的效果：<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fl4qttrwsaj30ij0afglr.jpg" alt=""></p>
<p>iPhoneX下的效果：<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fl4quaud0fj30m80aadg3.jpg" alt=""></p>
<p>为什么会有这样的效果，因为Cell的content View是在安全区域里面的。但是cell的backgroundView却扩展到整个屏幕，所以iPhoneX下设置背景色得设置cell的backgroundView而不是contentView的。<br>设置cell的backgroundView的效果如下</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fl4quh15ujj30m80a9dg1.jpg" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>本文参考了相关文献</p>
<p><a href="https://useyourloaf.com/blog/supporting-iphone-x/" target="_blank" rel="external">Supporting iPhone X</a><br><a href="https://useyourloaf.com/blog/safe-area-layout-guide/" target="_blank" rel="external">Safe Area Layout Guide</a><br><a href="https://mp.weixin.qq.com/s/W1_0VrchCO50owhJNmJnuQ" target="_blank" rel="external">iOS 11 安全区域适配总结</a><br><a href="http://www.jianshu.com/p/370d82ba3939" target="_blank" rel="external">你可能需要为你的APP适配iOS11</a><br><a href="https://github.com/2877025939/iOS11" target="_blank" rel="external">iOS适配汇总文章</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Top-and-Bottom-Layouts-Guides&quot;&gt;&lt;a href=&quot;#Top-and-Bottom-Layouts-Guides&quot; class=&quot;headerlink&quot; title=&quot;Top and Bottom Layouts Guides&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发性能最佳实践之——如何找到多线程技术合适的应用场景</title>
    <link href="http://blackteachinese.com/2017/10/30/iOS_multithreading/"/>
    <id>http://blackteachinese.com/2017/10/30/iOS_multithreading/</id>
    <published>2017-10-30T10:19:00.000Z</published>
    <updated>2017-11-09T12:13:44.742Z</updated>
    
    <content type="html"><![CDATA[<p>我们在衡量某项技术、开源组件的性能时经常会设计一些对比实验来做验证。这种对比实验就像田径比赛，几个人一起赛跑，谁跑得快就是冠军。我们开发的功能可以跑在不同的硬件条件的设备，一般我们会选择条件最差的设备，或者我们业务应该支持的最差设备来做实验。但软件功能所承载的业务场景通常也比较多变，就像一个运动员要跑100米、800米、3000米，设计单一的条件最后做出来的实验结果可能没有太大意义。比如做iOS多线程技术性能的对比实验时，如果这样设计初始条件“控制线程数为20个、1000次线程任务循环次数“，最终得到的实验结果对工程开发的指导意义就不够。不同业务场景条件差别其实很大，比如IM、位置实时更新、抢订单属于高频率、低任务耗时，而数据库等IO操作属于低频率、高任务耗时。所以我们需要归纳各种多线程场景，使用多因素设计，设计多个自变量。还是回到多线程性能实验的例子。自变量：线程数、任务耗时、任务数。自变量的条件要能覆盖常用的业务场景，线程数：5～15～30，任务数：1000～10000～100000，任务耗时：1～5～10毫秒。最终得出来的实验结果也可以较准确得命中各种实际使用场景。</p>
<p>iOS常用的多线程技术有NSThread、GCD、pthread、NSOperation几种技术。之前看过一些开发者对这几种技术做过实验测试，得出具体的数据比较。但仅仅统计一定数量级别的运行效率对实际应用没有太大的指导性意义，最好是能模拟实际场景的线程环境来做测试。</p>
<p>那不同场景的因子有什么呢？<br>并发频率高低、任务耗时长短、稳定性</p>
<p>对应的测试关注点是什么？<br>并发频率高低：统计多个线程并发运行，最后全部运行完成的耗时长短<br>任务耗时长短：统计单个线程里不同耗时任务的完成时间<br>稳定性：进行多次实验，统计数据的变动区间</p>
<p>分析出上面测试关注点后，我们可以开始来设计实验了。</p>
<p><strong>实验对象：</strong><br>NSThread、单队列并行GCD、多队列串行GCD、NSOperation、pthread</p>
<p><strong>实验环境：</strong><br>设备、编译环境</p>
<p><strong>实验变量：</strong><br>线程的数量、每个线程里执行的任务次数、每个任务的耗时长短</p>
<p><strong>实验方法：</strong><br>模拟实际场景，设置几组实验变量的搭配，比如下面几组。</p>
<p>线程数：5/15个<br>任务数：1000/10000/100000次<br>耗时：1/5/10 毫秒</p>
<p><strong>实验结果：</strong></p>
<p>任务平均耗时速度排名<br>NSOperation &gt; 多队列串行GCD/NSThread &gt; 单队列并行GCD</p>
<p>所有线程任务全部完成速度排名</p>
<p>多队列串行GCD/NSThread &gt; NSOperation/单队列并行GCD</p>
<p><strong>实验结论</strong></p>
<p>多队列串行GCD和NSThread的特点相似，多个线程高并发的完成速度最快，单个线程的执行性能中等。<br>所以这两种技术适合高频率、低任务耗时的应用场景，比如IM、位置更新、抢订单等实时消息通信场景</p>
<p>NSOperation的特点是单个线程的执行性能最快，所以适合低频率、高任务耗时的应用场景，比如数据库、文件等IO场景</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在衡量某项技术、开源组件的性能时经常会设计一些对比实验来做验证。这种对比实验就像田径比赛，几个人一起赛跑，谁跑得快就是冠军。我们开发的功能可以跑在不同的硬件条件的设备，一般我们会选择条件最差的设备，或者我们业务应该支持的最差设备来做实验。但软件功能所承载的业务场景通常也
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>计算机的内存分配问题</title>
    <link href="http://blackteachinese.com/2017/10/28/c_memory_alloc/"/>
    <id>http://blackteachinese.com/2017/10/28/c_memory_alloc/</id>
    <published>2017-10-28T10:21:31.000Z</published>
    <updated>2017-10-30T06:37:48.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存对齐原则"><a href="#内存对齐原则" class="headerlink" title="内存对齐原则"></a>内存对齐原则</h2><p><strong>什么是内存对齐</strong><br>计算机的内存都是按byte来划分的，计算机在范围不同数据类型变量时会按照特定的内存地址访问，所以各种数据类型会按照一定规则在内存空间上排列，而不是顺序地一个一个排列，这就是内存对齐</p>
<p><strong>有什么用</strong><br>各平台对数据类型的读取会按特定的地址开始存取，访问不对齐的内存处理器需要做两次处理，访问对齐的内存处理器只需要做一次处理</p>
<p><strong>对齐算法</strong></p>
<p>1 数据类型以自身需要占用的字节数做为内存对齐值。</p>
<p>对于char型数据，其自身对齐值为1，对于short型为2，对于int,float型，其自身对齐值为4，对于double型，其自身对齐值为8，单位字节。</p>
<p>例如：int变量所分配的内存地址必须能够被4整除，double则必须能倍8整除</p>
<p>2 结构体或类自身的对齐值和自身成员变量对齐值最大的那个保持一致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">例如：</div><div class="line"></div><div class="line">struct D &#123;</div><div class="line">    char a;</div><div class="line">    int b;</div><div class="line">    double c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结构D的成员变量里c的对齐值最大为8，所以结构D的对齐值就是8</p>
<p>3 指定对齐值，使用#pragma pack (value）可以指定对齐值为Value</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">例如：</div><div class="line">#pragma pack (1) // 指定对齐值为1</div><div class="line">struct D &#123;</div><div class="line">    char a;</div><div class="line">    int b;</div><div class="line">    double c;</div><div class="line">&#125;</div><div class="line">#pragma pack () // 取消指定对齐，恢复默认的对齐方式</div></pre></td></tr></table></figure>
<p>4 当数据成员、结构体、类处于指定对齐区间时，真实的有效对齐值是自身对齐值和指定对齐值两个中更小的那个。</p>
<p><a href="https://baike.baidu.com/item/内存对齐/9537460?fr=aladdin" target="_blank" rel="external">内存对齐百科</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内存对齐原则&quot;&gt;&lt;a href=&quot;#内存对齐原则&quot; class=&quot;headerlink&quot; title=&quot;内存对齐原则&quot;&gt;&lt;/a&gt;内存对齐原则&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;什么是内存对齐&lt;/strong&gt;&lt;br&gt;计算机的内存都是按byte来划分的，计算机在范围不同
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>一个多层嵌套URL引发的URLEncode血案</title>
    <link href="http://blackteachinese.com/2017/10/25/ios_urlencode/"/>
    <id>http://blackteachinese.com/2017/10/25/ios_urlencode/</id>
    <published>2017-10-25T10:05:24.000Z</published>
    <updated>2017-10-30T06:37:51.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URL里中文字符正确过滤姿势"><a href="#URL里中文字符正确过滤姿势" class="headerlink" title="URL里中文字符正确过滤姿势"></a>URL里中文字符正确过滤姿势</h2><p>今天有个同事跟我反馈，有个复杂参数的路由跳转需求，目前路由解析满足不了。<br>这个需求是服务推送一个URL scheme到app，又app的路由寻找到对应的页面。<br>这个URL结构大致如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blacktea://gotoWebView?url=https://m.alibaba.com?key1=value1&amp;url2=https://www.blacktea.com.js&amp;key3=value3</div></pre></td></tr></table></figure>
<p>第一层嵌了一个参数url，第二层url的value里又嵌了一个参数url2。</p>
<p>服务端对这个url做了encode,推送到app的字符串如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blacktea://gotoWebView?url=https%3a%2f%2fm.alibaba.com%3fkey1%3dvalue1%26url2%3dhttps%253a%252f%252fwww.blacktea.com.js%26key3%3dvalue3</div></pre></td></tr></table></figure>
<p>在路由里为了避免空格和中文字符，会对传入的url分别调用stringByReplacingPercentEscapesUsingEncoding和stringByAddingPercentEscapesUsingEncoding</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">urlString = [urlString stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</div><div class="line">urlString = [urlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</div></pre></td></tr></table></figure>
<p>问题来了，因为stringByReplacingPercentEscapesUsingEncoding会对”%3a%2f%3d%26%3f”等被转义的保留字符反转义回”:/=&amp;?”。<br>而stringByAddingPercentEscapesUsingEncoding只会对中文非法字符做percent转义，不会处理”:/=&amp;?”等保留字符做encode处理。所以最后经过路由后，URL变成如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blacktea://gotoWebView?url=https://m.alibaba.com?key1=value1&amp;url2=https%253a%252f%252fwww.blacktea.com.js&amp;key3=value3</div></pre></td></tr></table></figure>
<p>这就导致第一层的参数url里的链接没有被encode，url2、key3这两个参数都被错认为是第一层的参数了。</p>
<p>路由层做过滤的实际意图是希望，把中文字符转义掉，同时又不影响url各层参数的encode状态。<br>解决的办法是使用如下两个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">static NSString *ASCRouterReplacingPercentEscapes(NSString *string, NSStringEncoding encoding)&#123;</div><div class="line">    NSString *result = ( NSString *)CFBridgingRelease(CFURLCreateStringByReplacingPercentEscapesUsingEncoding(kCFAllocatorDefault,</div><div class="line">                                                                                                             (__bridge CFStringRef)string,</div><div class="line">                                                                                                             NULL,</div><div class="line">                                                                                                             CFStringConvertNSStringEncodingToEncoding(encoding)));</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line">static NSString *ASCRouterAddingPercentEscapes(NSString *string, NSStringEncoding encoding) &#123;</div><div class="line">    return (NSString *)CFBridgingRelease(CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault,</div><div class="line">                                                                                  (__bridge CFStringRef)string,</div><div class="line">                                                                                  NULL,</div><div class="line">                                                                                  NULL,</div><div class="line">                                                                                  CFStringConvertNSStringEncodingToEncoding(encoding)));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用以上2个方法，便只会对中文非法字符进行转义，不会影响其他保留字符的转义情况。</p>
<h2 id="多层嵌套url正确的encode姿势"><a href="#多层嵌套url正确的encode姿势" class="headerlink" title="多层嵌套url正确的encode姿势"></a>多层嵌套url正确的encode姿势</h2><p>除此之外，对于多层嵌套的url需要正确地encode.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blacktea://gotoWebView?url=https://m.alibaba.com?key1=value1&amp;url2=https%253a%252f%252fwww.blacktea.com.js&amp;key3=value3</div></pre></td></tr></table></figure>
<p>对于上面例子这个url,需要做2层的urlencode</p>
<p><strong>错误encode方式：</strong></p>
<p>blacktea%3a%2f%2fgotoWebView%3furl%3dhttps%3a%2f%2fm.alibaba.com%3fkey1%3dvalue1%26url2%3dhttps%3a%2f%2fwww.blacktea.com.js%26key3%3dvalue3</p>
<p><strong>正确encode方式：</strong></p>
<p>第一次encode<br>from:<br><a href="https://www.blacktea.com.js" target="_blank" rel="external">https://www.blacktea.com.js</a><br>to:<br>https%3a%2f%2fwww.blacktea.com.js</p>
<p>第二次encode</p>
<p>from:<br><a href="https://m.alibaba.com?key1=value1&amp;url2=https%3a%2f%2fwww.blacktea.com.js&amp;key3=value3" target="_blank" rel="external">https://m.alibaba.com?key1=value1&amp;url2=https%3a%2f%2fwww.blacktea.com.js&amp;key3=value3</a></p>
<p>to:<br>https%3a%2f%2fm.alibaba.com%3fkey1%3dvalue1%26url2%3dhttps%253a%252f%252fwww.blacktea.com.js%26key3%3dvalue3</p>
<p>result:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blacktea://gotoWebView?url=https%3a%2f%2fm.alibaba.com%3fkey1%3dvalue1%26url2%3dhttps%253a%252f%252fwww.blacktea.com.js%26key3%3dvalue3</div></pre></td></tr></table></figure>
<p>客户端拿到这个被多层encode的url后，再一层一层能地解开，没解开一层都要decode一遍。</p>
<h2 id="UrlEncode编码原理"><a href="#UrlEncode编码原理" class="headerlink" title="UrlEncode编码原理"></a>UrlEncode编码原理</h2><p>编码原理：<br>将需要转码的字符转为16进制，然后从右到左，取4位(不足4位直接处理)，每2位做一位，前面加上%，编码成%XY格式。</p>
<p>比如：<br>空格ASCII码是32，对应16进制是20，那么urlencode编码结果是:%20<br>比如：<br>中ASCII码是-10544，对应的16进制是FFFFFFFFFFFFD6D0，那么urlencode编码结果是:%D6%D0</p>
<p>URI统一资源标识符里允许的所有字符里，分为保留字符和非保留字符。百分号编码(Percent-encoding)会把保留字符转义为特殊字符序列。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fkvva3w5xnj30k60er76g.jpg" alt=""><br><a href="https://baike.baidu.com/item/urlencode" target="_blank" rel="external">百度百科urlencode</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;URL里中文字符正确过滤姿势&quot;&gt;&lt;a href=&quot;#URL里中文字符正确过滤姿势&quot; class=&quot;headerlink&quot; title=&quot;URL里中文字符正确过滤姿势&quot;&gt;&lt;/a&gt;URL里中文字符正确过滤姿势&lt;/h2&gt;&lt;p&gt;今天有个同事跟我反馈，有个复杂参数的路由跳转
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS里synchronized的死锁、性能、实效</title>
    <link href="http://blackteachinese.com/2017/10/19/iOS_%20synchronized/"/>
    <id>http://blackteachinese.com/2017/10/19/iOS_ synchronized/</id>
    <published>2017-10-19T02:39:00.000Z</published>
    <updated>2017-10-19T06:27:04.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="synchronized的死锁"><a href="#synchronized的死锁" class="headerlink" title="synchronized的死锁"></a>synchronized的死锁</h2><p>我们已经习惯了使用synchronized来做同步锁，但在实际开发中发现，写得不好容易出现死锁的坑。比如像下面这样的代码有两个个锁被公用，在多线程的情况下就容易导致死锁。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#import &quot;BTSynchronizedObjectA.h&quot;</div><div class="line"></div><div class="line">@implementation BTSynchronizedObjectA</div><div class="line">- (void)dosomethingInA &#123;</div><div class="line">    @synchronized(self)&#123;</div><div class="line">        NSLog(@&quot;dosomethingInA&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">#import &quot;BTSynchronizedObjectB.h&quot;</div><div class="line"></div><div class="line">@implementation BTSynchronizedObjectB</div><div class="line"></div><div class="line">- (void)callA &#123;</div><div class="line">    NSLog(@&quot;call A begin&quot;);</div><div class="line">    [self.shareLock lock];</div><div class="line">    [self.synchronizedObjectA dosomethingInA];</div><div class="line">    [self.shareLock unlock];</div><div class="line">    NSLog(@&quot;call A end&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)dosomethingInB &#123;</div><div class="line">    NSLog(@&quot;dosomethingInB begin&quot;);</div><div class="line">        @synchronized(self.synchronizedObjectA) &#123;</div><div class="line">            [self.shareLock lock];</div><div class="line">            NSLog(@&quot;dosomethingInB&quot;);</div><div class="line">            [self.shareLock unlock];</div><div class="line">        &#125;</div><div class="line">    NSLog(@&quot;dosomethingInB begin&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>怎么写可以避免这种情况出现呢?改写的方法是在用到synchronized时传入一个内部NSObject成员变量，外部不能获取到这个变量，就不会形成交替死锁。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#import &quot;BTSynchronizedObjectA.h&quot;</div><div class="line"></div><div class="line">@implementation BTSynchronizedObjectA</div><div class="line">- (void)dosomethingInA &#123;</div><div class="line">    @synchronized(self.tokenA)&#123;</div><div class="line">        NSLog(@&quot;dosomethingInA&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="synchronized的性能"><a href="#synchronized的性能" class="headerlink" title="synchronized的性能"></a>synchronized的性能</h2><p>synchronized锁本身性能是会比其他锁要慢，有人对此做过测试。但是在实际使用中，锁本身的性能差异几乎可以忽略不计。<br>那为什么有人会抱怨用synchronized性能不好呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)testPerformance &#123;</div><div class="line">    @synchronized(self.token) &#123;</div><div class="line">        // do some thing</div><div class="line">        [self dosomethingelse];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>像上面这段被加锁的代码里，通过[self dosomethingelse]再调用别的方法。dosomethingelse方法的开发者，很可能并不知道自己的方法被锁同步的，他又可能调用别的函数，这样一层一层调用就可能变得更慢。<br>所以使用synchronized时一定要注意，尽量减少锁的范围和粒度。</p>
<p>不同数据使用不同锁，控制最小的粒度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@synchronized (tokenA) &#123;</div><div class="line">    // do some thing</div><div class="line">&#125;</div><div class="line"></div><div class="line">@synchronized (tokenB) &#123;</div><div class="line">    // do some thing</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>减小加锁的范围，不必要加锁的代码放到外面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@synchronized (tokenA) &#123;</div><div class="line">    // do some thing need locked</div><div class="line">&#125;</div><div class="line">    // do some thing else</div><div class="line">   [self dosomethingelse];</div><div class="line">   ...</div></pre></td></tr></table></figure>
<h2 id="synchronized的失效"><a href="#synchronized的失效" class="headerlink" title="synchronized的失效"></a>synchronized的失效</h2><p>用synchronized时需要传入一个object,你有没有想过如果你传入的是nil会怎么样呢？<br>根据汇编代码可以发现，synchronized实现里会调用objc_sync_enter和objc_sync_exit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  @synchronized(self) &#123;</div><div class="line">    return [[myString retain] autorelease];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转换为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  objc_sync_enter(self)</div><div class="line">    id retVal = [[myString retain] autorelease];</div><div class="line">  objc_sync_exit(self);</div><div class="line">  return retVal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>objc_sync_enter和objc_sync_exit函数定义在<objc objc-sync.h=""><br>其中objc_sync_enter函数的实现里，正常的情况obj不为nil时，会根据obj内存地址的哈希值查找合适的SyncData然后使用递归mutex加锁recursive_mutex_lock。到了objc_sync_exit时同样通过obj的内存地址的哈希值查找合适的SyncData，然后将其解锁recursive_mutex_unlock。</objc></p>
<p>But,当执行objc_sync_enter函数时，如果传入的obj为nil，那并不会加锁，直接走到objc_sync_nil。也就是说，如果使用@synchronized时传入的obj为nil,那将不会加锁也就是失去了同步的效果。所以一定要保证obj不在执行期间被设置被nil。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">int objc_sync_enter(id obj)</div><div class="line">&#123;</div><div class="line">    int result = OBJC_SYNC_SUCCESS;</div><div class="line"></div><div class="line">    if (obj) &#123;</div><div class="line">        SyncData* data = id2data(obj, ACQUIRE);</div><div class="line">        require_action_string(data != NULL, done, result = OBJC_SYNC_NOT_INITIALIZED, &quot;id2data failed&quot;);</div><div class="line">	</div><div class="line">        result = recursive_mutex_lock(&amp;data-&gt;mutex);</div><div class="line">        require_noerr_string(result, done, &quot;mutex_lock failed&quot;);</div><div class="line">    &#125; else &#123;</div><div class="line">        // @synchronized(nil) does nothing</div><div class="line">        if (DebugNilSync) &#123;</div><div class="line">            _objc_inform(&quot;NIL SYNC DEBUG: @synchronized(nil); set a breakpoint on objc_sync_nil to debug&quot;);</div><div class="line">        &#125;</div><div class="line">        objc_sync_nil();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">done: </div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">int objc_sync_exit(id obj)</div><div class="line">&#123;</div><div class="line">    int result = OBJC_SYNC_SUCCESS;</div><div class="line">    </div><div class="line">    if (obj) &#123;</div><div class="line">        SyncData* data = id2data(obj, RELEASE); </div><div class="line">        require_action_string(data != NULL, done, result = OBJC_SYNC_NOT_OWNING_THREAD_ERROR, &quot;id2data failed&quot;);</div><div class="line">        </div><div class="line">        result = recursive_mutex_unlock(&amp;data-&gt;mutex);</div><div class="line">        require_noerr_string(result, done, &quot;mutex_unlock failed&quot;);</div><div class="line">    &#125; else &#123;</div><div class="line">        // @synchronized(nil) does nothing</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">done:</div><div class="line">    if ( result == RECURSIVE_MUTEX_NOT_LOCKED )</div><div class="line">         result = OBJC_SYNC_NOT_OWNING_THREAD_ERROR;</div><div class="line"></div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在工程里，将obj设置为nil，给objc_sync_nil加个断点，会看到确实走到objc_sync_nil函数<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fknih8473kj30f20doad4.jpg" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/1215330/how-does-synchronized-lock-unlock-in-objective-c/6047218#6047218" target="_blank" rel="external">synchronized的实现</a><br><a href="https://opensource.apple.com/source/objc4/objc4-646/runtime/objc-sync.mm" target="_blank" rel="external">objc-sync源码</a><br><a href="http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/" target="_blank" rel="external">关于 @synchronized，这儿比你想知道的还要多</a><br><a href="http://mrpeak.cn/blog/synchronized/" target="_blank" rel="external">正确使用多线程同步锁@synchronized()</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;synchronized的死锁&quot;&gt;&lt;a href=&quot;#synchronized的死锁&quot; class=&quot;headerlink&quot; title=&quot;synchronized的死锁&quot;&gt;&lt;/a&gt;synchronized的死锁&lt;/h2&gt;&lt;p&gt;我们已经习惯了使用synchroni
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>明确的目标的反效果</title>
    <link href="http://blackteachinese.com/2017/09/28/target_how_to_make_target/"/>
    <id>http://blackteachinese.com/2017/09/28/target_how_to_make_target/</id>
    <published>2017-09-28T14:35:00.000Z</published>
    <updated>2017-10-31T03:12:40.560Z</updated>
    
    <content type="html"><![CDATA[<p>最近听到一个毁三观的观点，”明确的目标是有害的“。为什么是有害的呢？<br>第一个理由是，明确的目标违背经济学原理“看不见的手”。<br>比如今年宝洁定了1000亿的业务目标，如果提前完成了，大家就会放松了。但今年行情可能就是很好，应该乘胜追击才不浪费机会。而如果行情不好，很难完成这个数字，就可能会做各种不合理的促销，消耗第二年的购买力。<br>第二个理由是，目标太明确，可能会让人不惜一切代价，忽视风险。<br>例如像我定了每天跑3.5公里的目标，但由于最近工作比较忙，回去已经10点多了。如果按目标继续跑，因为身体状况不好，跑步得到的可能达不到锻炼的效果，反而增加了身体的负担。</p>
<p>这两个理由听起来还是很符合逻辑的。那我们难道就不定明确的目标吗？<br>也不是。<br>制定目标的过程，能使我们梳理清楚自己对未来的合理期望。<br>我们大部份人对自己未来的期望都很模糊。因为模糊，很难衡量期望的合理性、意义、价值和难度。<br>这个时候思考目标的过程就很有意义了，这让我们从混沌到清晰。<br>有点挑战的目标，并让一定范围内的社交关系知道，能让自己形成一定的焦虑，从而提升自己的执行力。</p>
<p>目标制定好，在执行的过程中我们应该尽量遵循2个原则。<br>1 合理投入，理性调整<br>在执行的过程中，我们要投入预期的精力。遇到特殊情况应该适当地调整目标。<br>2 自我觉察，克服人性弱点。<br>我们常常因为懒惰、拖延、逃避等人性的弱点导致不能投入足够的精力在目标的执行中。这关键在于不能及时觉察到自己在拖延。<br>最典型例子就是我们平时会无意识地刷微信朋友圈，网易新闻。事后我们可能会懊恼，又浪费了时间。避免这种窘境的方法是，提升觉察能力，在打开微信前觉察到自己的行为不理性，也可以像查理.芒格一样思考一下，“我即将做的是一个理性的抉择吗？”</p>
<p>以上主要针对个人目标来考虑，而针对团队的目标，其实还会有更多的意义…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近听到一个毁三观的观点，”明确的目标是有害的“。为什么是有害的呢？&lt;br&gt;第一个理由是，明确的目标违背经济学原理“看不见的手”。&lt;br&gt;比如今年宝洁定了1000亿的业务目标，如果提前完成了，大家就会放松了。但今年行情可能就是很好，应该乘胜追击才不浪费机会。而如果行情不好，
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发性能最佳实践之——容易出现耗时阻塞的检查清单(持续更新)</title>
    <link href="http://blackteachinese.com/2017/09/22/iOS_best_performance_easyBlock/"/>
    <id>http://blackteachinese.com/2017/09/22/iOS_best_performance_easyBlock/</id>
    <published>2017-09-22T03:19:00.000Z</published>
    <updated>2017-10-30T12:33:56.204Z</updated>
    
    <content type="html"><![CDATA[<p><strong>剪贴板读取</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">   UIPasteboard *pasteboard = [UIPasteboard generalPasteboard]; </div><div class="line">   if (pasteboard.string.length &gt; 0) &#123;//这个方法会阻塞线程</div><div class="line">      NSString *text = [pasteboard.string copy];</div><div class="line">      [pasteboard setValue:@&quot;&quot; forPasteboardType:UIPasteboardNameGeneral];</div><div class="line">      if (text == nil || [text isEqualToString:@&quot;&quot;]) &#123;</div><div class="line">          return ;</div><div class="line">      &#125;</div><div class="line">      dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">          [self processShareCode:text];</div><div class="line">      &#125;);</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>日期格式化</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</div><div class="line">[formatter setDateStyle:NSDateFormatterShortStyle];</div><div class="line">[formatter setDateFormat:@&quot;yyyy#MM#dd#HH:mm#ss&quot;];</div><div class="line">NSString *result = [formatter stringFromDate:date];</div></pre></td></tr></table></figure>
<p><strong>文件读取</strong>    </p>
<p>我们通常会使用NSFileManager来读取文件，但是NSFileManager读取文件并不是性能最好的,推荐使用stat.h里的’int stat(const char <em>, struct stat </em>) __DARWIN_INODE64(stat);’方法。</p>
<p>NSFileManager<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mach_timebase_info_data_t info;  </div><div class="line">if (mach_timebase_info(&amp;info) != KERN_SUCCESS) return -1.0; </div><div class="line">__darwin_off_t fileSize1 = 0;</div><div class="line">uint64_t start = mach_absolute_time();</div><div class="line">for (NSInteger i = 0; i &lt;= 10000; i++) &#123;</div><div class="line">    NSDictionary&lt;NSFileAttributeKey, id&gt;* attributes = [[NSFileManager defaultManager] attributesOfItemAtPath:imagePath error:nil];</div><div class="line">    fileSize1= [attributes fileSize];</div><div class="line">&#125;</div><div class="line">uint64_t end = mach_absolute_time();</div><div class="line">uint64_t elapsed = end - start;  </div><div class="line">uint64_t nanos1 = elapsed * info.numer / info.denom;</div><div class="line">return (CGFloat)nanos / NSEC_PER_SEC;</div></pre></td></tr></table></figure></p>
<p>stat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mach_timebase_info_data_t info;  </div><div class="line"> if (mach_timebase_info(&amp;info) != KERN_SUCCESS) return -1.0; </div><div class="line"> __darwin_off_t fileSize = 0;</div><div class="line"> uint64_t start = mach_absolute_time();</div><div class="line"> for (NSInteger i = 0; i &lt;= 10000; i++) &#123;</div><div class="line">     int rs = stat(filePath, &amp;statBuf);</div><div class="line">     fileSize= statBuf.st_size;</div><div class="line"> &#125;</div><div class="line"> uint64_t end = mach_absolute_time();</div><div class="line"> uint64_t elapsed = end - start;  </div><div class="line"> uint64_t nanos1 = elapsed * info.numer / info.denom;</div><div class="line"> return (CGFloat)nanos / NSEC_PER_SEC;</div></pre></td></tr></table></figure></p>
<p>在iPhone6S设备10000次循环的测试条件下，stat是性能是NSFileManager的4倍左右</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;剪贴板读取&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>如何编写安全的iOS代码</title>
    <link href="http://blackteachinese.com/2017/09/20/iOS_best_performance_safe/"/>
    <id>http://blackteachinese.com/2017/09/20/iOS_best_performance_safe/</id>
    <published>2017-09-20T14:30:27.000Z</published>
    <updated>2017-09-22T09:33:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>遍历集合先Copy</strong></p>
<p>如果你正在遍历的集合是mutable的,在你遍历的同时，可能另外一个线程对这个集合做了修改，一个Crash将出现.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*** Terminating app due to uncaught exception &apos;NSGenericException&apos;, reason: &apos;*** Collection  was mutated while being enumerated.&apos;</div></pre></td></tr></table></figure>
<p>如何避免呢？<br>拿到NSArray／NSMutableArray、NSDictionary/NSMutableDictionary都copy一下。</p>
<p><strong>集合操作要预判</strong><br>提前做好判断，保证key/value不为nil，数组不会越界。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">addObject:</div><div class="line">removeObjectAtIndex:</div><div class="line">insertObjectAtIndex:</div><div class="line">setObject:forKey:</div><div class="line">@[]</div><div class="line">@&#123;&#125;</div></pre></td></tr></table></figure>
<p><strong>NSKeyedArchiver别常用</strong><br>在iOS8上会抛exception，非要用加上@try{}@catch{}</p>
<p><strong>KVO成对出现</strong></p>
<p>有add必要有remove，否则极有可能Crash，可以使用FaceBook的FBKVOController</p>
<p><strong>tableView的delegate要置空</strong><br>viewController的dealloc把tableView的delegate置空</p>
<p>iOS8及以前，delegate属性不是weak，不会自动设为nil。否则做异步网络请求，退出页面就容易出现野指针。</p>
<p><strong>不要在Category覆盖系统方法</strong></p>
<p>不要坑别人</p>
<p><strong>Api需要特定线程，记得加断言</strong><br>如果一个api需要在特定线程执行，记得加上断言判断，否则调用方容易在不合适的线程调用，导致Crash</p>
<p><strong>多线程环境下懒加载变量要加锁</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (id *)pen</div><div class="line">&#123;</div><div class="line">    if (!_pen) &#123;</div><div class="line">        @synchronized(self) &#123; </div><div class="line">            if (!_pen) &#123;</div><div class="line">                _pen = [[BTPen alloc] init];</div><div class="line">                _pen = @&quot;tea&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return _pen;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>NSNotificationCenter要防止Self为空</strong><br>NSNotificationCenter在iOS 8及更老系统上存在多线程bug，selector执行到一半时可能会因为self销毁而触发crash.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)receiveTesNotify:(NSNotification *)notify</div><div class="line">&#123;</div><div class="line">   __weak typeof(self) weakSelf = self;</div><div class="line">   __strong typeof(self) strongSelf = wself;</div><div class="line">   if (! weakSelf) &#123; </div><div class="line">    return; </div><div class="line">   &#125;</div><div class="line">   [strongSelf action];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>使用dispatch_sync要小心</strong></p>
<p>容易死锁。下面将一个Block同步到主线程的队列里。因为你用同步，必须先让你执行，但你放到主线程队列里，却要等待主线程原来的任务执行完。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)test &#123;</div><div class="line"> dispatch_queue_t mainQueue = dispatch_get_main_queue();</div><div class="line">  dispatch_block_t block = ^() &#123;</div><div class="line">      NSLog(@&quot;Hello&quot;);</div><div class="line">  &#125;;</div><div class="line">  dispatch_sync(mainQueue, block);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>cancelPreviousPerformRequestsWithTarget要防御</strong></p>
<p>对receiver使用cancelPreviousPerformRequestsWithTarget，会导致receiver引用计数减1。如果调用前receiver的引用计数就是1，调用完receiver就会被释放。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">__weak typeof(self) weakSelf = self;</div><div class="line">[NSObject cancelPreviousPerformRequestsWithTarget:self];</div><div class="line">if (!weakSelf)</div><div class="line">&#123;</div><div class="line">//self已经被销毁</div><div class="line">    return;</div><div class="line">&#125;</div><div class="line">// 再调用会Crash</div><div class="line">[self action];</div></pre></td></tr></table></figure>
<p><strong>在dealloc中，不要将self作为参数传递</strong></p>
<p>如果self在此时被retain住，到下个runloop周期再次释放，则会造成多次释放crash。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-(void)dealloc&#123;</div><div class="line">    [self doSome:self]; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  因为当前已经在self所指向对象的销毁阶段，如果在doSome:中将self放到了autorelease pool中，那么self会被retain住，计划下个runloop周期再进行销毁；但是dealloc运行结束后，self对象的内存空间就直接被回收了，self变成了野指针<br> 当到了下个runloop周期，self指向的对象实际上已经被销毁，会因为非法访问造成crash问题</p>
<p><strong>使用锁要避免出现特殊逻辑锁没有被回收</strong></p>
<p>如果某个方法里锁未被回收，下次调用该方法会造成线程死锁</p>
<p>可能提前出现return,要在return前回收</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (void) doSomething&#123;</div><div class="line">    [self.lock lock];</div><div class="line">    if (type == 1)&#123;</div><div class="line">        .....</div><div class="line">        [self.lock unlock];</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    else if(type == 2)&#123;</div><div class="line">        .....</div><div class="line">        [self.lock unlock];</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    .....</div><div class="line">    [self.lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可能出现异常,要在finally回收</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void) doSomething&#123;</div><div class="line">    [self.lock lock];</div><div class="line">    @try&#123;</div><div class="line">        ...</div><div class="line">    &#125;@catch(NSException* ex)&#123;</div><div class="line">    &#125;@finally&#123;</div><div class="line">        ......</div><div class="line">        [self.lock unlock];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;遍历集合先Copy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你正在遍历的集合是mutable的,在你遍历的同时，可能另外一个线程对这个集合做了修改，一个Crash将出现.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS最容易违反的代码规范</title>
    <link href="http://blackteachinese.com/2017/09/15/iOS_coding_rule/"/>
    <id>http://blackteachinese.com/2017/09/15/iOS_coding_rule/</id>
    <published>2017-09-15T13:39:27.000Z</published>
    <updated>2017-09-20T16:09:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p><strong>常量和枚举添加3个（2个是预留给Apple的）大写字符做为前缀</strong></p>
<p><strong>如果方法返回接收者的某个属性，则以属性名称作为方法名。如果方法没有间接地返回 一个或多个值，您也无须使用”get“这样的单词。</strong></p>
<p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (CGFloat)itemHeight;</div></pre></td></tr></table></figure></p>
<p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (CGFloat)getitemHeight;</div></pre></td></tr></table></figure></p>
<p><strong>不要使用”and“来连接两个表示接受者属性的关键字。<br>虽然下面的例子使用”and“这个词感觉还不错，但是随着创建的方法所带有的关键字越来 越多，这种方式会引起问题</strong></p>
<p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)getColor:(UIColor *)color count:(int*)count name:(NSString *)name;</div></pre></td></tr></table></figure></p>
<p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)getColor:(UIColor *)color andCount:(int*)count andName:(NSString *)name;</div></pre></td></tr></table></figure></p>
<p><strong>只有当方法间接地返回对象或者数值，您才需要在方法名称中使用 get”。这种格式只适 用于需要返回多个数据项的方法。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)getColor:(UIColor *)color count:(int*)count name:(NSString *)name;</div></pre></td></tr></table></figure>
<p><strong>方法名称的开头应标识出发送消息的对象所属的类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (BOOL)tableView:(NSTableView *)tableView didSelectRow:(int)row;</div><div class="line">- (BOOL)application:(NSApplication *)sender openUrl:(NSString</div><div class="line">*)url;</div></pre></td></tr></table></figure>
<p><strong>要求委托代表其他对象执行某件事，使用“should”</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (BOOL)controllerShouldFetch:(id)sender;</div></pre></td></tr></table></figure>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><strong>NS_ENUM枚举类型定义一群相互关联的整数值常量。枚举项以枚举类型为前缀</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">typedef NS_ENUM(NSInteger,BTPlay) &#123;</div><div class="line">BTPlayBall = 0,</div><div class="line">BTPlayGame = 1</div><div class="line">&#125; ;</div></pre></td></tr></table></figure>
<p><strong>NS_OPTIONS定义一组相互关联的位移枚举常量。位移枚举常量是可以组合使用的。枚举项以枚举类型为前缀</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">typedef NS_OPTIONS(NSInteger,BTPlay) &#123;</div><div class="line">BTPlayEveryData = 1 &lt;&lt; 0,</div><div class="line">BTPlayMusic = 1 &lt;&lt; 1</div><div class="line">&#125; ;</div></pre></td></tr></table></figure>
<p><strong>使用 const 来创建浮点值常量。如果某个整数值常量和其他的常量不相关，您也可以使用 const 来创建，否则，则应使用枚举类型。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const float BTLabelHeight;</div></pre></td></tr></table></figure>
<p><strong>大写字符表示预处理字符</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#ifdef DEBUG</div></pre></td></tr></table></figure>
<p><strong>使用常量来代替字符串字面值和数字。常量应该用 static 声明为静态常量，而不要用 #define，除非它明确的作为一个宏来使用。</strong></p>
<p>正例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">static NSString * const BTBarcelonaNotification = @&quot;BTBarcelonaNotification&quot;;</div><div class="line">static const CGFloat BTBarcelonaHeaderHeight = 20.0f;</div></pre></td></tr></table></figure></p>
<p>反例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define BTBarcelonaNotification @&quot;BTBarcelonaNotification&quot;</div><div class="line">#define BTBarcelonaHeaderHeight 50</div></pre></td></tr></table></figure></p>
<p><strong>在头文件将常量暴露，在实现文件中为它赋值</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extern NSString *const BTBarcelonaNotification;</div></pre></td></tr></table></figure>
<p><strong>Notification消息使用全局的 NSString 对象进行标识</strong></p>
<p>[Name of associated class] + [Did | Will] + [UniquePartOfName] + Notification</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BTWindwowWillBecomeBlackNotification</div></pre></td></tr></table></figure>
<p><strong>异常使用全局的 NSString 对象来标识</strong><br>[Prefix] + [UniquePartOfName] + Exception</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BTImageCornerDrawException</div></pre></td></tr></table></figure>
<p><strong>+（void）initialize必须判断class类型或使用dispatch_once防止执行多次</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;常量和枚举添加3个（2个是预留给Apple的）大写字符做为前缀&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果方法返回
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>零基础如何做Weex开发</title>
    <link href="http://blackteachinese.com/2017/09/14/weex_how_to_start/"/>
    <id>http://blackteachinese.com/2017/09/14/weex_how_to_start/</id>
    <published>2017-09-14T13:39:27.000Z</published>
    <updated>2017-11-13T07:46:27.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p><strong>组件(Components)</strong><br>可以复用的UI元素,相当于在iOS里自己写了一个UI控件</p>
<p><strong>属性(Props)</strong><br>Props 就是组件的属性，相当于iOS里的Property</p>
<p><strong>状态(State)</strong></p>
<p>组件内部维持的状态数据称为 state ，它是组件的当前状态。可以把组件简单看成一个”状态机”，根据 state 呈现不同的 UI 展示。一旦 state 被更改，组件就会自动调用自身的 render 函数重新渲染 UI，这个更改 state 的动作会通过 this.setState方法来触发</p>
<p><strong>事件(Events)</strong><br>使用驼峰式命名指定要绑定的事件属性为组件定义的一个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;TextInput onInput=&#123; (event) =&gt; this.setState(&#123; text: event.value &#125;) &#125; /&gt;</div></pre></td></tr></table></figure>
<p><strong>JSX</strong><br>JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。 它只是一种语法糖。Rax 的 DSL 语法是基于 React JSX 语法而创造。</p>
<p><strong>Flexbox 布局</strong><br>使用flexbox 规则来描述组件</p>
<p><strong>样式</strong><br>使用对象的方式来描述 CSS 中的样式，并传递给组件的 style<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;&#123; width: 100, height: 100, backgroundColor: &apos;skyblue&apos; &#125;&#125; /&gt;</div></pre></td></tr></table></figure></p>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>渲染阶段</p>
<p><strong>getDefaultPops</strong><br>用于返回组件实例的默认props值。对于组件类来说，这个方法只会被调用一次.</p>
<p><strong>getInitialState</strong><br>用来初始化每个实例的state。对于每个组件实例来讲，这个方法只会调用一次</p>
<p><strong>componentWillMount</strong><br>该方法在首次渲染之前调用</p>
<p><strong>render</strong><br>该方法会创建一个虚拟 DOM，用来表示组件的输出。</p>
<p><strong>componentDidMount</strong><br>该方法被调用时，页面中已经渲染出真实的节点。</p>
<p>存在阶段</p>
<p><strong>componentWillReceiveProps</strong><br>父组件可以在外部更改子组件的props，更改后会调用此方法</p>
<p>销毁阶段</p>
<p><strong>componentWillUnmount</strong></p>
<p>在 componentDidMount 中添加的任务都需要再该方法中撤销，如创建的定时器或事件监听器</p>
<h2 id="Flexbox-和样式"><a href="#Flexbox-和样式" class="headerlink" title="Flexbox 和样式"></a>Flexbox 和样式</h2><p>style属性用来定义组件的样式,并支持一个数组.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;[styles.container, styles.custom]&#125;&gt;</div><div class="line">  &lt;Text&gt;hello world&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div><div class="line"></div><div class="line">const styles = &#123;</div><div class="line">  container: &#123;</div><div class="line">    background: &apos;grey&apos;,</div><div class="line">    width: &apos;750rem&apos;</div><div class="line">  &#125;,</div><div class="line">  custom: &#123;</div><div class="line">    height: &apos;100rem&apos;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>设置单位时,推荐使用不加单位的写法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">  &lt;Text&gt;hello world&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div><div class="line"></div><div class="line">const styles = &#123;</div><div class="line">  container: &#123;</div><div class="line">    background: &apos;grey&apos;,</div><div class="line">    width: 375</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">1 个单位的大小为屏幕宽度的 1/750，这样做的好处是当你拿到一份 750px 宽的视觉稿，你再也不需要去做人工换算。</div></pre></td></tr></table></figure>
<p>JSX语法</p>
<p>Rax中使用CSS书写样式</p>
<p>详细文档:<a href="https://alibaba.github.io/rax/guide/style" target="_blank" rel="external">Rax-CSS</a></p>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>简单的点击事件、Appear事件、滚动事件、用户输入事件、复杂手势事件<br>详细文档：<a href="https://alibaba.github.io/rax/guide/event-handle" target="_blank" rel="external">Rax事件处理</a></p>
<h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>Rax 实现了 Fetch API,并推荐使用 fetch 来发起异步网络请求<br>详细文档:<a href="https://alibaba.github.io/rax/guide/network" target="_blank" rel="external">Fetch</a></p>
<h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><p>使用 weex-toolkit。<br>详细文档:<a href="http://weex.apache.org/cn/guide/tools/toolkit.html" target="_blank" rel="external">weex-toolkit</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g weex-toolkit</div></pre></td></tr></table></figure>
<h2 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h2><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 新手</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flexbox布局教程</a><br><a href="http://blog.csdn.net/liuyan19891230/article/details/50724630" target="_blank" rel="external">CSS3的border-radius属性详解</a><br><a href="https://alibaba.github.io/rax/guide" target="_blank" rel="external">Rax官方文档</a><br><a href="https://weex.incubator.apache.org/cn/guide/" target="_blank" rel="external">Weex官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;组件(Components)&lt;/strong&gt;&lt;br&gt;可以复用的UI元素,相当于在iOS里自己写了一个UI控
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS性能最佳实践之——圆角和阴影的正确使用姿势</title>
    <link href="http://blackteachinese.com/2017/09/11/iOS_best_performance_rounded_and_shadow/"/>
    <id>http://blackteachinese.com/2017/09/11/iOS_best_performance_rounded_and_shadow/</id>
    <published>2017-09-11T13:39:27.000Z</published>
    <updated>2017-09-16T13:09:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片使用阴影的正确姿势"><a href="#图片使用阴影的正确姿势" class="headerlink" title="图片使用阴影的正确姿势"></a>图片使用阴影的正确姿势</h2><p>错误示范：会导致离屏渲染</p>
<p><del>imageView.layer.shadowOpacity = 0.5;</del></p>
<p>正确做法：通过shadowPath，告诉CoreAnimation你要渲染的形状，减少离屏渲染</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">imageView.layer.shadowOpacity = 0.5;</div><div class="line">imageView.layer.shadowPath = [[UIBezierPath bezierPathWithRect:imageView.bounds] CGPath];</div></pre></td></tr></table></figure>
<h2 id="对图片做圆角处理的正确姿势"><a href="#对图片做圆角处理的正确姿势" class="headerlink" title="对图片做圆角处理的正确姿势"></a>对图片做圆角处理的正确姿势</h2><p>错误示范：<br>给imageView加cornerRadius后用masksToBounds切。同时加上cornerRadius和masksToBounds后，会触发离屏幕渲染，如果一个Cell里有多个这样的图片，滑动的时候GPU压力会很大，从而导致严重的掉帧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UIImage *image = [UIImage imageNamed:@&quot;IMG_6083&quot;];</div><div class="line">imageView.image = image;</div><div class="line">imageView.layer.cornerRadius = CGRectGetWidth(imageView.frame)/ 4.0;</div><div class="line">imageView.layer.masksToBounds = YES;</div></pre></td></tr></table></figure>
<p>正确做法：<br>通过Core Graphics创建一块位图画布，将图片切成需要的形状</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (id)createRoundedRectImage:(UIImage *)image size:(CGSize)size radius:(int)radius &#123;</div><div class="line">    size = CGSizeMake(size.width * image.scale, size.height * image.scale);</div><div class="line">    radius = radius * image.scale;</div><div class="line">    UIImage *img = image;</div><div class="line">    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();</div><div class="line">    CGContextRef context = CGBitmapContextCreate(NULL, size.width, size.height, CGImageGetBitsPerComponent(image.CGImage), 4 * size.width, CGImageGetColorSpace(image.CGImage), kCGImageAlphaPremultipliedFirst);</div><div class="line">    CGRect rect = CGRectMake(0, 0, size.width, size.height);</div><div class="line">    CGContextBeginPath(context);</div><div class="line">    addRoundedRectToPath(context, rect, radius, radius);</div><div class="line">    CGContextClosePath(context);</div><div class="line">    CGContextClip(context);</div><div class="line">    CGContextDrawImage(context, CGRectMake(0, 0, size.width, size.height), img.CGImage);</div><div class="line">    CGImageRef imageMasked = CGBitmapContextCreateImage(context);</div><div class="line">    img = [UIImage imageWithCGImage:imageMasked];</div><div class="line">    CGContextRelease(context);</div><div class="line">    CGColorSpaceRelease(colorSpace);</div><div class="line">    CGImageRelease(imageMasked);</div><div class="line">    return img;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="给UILabel设置圆角属性"><a href="#给UILabel设置圆角属性" class="headerlink" title="给UILabel设置圆角属性"></a>给UILabel设置圆角属性</h2><p><strong>不需要背景颜色时</strong><br>不需要设置label的backgroundColor，只设置borderWidth、borderColor的label，直接设置cornerRadius，不需要设置masksToBounds = YES，就可以实现圆角功能。</p>
<p><strong>需要背景色</strong><br>设置label.layer.backgroundColor</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">view.layer.cornerRadius = 20;</div><div class="line"> view.layer.backgroundColor = [UIColor purpleColor].CGColor;</div><div class="line"> view.layer.borderColor = [UIColor blackColor].CGColor;</div><div class="line"> view.layer.borderWidth = 0.5;</div></pre></td></tr></table></figure>
<p>cornerRadius属性：<br>它是影响layer显示的backgroundColor和border，对layer的contents不起作用。<br>如果UILabel设置backgroundColor，是为contents设置背景色，二不是设定layer的背景色，此时cornerRadius不能实现圆角效果。解决的方法是直接设置label.layer.backgroundColor。</p>
<p><strong>在Cell里，需要响应cell的高亮效果</strong></p>
<h2 id="给UIButton或UITextView等视图做圆角处理"><a href="#给UIButton或UITextView等视图做圆角处理" class="headerlink" title="给UIButton或UITextView等视图做圆角处理"></a>给UIButton或UITextView等视图做圆角处理</h2><p>视图里如果不需要呈现图片，可以直接在后台线程画一个带圆角的背景图片，做为子视图。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> UIImage *image = [UIImage rounedCornerImage:20 borderWidth:0.5 backgroundColor:[UIColor purpleColor] borderColor:[UIColor clearColor] size:CGSizeMake(CGRectGetWidth(view.frame), CGRectGetHeight(view.frame))];</div><div class="line">UIImageView *imageView = [[UIImageView alloc] initWithImage:image];</div><div class="line">[button insertSubview:imageView atIndex:0];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">+ (UIImage *)rounedCornerImage:(CGFloat)radius</div><div class="line">                   borderWidth:(CGFloat)borderWidth</div><div class="line">               backgroundColor:(UIColor *)backgroundColor</div><div class="line">                   borderColor:(UIColor *)borderColor</div><div class="line">                          size:(CGSize)size&#123;</div><div class="line">    CGSize sizeToFit = CGSizeMake(floor(size.width), floor(size.height));</div><div class="line">    CGFloat halfBorderWidth = (CGFloat)borderWidth / 2.0;</div><div class="line">    UIGraphicsBeginImageContextWithOptions(sizeToFit, false, [[UIScreen mainScreen] scale]);</div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    CGContextSetLineWidth(context, borderWidth);</div><div class="line">    CGContextSetStrokeColorWithColor(context, borderColor.CGColor);</div><div class="line">    CGContextSetFillColorWithColor(context, backgroundColor.CGColor);</div><div class="line">    </div><div class="line">    CGFloat width = sizeToFit.width, height = sizeToFit.height;</div><div class="line">    CGContextMoveToPoint(context, width - halfBorderWidth, radius + halfBorderWidth);  // 开始坐标右边开始</div><div class="line">    CGContextAddArcToPoint(context, width - halfBorderWidth, height - halfBorderWidth, width - radius - halfBorderWidth, height - halfBorderWidth, radius);  // 右下角角度</div><div class="line">    CGContextAddArcToPoint(context, halfBorderWidth, height - halfBorderWidth, halfBorderWidth, height - radius - halfBorderWidth, radius); // 左下角角度</div><div class="line">    CGContextAddArcToPoint(context, halfBorderWidth, halfBorderWidth, width - halfBorderWidth, halfBorderWidth, radius); // 左上角</div><div class="line">    CGContextAddArcToPoint(context, width - halfBorderWidth, halfBorderWidth, width - halfBorderWidth, radius + halfBorderWidth, radius); // 右上角</div><div class="line">       CGContextDrawPath(UIGraphicsGetCurrentContext(), kCGPathFillStroke);</div><div class="line">    UIImage *output = UIGraphicsGetImageFromCurrentImageContext();</div><div class="line">    UIGraphicsEndImageContext();</div><div class="line">    return output;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图片使用阴影的正确姿势&quot;&gt;&lt;a href=&quot;#图片使用阴影的正确姿势&quot; class=&quot;headerlink&quot; title=&quot;图片使用阴影的正确姿势&quot;&gt;&lt;/a&gt;图片使用阴影的正确姿势&lt;/h2&gt;&lt;p&gt;错误示范：会导致离屏渲染&lt;/p&gt;
&lt;p&gt;&lt;del&gt;imageView
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发性能最佳实践系列之——集合遍历</title>
    <link href="http://blackteachinese.com/2017/09/09/iOS_best_performance_collection_enumeration/"/>
    <id>http://blackteachinese.com/2017/09/09/iOS_best_performance_collection_enumeration/</id>
    <published>2017-09-09T13:39:27.000Z</published>
    <updated>2017-09-11T14:40:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h2><p>场景条件</p>
<ul>
<li>需要按顺序</li>
<li>同步执行</li>
</ul>
<p>使用建议：</p>
<ul>
<li>for..in （NSFastEnumeration）<br><del>* enumerateObjectsUsingBlock</del><br><del>* 经典for循环</del></li>
</ul>
<p>推荐原因：<br>在集合元素“1000000”量级上，for in效率比经典for循环要高50倍。集合内元素较少时，经典for循环效率比forin要高1倍。但for in代码可读性和安全性更高，综合考虑建议使用用for in.</p>
<h2 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h2><p>场景条件</p>
<ul>
<li>需要按顺序</li>
<li>同时需要key和value</li>
</ul>
<p>按顺序优先考虑下列方法<br><del>* enumerateKeysAndObjectsUsingBlock</del><br><del>* 经典for循环</del></p>
<p>推荐原因：<br>在集合元素”100“量级和“1000000”量级时，enumerateKeysAndObjectsUsingBlock的效率都比“经典for循环”要高，而且不会出现“off-by-one errors”错误。建议需要key、vlaue时使用enumerateKeysAndObjectsUsingBlock</p>
<h2 id="场景三"><a href="#场景三" class="headerlink" title="场景三"></a>场景三</h2><p>场景条件</p>
<ul>
<li>处理比较耗时</li>
<li>不需要按顺序</li>
</ul>
<p>按顺序优先考虑下列方法</p>
<ul>
<li>enumerateObjectsWithOptions （NSEnumerationConcurrent）<br><del>* dispatch_apply(Concurrent)</del></li>
</ul>
<p>推荐原因：<br>enumerateObjectsWithOptions和dispatch_apply(Concurrent)各种场景的效率都差不多，但是enumerateObjectsWithOptions可读性更强，特性也更多。建议使用enumerateObjectsWithOptions。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[array enumerateObjectsWithOptions:NSEnumerationConcurrent usingBlock:^(Sark *sark, NSUInteger idx, BOOL *stop) &#123;</div><div class="line">    [sark doSomethingSlow];</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<h2 id="场景四"><a href="#场景四" class="headerlink" title="场景四"></a>场景四</h2><p>场景条件</p>
<ul>
<li>倒序遍历</li>
</ul>
<p>按顺序优先考虑下列方法</p>
<ul>
<li>enumerateObjectsWithOptions:NSEnumerationReverse</li>
<li>reverseObjectEnumerator</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSArray *strings = @[@&quot;1&quot;, @&quot;2&quot;, @&quot;3&quot;];</div><div class="line">for (NSString *string in [strings reverseObjectEnumerator]) &#123;</div><div class="line">    NSLog(@&quot;%@&quot;, string);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[array enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(Sark *sark, NSUInteger idx, BOOL *stop) &#123;</div><div class="line">    [sark doSomething];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>推荐原因：<br>enumerateObjectsWithOptions和reverseObjectEnumerator在各量级的效率表现相似，两个方法均可使用</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.sunnyxx.com/2014/04/30/ios_iterator/" target="_blank" rel="external">iOS遍历方法实验数据</a></li>
<li><a href="http://nshipster.com/enumerators/" target="_blank" rel="external">Enumerators</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;场景一&quot;&gt;&lt;a href=&quot;#场景一&quot; class=&quot;headerlink&quot; title=&quot;场景一&quot;&gt;&lt;/a&gt;场景一&lt;/h2&gt;&lt;p&gt;场景条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要按顺序&lt;/li&gt;
&lt;li&gt;同步执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用建议：&lt;/p&gt;
&lt;ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS性能最佳实践之--保证页面流畅性的检查清单</title>
    <link href="http://blackteachinese.com/2017/09/05/iOS_best_performance_pageSlide/"/>
    <id>http://blackteachinese.com/2017/09/05/iOS_best_performance_pageSlide/</id>
    <published>2017-09-05T13:39:27.000Z</published>
    <updated>2017-09-20T16:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>避免滑动时加工数据</strong></p>
<p>网络接口回来的数据有时需要进行字符串拼接、时间格式转换等销毁CPU的操作。这种场景可以在后台线程进行数据加工，然后将加工后的数据存放到ViewModel。当列表滑动的时候，不需要在单独做计算。</p>
<p><strong>计算高度耗时较长时，将高度进行缓存</strong></p>
<p>建议使用”UITableView+FDTemplateLayoutCell“。</p>
<p><strong>使用Cell的复用机制</strong></p>
<p>此处不需要解释</p>
<p><strong>复用Cell内的子视图</strong></p>
<p>有些开发者确实是使用了cell的复用机制，但是每次复用时由于子视图有一些差异，会把Cell里子视图释放掉，再重新初始化需要的子视图。这种做法是非常消耗CPU的，子视图也要尽量复用。</p>
<p><strong>使用隐藏而不是移除</strong></p>
<p>移除一个子视图也是需要开销的。如果有一些子视图不需要显示，将其隐藏而不是移除。</p>
<p><strong>到后台线程销毁视图</strong></p>
<p>有大量视图需要销毁时，放到后台线程，减少主线程的资源消耗。</p>
<p><strong>图片尺寸不要大于需要显示的布局</strong></p>
<p><strong>到后台线程图片解码</strong></p>
<p>加载图片时，图片的解码需要消耗CPU的资源，而这部分是可以放到子线程处理的。（SDWebImage默认是在子线程解码的，除非你关了）</p>
<p><strong>到后台线程图片绘制</strong></p>
<p>CoreGraphic是线程安全的，使用CoreGraphic绘制图片可以在子线程做，绘制完再回主线程加载到要呈现的控件里</p>
<p><strong>减少透明视图的混合</strong></p>
<p>设置视图的opaque属性为True,减少视图的混合消耗GPU资源</p>
<p><strong>手动计算布局，并缓存</strong></p>
<p>特别复杂的Cell，Autolayout的布局消耗大量CPU资源。可以根据数据源手动计算frame并进行缓存，从而避免每次都重新计算布局。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;避免滑动时加工数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络接口回来的数据有时需要进行字符串拼接、时间格式转换等销毁CPU的操作。这种场景可以在后台线程进行数据加工，然后将加工后的数据存放到ViewModel。当列表滑动的时候，不需要在单独做计算。&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS性能最佳实践系列之--加快页面加载的检查清单</title>
    <link href="http://blackteachinese.com/2017/09/03/iOS_best_performance_pageLoad/"/>
    <id>http://blackteachinese.com/2017/09/03/iOS_best_performance_pageLoad/</id>
    <published>2017-09-03T13:39:27.000Z</published>
    <updated>2017-09-16T10:24:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果一个页面加载慢，会给用户带来最直接的伤害。下面整理了一些tips，来保证页面的加载速度。</p>
<p><strong>跳转事件触发后不要做阻塞操作</strong></p>
<p>过去review代码时发现过一个问题。某个按钮点击后需要跳转到另外一个页面，但这个页面需要一些权限才能访问。于是代码里点击事件触发后，发了一个网络请求去校验权限，校验成功后再跳转。从用户的角度看，相当于卡了一下再跳新的页面，体验很糟糕。<br>建议有两种做法：<br>1 提前做好权限校验<br>2 直接进入新页面后再做权限校验，没有权限显示无权限的背景图</p>
<p><strong>UIViewController的生命周期要避免阻塞</strong><br>UIViewController的生命周期方法都在主线程，不要因为做消耗资源的事情（除了初始化视图）导致主线程被阻塞。</p>
<p>有消耗资源的操作放到子线程里，需要做UI渲染再回到主线程</p>
<p>下面是检查清单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">init</div><div class="line">initWithNibName:bundle</div><div class="line">viewWillAppear</div><div class="line">viewDidAppear</div><div class="line">viewDidLoad</div><div class="line">viewWillDisappear</div><div class="line">viewDidDisappear</div><div class="line">...</div></pre></td></tr></table></figure>
<p><strong>如果接口请求慢，先加载缓存，再刷最新数据</strong></p>
<p>如果页面的网络请求很慢，会出现白屏转菊花很久的情况，改善的策略如下。<br>1 先加载缓存数据<br>2 同步请求网络数据，网络数据请求完成后和本地数据校对，得出需要变化的数据。<br>3 将新增的数据加载到页面里，并提示“有数据更新”（类似新浪微博）</p>
<p><strong>UITableView的DataSource的代理实现要避免阻塞</strong></p>
<p>UITableView的DataSource回调函数在主线程，要避免耗时计算。</p>
<p>下面是检查清单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tableView:cellForRowAtIndexPath</div><div class="line">tableView:heightForRowAtIndexPath</div><div class="line">...</div></pre></td></tr></table></figure>
<p><strong>减少UITableView高度计算次数</strong></p>
<ul>
<li>有多种Cell或高度是动态的<ul>
<li>设置estimatedRowHeight(设置后会开启self—sizing，自动计算高度)</li>
</ul>
</li>
<li>只有一种Cell并且高度固定<ul>
<li>设置rowHeight</li>
<li>不要重载”tableView:heightForRowAtIndexPath”</li>
</ul>
</li>
</ul>
<p><strong>UICollectionView的DataSource的代理实现要避免阻塞</strong></p>
<p>UICollectionView生命周期的回调函数在主线程，要避免耗时计算。<br>下面是检查清单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">collectionView:cellForItemAtIndexPath</div><div class="line">collectionView:layout:sizeForItemAtIndexPath</div><div class="line">collectionView:didSelectItemAtIndexPath</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果一个页面加载慢，会给用户带来最直接的伤害。下面整理了一些tips，来保证页面的加载速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳转事件触发后不要做阻塞操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;过去review代码时发现过一个问题。某个按钮点击后需要跳转到另外一个页面，但这个页面需
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>结构化思考——完美应对电梯30秒的思考模型</title>
    <link href="http://blackteachinese.com/2017/09/03/thought_structure_thinking/"/>
    <id>http://blackteachinese.com/2017/09/03/thought_structure_thinking/</id>
    <published>2017-09-03T13:39:27.000Z</published>
    <updated>2017-09-06T05:23:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么你的想法总是不能很好地表达？"><a href="#为什么你的想法总是不能很好地表达？" class="headerlink" title="为什么你的想法总是不能很好地表达？"></a>为什么你的想法总是不能很好地表达？</h1><p>如果你的工作内容是技术型的（程序员），你很可能对自己日常工作中的语言表达不太满意。你可能专业知识很丰满，对事情的看法也很独到，但就是讲不好。</p>
<p>你也许还不觉得这是个很大的问题，因为大家会给某种职业贴标签：“XXX就是不善于表达”。这样的说法你听多了，可能会真的接受这种观点，但事实并不是如此。</p>
<p>讲得不好主要有三个因素影响，思考能力、语言能力、心态。<br>思考能力决定你的表达内容的质量，思路是否清晰、重点是否突出、观点是否独到。<br>语言能力决定你的表达的内容形式是否丰富、有没有文采，有没有类比、举例帮组听众理解更深刻等。<br>心态决定你能不能正常发挥自己的水平。</p>
<p>也许你已经可以看出来，思考能力决定你表达的核心内容。因为在日常工作中，工作中的交流是趋于理性的，大家更看重的是你的思路和观点。</p>
<h1 id="为什么是结构力思考？"><a href="#为什么是结构力思考？" class="headerlink" title="为什么是结构力思考？"></a>为什么是结构力思考？</h1><p>在工作中我们遇到各种问题时，大脑会习惯性依据经验来思考。这样思考的结果，观点通常是散状的，类似现在微信文章的清单体。散状的观点，重点不突出，各个观点间没有清晰的逻辑联系。这样不能形成严密的逻辑关系，不利于让听众了解你表达的重点，观点之间有可能相互重复、甚至冲突。而在工作中，我们讨论解决方案时，最终是需要团队协作去执行的。这需要方案重点突出、逻辑严密，既能够统一思想又具有指导意义。</p>
<p>因此，我们需要结构化思考的意识。</p>
<h1 id="4个策略助你进行结构化思考"><a href="#4个策略助你进行结构化思考" class="headerlink" title="4个策略助你进行结构化思考"></a>4个策略助你进行结构化思考</h1><h2 id="结论先行"><a href="#结论先行" class="headerlink" title="结论先行"></a>结论先行</h2><p>将结论（核心观点／内容）作为树形结构的父节点。</p>
<h2 id="以下呼上"><a href="#以下呼上" class="headerlink" title="以下呼上"></a>以下呼上</h2><p>树形结构里，子节点要呼应／支持父节点的内容。</p>
<h2 id="合理归类"><a href="#合理归类" class="headerlink" title="合理归类"></a>合理归类</h2><p>通过合理地归纳分类，让一个复杂地问题逐步细化，成为可理解、可执行的观点／指南。</p>
<h2 id="逻辑递进"><a href="#逻辑递进" class="headerlink" title="逻辑递进"></a>逻辑递进</h2><p>如果能形成时间、重要程度、结构顺序，这几种逻辑顺序，能让人更容易理解和记忆。</p>
<p>先看一个清单体：“如何帮孩子缓解入园焦虑、快速融入幼儿园生活”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">1. 最开始上幼儿园时，大部分孩子会感到压力和不适应。作为家长，不要觉得孩子小题大做，而要认真对待。</div><div class="line">2. 提前在家帮孩子调整作息，尽量跟幼儿园保持一致。比如早晨7:30起床吃早饭、中午12点左右午睡。同步作息时间，能让孩子快速适应幼儿园的节奏。</div><div class="line">3. 不要在平时借幼儿园抱怨孩子。“还不会自己吃饭，上了幼儿园怎么办”……这只会增加孩子对它的恐惧。</div><div class="line">4. 提前带孩子熟悉幼儿园环境。试着坐坐小椅子，上个卫生间，在校园里散散步。熟悉了环境，孩子会更有安全感。</div><div class="line">5. 尽快让孩子和老师熟悉起来——和孩子一起与老师聊聊天、当孩子的面夸夸老师，都会增加他对老师的信任。如果有机会提前让孩子和老师接触，那就更好了。</div><div class="line">6. 让孩子挑选一件熟悉的物件陪他上学，比如一块手绢、一辆玩具车或一块午睡毯。一件熟悉的物品，能缓解孩子对陌生环境的不适。</div><div class="line">7. 不要用欺骗的方式把孩子骗到幼儿园，更不要偷偷溜走，鼓励孩子主动跟你说“再见”。</div><div class="line">8. 跟孩子约定时间时，要说他能理解的话。不要说“妈妈5点来接你”，孩子没有“5点”的概念，应该说“你在幼儿园乖乖吃完晚餐，妈妈就来接你”。且一定要说话算数，否则会失去孩子的信任。</div><div class="line">9. 让孩子练习表达自己的感受，鼓励他说出需求。不妨引导他多说说学校的事情。习惯于表达需求后，孩子更敢于向老师求助。</div><div class="line">10. 分离焦虑，很大程度上是父母的焦虑。你的情绪会传染给孩子，一定要控制好。孩子哭闹时，不要跟他一起难过；一旦约定分别，就安心上班，不要在边上偷看，被孩子看到反而会激起他刚平复的心情。</div><div class="line">11. 孩子哭诉时，告诉他幼儿园的好是没用的，要用“共情”的方式沟通——“宝宝，妈妈也想念你”。向孩子表达你和他有同样的感受，这样孩子才会觉得你和他是一个“阵营”的。</div><div class="line">12. 不要觉得孩子在幼儿园受了委屈，就在家里加倍补偿。那反而会让孩子觉得“家里这么舒服，还是不要去幼儿园了”。</div><div class="line">13. 最后，从入园第一天，你的态度就要一以贯之，不要昨天去了，今天孩子哭得厉害就不去了。相信幼儿园和老师，他们比你有经验。</div></pre></td></tr></table></figure>
<p>下面看看，如果使用结构化进行思考会怎么样。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fj6g5b0w07j31ee0us19w.jpg" alt=""></p>
<h2 id="合理选择结构化思考的表达层次"><a href="#合理选择结构化思考的表达层次" class="headerlink" title="合理选择结构化思考的表达层次"></a>合理选择结构化思考的表达层次</h2><p>在工作中我们以下有几种场景会发表观点：</p>
<p>临时汇报（电梯30秒）<br>只有一句话时间，就说第一层。</p>
<p>会议发言（1分钟）<br>说到第二层。</p>
<p>工作总结（3到5分钟）<br>讲到第三层。</p>
<p>主题分享／培训 （30分钟）<br>抓住一个故事／案例展开来，深入浅出地阐述</p>
<p>根据不同场景和时间限制，合理地把握表达的层次和深度，无论是电梯30秒、会议发表观点、主题分享、培训、还是述职答辩都能应对自如。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么你的想法总是不能很好地表达？&quot;&gt;&lt;a href=&quot;#为什么你的想法总是不能很好地表达？&quot; class=&quot;headerlink&quot; title=&quot;为什么你的想法总是不能很好地表达？&quot;&gt;&lt;/a&gt;为什么你的想法总是不能很好地表达？&lt;/h1&gt;&lt;p&gt;如果你的工作内容是技
    
    </summary>
    
      <category term="thought" scheme="http://blackteachinese.com/categories/thought/"/>
    
    
      <category term="thought" scheme="http://blackteachinese.com/tags/thought/"/>
    
  </entry>
  
</feed>
