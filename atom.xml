<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blacktea&#39;s Life</title>
  <subtitle>A programmer who love music and football</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blackteachinese.com/"/>
  <updated>2017-07-12T16:44:39.000Z</updated>
  <id>http://blackteachinese.com/</id>
  
  <author>
    <name>Blacktea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>arm64指令新手教程</title>
    <link href="http://blackteachinese.com/2017/07/12/arm64/"/>
    <id>http://blackteachinese.com/2017/07/12/arm64/</id>
    <published>2017-07-12T13:39:27.000Z</published>
    <updated>2017-07-12T16:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h2><p>堆栈严格来说应该叫做栈，栈(Stack)是限定仅在一端进行插入或删除操作的线性表。因此，对栈来说，可以进行插入或删除操作的一端端称为栈顶(top)，相应地，另一端称为栈底(bottom)。由于堆栈只允许在一端进行操作，因而按照后进先出（LIFO-Last In First Out）的原理运作。</p>
<h2 id="会变化的栈顶"><a href="#会变化的栈顶" class="headerlink" title="会变化的栈顶"></a>会变化的栈顶</h2><p>从栈顶的定义来看，栈顶的位置是可变的。空栈时，栈顶和栈底重合；满栈时，栈顶离栈底最远。ARM为堆栈提供了硬件支持，它使用一个专门的寄存器（堆栈指针）指向堆栈的栈顶。</p>
<h2 id="两种存储器堆栈"><a href="#两种存储器堆栈" class="headerlink" title="两种存储器堆栈"></a>两种存储器堆栈</h2><p>递增堆栈：向上生长：向高地址方向生长<br>递减堆栈：向下生长：向低地址方向生长</p>
<h2 id="ARM堆栈的生长方向"><a href="#ARM堆栈的生长方向" class="headerlink" title="ARM堆栈的生长方向"></a>ARM堆栈的生长方向</h2><p>虽然ARM处理器核对于两种生长方式的堆栈均支持，但ADS的C语言编译器仅支持一种方式，即从上往下长，并且必须是满递减堆栈。所以STMFD等指令用的最多。</p>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器是用来存储CPU在计算过程中临时数据的, arm64有32个通用寄存器(这里不对浮点数/向量寄存器等做说明):<br>x0-x31, 这些寄存器可以直接在汇编代码里面使用, 也是最经常被使用到的寄存器.<br>1.sp/x31,stack pointer, 栈寄存器, 指向栈底<br>2.pc(program counter):一个无法被直接访问特殊寄存器, 用来指向当前执行的代码的地址. 部分指令隐含了对pc寄存器的操作, 比如bl指令或者adr指令.<br>3.lr寄存器/x30(link register):用来存方法调用的返回地址.<br>4.fp寄存器/x29(frame pointer):指向frame的顶部.<br>如果看到一个寄存器以w打头, 如w0那么代表着取x0的后32bit. 如果x0==0, 那么w0==0.</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>b 跳转到地址（无返回）, 不会改变LR寄存器的值<br>bl 跳转到地址（有返回）, 会改变LR寄存器的值为返回地址<br>ldr/ldur 地址对应的内容加载到寄存器<br>str/stur 寄存器内容存储到内存地址<br>ldp/stp 取/存一对数据(2个)<br>cbz/cbnz 为零跳转到地址/不为零跳转到<br>add 加法运算<br>mov 寄存器之间内容移动<br>ldp/stp 从栈取/存数据<br>adrp, 用来定位数据段中的数据用, 因为aslr会导致代码及数据的地址随机化, 用adrp来根据pc做辅助定位</p>
<h2 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h2><p><code>main函数汇编解析</code></p>
<p><code>int main(int argc, char * argv[]) {
    @autoreleasepool {
        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
    }
}</code></p>
<p>这段代码编译结果如下</p>
<p><code>test`main:
    0x10006aaac &lt;+0&gt;:   stp    x29, x30, [sp, #-16]!
    0x10006aab0 &lt;+4&gt;:   mov    x29, sp
    0x10006aab4 &lt;+8&gt;:   sub    sp, sp, #48               ; =48 
    0x10006aab8 &lt;+12&gt;:  stur   wzr, [x29, #-4]
    0x10006aabc &lt;+16&gt;:  stur   w0, [x29, #-8]
    0x10006aac0 &lt;+20&gt;:  stur   x1, [x29, #-16]
    0x10006aac4 &lt;+24&gt;:  bl     0x10006ab74               ; symbol stub for: objc_autoreleasePoolPush
    0x10006aac8 &lt;+28&gt;:  adrp   x1, 2
    0x10006aacc &lt;+32&gt;:  add    x1, x1, #3304             ; =3304 
    0x10006aad0 &lt;+36&gt;:  adrp   x30, 2
    0x10006aad4 &lt;+40&gt;:  add    x30, x30, #3320           ; =3320 
    0x10006aad8 &lt;+44&gt;:  ldur   w8, [x29, #-8]
    0x10006aadc &lt;+48&gt;:  ldur   x9, [x29, #-16]
    0x10006aae0 &lt;+52&gt;:  ldr    x30, [x30]
    0x10006aae4 &lt;+56&gt;:  ldr    x1, [x1]
    0x10006aae8 &lt;+60&gt;:  str    x0, [sp, #24]
    0x10006aaec &lt;+64&gt;:  mov    x0, x30
    0x10006aaf0 &lt;+68&gt;:  str    w8, [sp, #20]
    0x10006aaf4 &lt;+72&gt;:  str    x9, [sp, #8]
    0x10006aaf8 &lt;+76&gt;:  bl     0x10006ab80               ; symbol stub for: objc_msgSend
    0x10006aafc &lt;+80&gt;:  bl     0x10006ab5c               ; symbol stub for: NSStringFromClass
    0x10006ab00 &lt;+84&gt;:  mov    x29, x29
    0x10006ab04 &lt;+88&gt;:  bl     0x10006aba4               ; symbol stub for: objc_retainAutoreleasedReturnValue
    0x10006ab08 &lt;+92&gt;:  movz   x9, #0
    0x10006ab0c &lt;+96&gt;:  ldr    w8, [sp, #20]
    0x10006ab10 &lt;+100&gt;: str    x0, [sp]
    0x10006ab14 &lt;+104&gt;: mov    x0, x8
    0x10006ab18 &lt;+108&gt;: ldr    x1, [sp, #8]
    0x10006ab1c &lt;+112&gt;: mov    x2, x9
    0x10006ab20 &lt;+116&gt;: ldr    x3, [sp]
    0x10006ab24 &lt;+120&gt;: bl     0x10006abf8               ; symbol stub for: UIApplicationMain
    0x10006ab28 &lt;+124&gt;: stur   w0, [x29, #-4]
    0x10006ab2c &lt;+128&gt;: ldr    x1, [sp]
    0x10006ab30 &lt;+132&gt;: mov    x0, x1
    0x10006ab34 &lt;+136&gt;: bl     0x10006ab98               ; symbol stub for: objc_release
    0x10006ab38 &lt;+140&gt;: ldr    x0, [sp, #24]
    0x10006ab3c &lt;+144&gt;: bl     0x10006ab68               ; symbol stub for: objc_autoreleasePoolPop
    0x10006ab40 &lt;+148&gt;: ldur   w0, [x29, #-4]
    0x10006ab44 &lt;+152&gt;: mov    sp, x29
    0x10006ab48 &lt;+156&gt;: ldp    x29, x30, [sp], #16
    0x10006ab4c &lt;+160&gt;: ret</code></p>
<h2 id="sp的正负偏移"><a href="#sp的正负偏移" class="headerlink" title="sp的正负偏移"></a>sp的正负偏移</h2><p>sp存取的时候有的偏移量是正数, 有的是负数, 这有什么区别呢?<br>在stack里面, sp指针之下(负数偏移量)的数据是不保证安全的, 可能被覆盖, 而sp指针之上(正数偏移量)的数据是安全的. 放到负数偏移量一般都是临时存一下数据, 需要被整个方法用到的数据一般放到sp的正数偏移位置.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是栈？&quot;&gt;&lt;a href=&quot;#什么是栈？&quot; class=&quot;headerlink&quot; title=&quot;什么是栈？&quot;&gt;&lt;/a&gt;什么是栈？&lt;/h2&gt;&lt;p&gt;堆栈严格来说应该叫做栈，栈(Stack)是限定仅在一端进行插入或删除操作的线性表。因此，对栈来说，可以进行插入或删除
    
    </summary>
    
      <category term="default" scheme="http://blackteachinese.com/categories/default/"/>
    
    
      <category term="default" scheme="http://blackteachinese.com/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>成为值得被爱的人</title>
    <link href="http://blackteachinese.com/2017/07/10/thought-to-be-lovely-man/"/>
    <id>http://blackteachinese.com/2017/07/10/thought-to-be-lovely-man/</id>
    <published>2017-07-10T14:01:06.000Z</published>
    <updated>2017-07-10T14:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>人不但天生希望被爱，而且希望自己成为值得被爱的人。<br>我们天生都是自利的。也许有人不同意这个观点。是的，你会不求回报地对某个人好，这很棒。但是这也是自利的表现。<br>我们对家人好，可能是我们喜欢得到家人的温暖的感觉。我们不希望家人远离我们，于是我们对他们额外的好。因为，我们不是活在只有一个人的世界里。我们的自利，会驱动我们，希望被别人爱。<br>被一个人爱还不够，我们还希望被更多人爱、持续地被爱。因此，我们便需要称为值得被爱的人。<br>是的，这也许便是我们一生为之奋斗的目标。即便你是一个放荡不羁的自由主义者，当你看到美得无法用言语表达的巴塞罗那夜景，你也不可能只希望独自欣赏。你至少会希望，有一个和你一样的人、你爱的人，能够和你一起分享，你内心的喜悦。</p>
<p>我们如何成为一个值得被爱的人？<br>很多人一生在不断追求名利，希望通过名利的获取，让自己指得被爱。这确实是一种方法，但是这并不一定是最好的方法。因为如果你即便很有钱、很有名气，也不一定就特别值得被爱。你可以只是值得被拥有。<br>追求智慧和美德是更好的方法。<br>培养自己的美德，比如正义之气、比如仁慈的内心、比如不以物喜、不以己悲的价值观。<br>寻求改变世界的智慧。这并不是说要你做声么大事，恰恰是“不做大事的智慧”。我们要做的是，从我做起、从小事做起。见到别人做好事，就鼓掌，见到坏事就站出来说话，这样无数的你一起，就能通过“涌现”的办法，改变世界</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人不但天生希望被爱，而且希望自己成为值得被爱的人。&lt;br&gt;我们天生都是自利的。也许有人不同意这个观点。是的，你会不求回报地对某个人好，这很棒。但是这也是自利的表现。&lt;br&gt;我们对家人好，可能是我们喜欢得到家人的温暖的感觉。我们不希望家人远离我们，于是我们对他们额外的好。因为
    
    </summary>
    
      <category term="心灵" scheme="http://blackteachinese.com/categories/%E5%BF%83%E7%81%B5/"/>
    
    
      <category term="心灵" scheme="http://blackteachinese.com/tags/%E5%BF%83%E7%81%B5/"/>
    
  </entry>
  
  <entry>
    <title>基于webrtc的实时通信介绍</title>
    <link href="http://blackteachinese.com/2017/05/09/webrtc-flow-introduce/"/>
    <id>http://blackteachinese.com/2017/05/09/webrtc-flow-introduce/</id>
    <published>2017-05-09T07:32:17.000Z</published>
    <updated>2017-05-09T07:33:52.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="voip" scheme="http://blackteachinese.com/categories/voip/"/>
    
    
      <category term="voip" scheme="http://blackteachinese.com/tags/voip/"/>
    
  </entry>
  
  <entry>
    <title>编译原理入门</title>
    <link href="http://blackteachinese.com/2017/04/25/compile-principleintroduce/"/>
    <id>http://blackteachinese.com/2017/04/25/compile-principleintroduce/</id>
    <published>2017-04-25T06:12:53.000Z</published>
    <updated>2017-04-25T13:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译器结构"><a href="#编译器结构" class="headerlink" title="编译器结构"></a>编译器结构</h1><p>编译器由两个部分组成：分析 (analysis)部分和综合 (synthesis)部分。</p>
<ul>
<li>分析部分也称前端 (front end)，它把源程序分解成为多个组成要素，并在这些要素之上加上语法结构，然后使用这个结构来创建该源程序的一个中间表示。</li>
<li>分析部分还会收集有关源程序的信息，放在一个称为符号表 (symbol table)的数据结构中。符号表将和中间表示形式一起传送给综合部分。</li>
<li>综合部分也称后端 (back end)，根据中间表示和符号表中的信息来构造用户期待的目标程序。</li>
</ul>
<h1 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h1><ul>
<li>词法分析<ul>
<li>词法分析器读入组成源程序的字符流，将他们切分组织成有意义的词法单元 (token)的序列作为输出。</li>
</ul>
</li>
<li>语法分析<ul>
<li>语法分析器根据各个词法单元，创建树形中间表示，常用语法树 (syntax tree)。语法分析只判断源程序在结构上是否正确。</li>
</ul>
</li>
<li>语义分析<ul>
<li>使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致。语义分析是判断结构正确的源程序所表达的意义是否正确，其中一个重要部分是类型检查 (type checking)。</li>
</ul>
</li>
<li>中间代码生成<ul>
<li>编译器根据语法树和符号表，生成一个明确的低级的或类机器语言的中间表示 (intermediate representation)。三地址代码 (three-address code)是一种常见的中间表示形式。 </li>
</ul>
</li>
<li>代码优化（机器无关）<ul>
<li>机器无关的代码优化步骤试图改进中间代码，以便生成更好的目标代码。 </li>
</ul>
</li>
<li>代码生成器<ul>
<li>代码生成器以源程序的中间表示形式作为输入，并把它映射到目标语言。如果目标语言是机器代码，就必须为程序使用的每个变量选择寄存器或内存位置。然后，中间指令被翻译成为能够完成相同任务的机器指令序列 </li>
</ul>
</li>
<li>代码优化（机器相关）<ul>
<li>优化目标机器语言 </li>
</ul>
</li>
</ul>
<h2 id="查看编译步骤"><a href="#查看编译步骤" class="headerlink" title="查看编译步骤"></a>查看编译步骤</h2><p>创建文件 compileText.c</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line">  <span class="keyword">int</span> main (<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</div><div class="line">  printf(<span class="string">"Hello workd"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用clnag/llvm,输入下面命令查看编译步骤：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -ccc-print-phases compileTest.c</div></pre></td></tr></table></figure>
<p>输出得到编译步骤：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>: input, <span class="string">"compileTest.c"</span>, c</div><div class="line"><span class="number">1</span>: preprocessor, &#123;<span class="number">0</span>&#125;, cpp-output</div><div class="line"><span class="number">2</span>: compiler, &#123;<span class="number">1</span>&#125;, ir</div><div class="line"><span class="number">3</span>: backend, &#123;<span class="number">2</span>&#125;, assembler</div><div class="line"><span class="number">4</span>: assembler, &#123;<span class="number">3</span>&#125;, object</div><div class="line"><span class="number">5</span>: linker, &#123;<span class="number">4</span>&#125;, image</div><div class="line"><span class="number">6</span>: bind-arch, <span class="string">"x86_64"</span>, &#123;<span class="number">5</span>&#125;, image</div></pre></td></tr></table></figure></p>
<h1 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h1><p>符号表记录源程序中使用的变量的名字，并收集和每个名字的各种属性有关的信息。如一个名字的存储分配、类型、作用域、参数数量和类型、返回类型等。<br>符号表为每个变量名字创建一个记录条目。编译器可以向记录中快速存放和获取数据。</p>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p>创建文件 compileText.c</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line">  <span class="keyword">int</span> main (<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</div><div class="line">  printf(<span class="string">"Hello workd"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输入以下命令：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -fmodules -fsyntax-only -Xclang -dump-tokens compileTest.c</div></pre></td></tr></table></figure>
<p>输出token序列：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">annot_module_include '#include &lt;s'		Loc=&lt;compileTest.c:1:1&gt;</div><div class="line">int 'int'		Loc=&lt;compileTest.c:2:1&gt;</div><div class="line">identifier 'main'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:5&gt;</div><div class="line">l_paren '('	 [LeadingSpace]	Loc=&lt;compileTest.c:2:10&gt;</div><div class="line">int 'int'		Loc=&lt;compileTest.c:2:11&gt;</div><div class="line">identifier 'argc'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:15&gt;</div><div class="line">comma ','		Loc=&lt;compileTest.c:2:19&gt;</div><div class="line">char 'char'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:21&gt;</div><div class="line">star '*'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:26&gt;</div><div class="line">identifier 'argv'		Loc=&lt;compileTest.c:2:27&gt;</div><div class="line">l_square '['		Loc=&lt;compileTest.c:2:31&gt;</div><div class="line">r_square ']'		Loc=&lt;compileTest.c:2:32&gt;</div><div class="line">r_paren ')'		Loc=&lt;compileTest.c:2:33&gt;</div><div class="line">l_brace '&#123;'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:35&gt;</div><div class="line">identifier 'printf'	 [StartOfLine] [LeadingSpace]	Loc=&lt;compileTest.c:3:5&gt;</div><div class="line">l_paren '('		Loc=&lt;compileTest.c:3:11&gt;</div><div class="line">string_literal '"Hello workd"'		Loc=&lt;compileTest.c:3:12&gt;</div><div class="line">r_paren ')'		Loc=&lt;compileTest.c:3:25&gt;</div><div class="line">semi ';'		Loc=&lt;compileTest.c:3:26&gt;</div><div class="line">return 'return'	 [StartOfLine] [LeadingSpace]	Loc=&lt;compileTest.c:4:5&gt;</div><div class="line">numeric_constant '0'	 [LeadingSpace]	Loc=&lt;compileTest.c:4:12&gt;</div><div class="line">semi ';'		Loc=&lt;compileTest.c:4:13&gt;</div><div class="line">r_brace '&#125;'	 [StartOfLine]	Loc=&lt;compileTest.c:5:1&gt;</div><div class="line">eof ''		Loc=&lt;compileTest.c:5:2&gt;</div></pre></td></tr></table></figure>
<h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><p>输入以下命令：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -fmodules -fsyntax-only -Xclang -ast-dump compileTest.c</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">TranslationUnitDecl 0x7f8e4d81fad0 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt;</div><div class="line">|-TypedefDecl 0x7f8e4d820018 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __int128_t '__int128'</div><div class="line">| `-BuiltinType 0x7f8e4d81fd40 '__int128'</div><div class="line">|-TypedefDecl 0x7f8e4d820078 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __uint128_t 'unsigned __int128'</div><div class="line">| `-BuiltinType 0x7f8e4d81fd60 'unsigned __int128'</div><div class="line">|-TypedefDecl 0x7f8e4d820368 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __NSConstantString 'struct __NSConstantString_tag'</div><div class="line">| `-RecordType 0x7f8e4d820170 'struct __NSConstantString_tag'</div><div class="line">|   `-Record 0x7f8e4d8200c8 '__NSConstantString_tag'</div><div class="line">|-TypedefDecl 0x7f8e4d8203f8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_ms_va_list 'char *'</div><div class="line">| `-PointerType 0x7f8e4d8203c0 'char *'</div><div class="line">|   `-BuiltinType 0x7f8e4d81fb60 'char'</div><div class="line">|-TypedefDecl 0x7f8e4d8206d8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_va_list 'struct __va_list_tag [1]'</div><div class="line">| `-ConstantArrayType 0x7f8e4d820680 'struct __va_list_tag [1]' 1</div><div class="line">|   `-RecordType 0x7f8e4d8204f0 'struct __va_list_tag'</div><div class="line">|     `-Record 0x7f8e4d820448 '__va_list_tag'</div><div class="line">|-ImportDecl 0x7f8e4d98ada0 &lt;compileTest.c:1:1&gt; col:1 implicit Darwin.C.stdio</div><div class="line">|-FunctionDecl 0x7f8e4d98b040 &lt;line:2:1, line:5:1&gt; line:2:5 main 'int (int, char **)'</div><div class="line">| |-ParmVarDecl 0x7f8e4d98ade8 &lt;col:11, col:15&gt; col:15 argc 'int'</div><div class="line">| |-ParmVarDecl 0x7f8e4d98af00 &lt;col:21, col:32&gt; col:27 argv 'char **':'char **'</div><div class="line">| `-CompoundStmt 0x7f8e4d9e9ab0 &lt;col:35, line:5:1&gt;</div><div class="line">|   |-CallExpr 0x7f8e4d9e9a18 &lt;line:3:5, col:25&gt; 'int'</div><div class="line">|   | |-ImplicitCastExpr 0x7f8e4d9e9a00 &lt;col:5&gt; 'int (*)(const char *, ...)' &lt;FunctionToPointerDecay&gt;</div><div class="line">|   | | `-DeclRefExpr 0x7f8e4d98b538 &lt;col:5&gt; 'int (const char *, ...)' Function 0x7f8e4d98b158 'printf' 'int (const char *, ...)'</div><div class="line">|   | `-ImplicitCastExpr 0x7f8e4d9e9a60 &lt;col:12&gt; 'const char *' &lt;BitCast&gt;</div><div class="line">|   |   `-ImplicitCastExpr 0x7f8e4d9e9a48 &lt;col:12&gt; 'char *' &lt;ArrayToPointerDecay&gt;</div><div class="line">|   |     `-StringLiteral 0x7f8e4d98b598 &lt;col:12&gt; 'char [12]' lvalue "Hello workd"</div><div class="line">|   `-ReturnStmt 0x7f8e4d9e9a98 &lt;line:4:5, col:12&gt;</div><div class="line">|     `-IntegerLiteral 0x7f8e4d9e9a78 &lt;col:12&gt; 'int' 0</div><div class="line">`-&lt;undeserialized declarations&gt;</div></pre></td></tr></table></figure>
<h2 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h2><p>输入命令：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -S -emit-llvm compileTest.c -o compileTest.ll</div></pre></td></tr></table></figure>
<p>得到compileTest.ll文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">; ModuleID = 'compileTest.c'</div><div class="line">source_filename = "compileTest.c"</div><div class="line">target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"</div><div class="line">target triple = "x86_64-apple-macosx10.12.0"</div><div class="line"></div><div class="line">@.str = private unnamed_addr constant [12 x i8] c"Hello workd\00", align 1</div><div class="line"></div><div class="line">; Function Attrs: nounwind ssp uwtable</div><div class="line">define i32 @main(i32, i8**) #0 &#123;</div><div class="line">  %3 = alloca i32, align 4</div><div class="line">  %4 = alloca i32, align 4</div><div class="line">  %5 = alloca i8**, align 8</div><div class="line">  store i32 0, i32* %3, align 4</div><div class="line">  store i32 %0, i32* %4, align 4</div><div class="line">  store i8** %1, i8*** %5, align 8</div><div class="line">  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))</div><div class="line">  ret i32 0</div><div class="line">&#125;</div><div class="line"></div><div class="line">declare i32 @printf(i8*, ...) #1</div><div class="line"></div><div class="line">attributes #0 = &#123; nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" &#125;</div><div class="line">attributes #1 = &#123; "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" &#125;</div><div class="line"></div><div class="line">!llvm.module.flags = !&#123;!0&#125;</div><div class="line">!llvm.ident = !&#123;!1&#125;</div><div class="line"></div><div class="line">!0 = !&#123;i32 1, !"PIC Level", i32 2&#125;</div><div class="line">!1 = !&#123;!"Apple LLVM version 8.1.0 (clang-802.0.41)"&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="生成汇编"><a href="#生成汇编" class="headerlink" title="生成汇编"></a>生成汇编</h2><p>输入命令：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -S compileTest.c -o compileTest.s</div></pre></td></tr></table></figure>
<p>得到compileTest.s:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">	.section	__TEXT,__text,regular,pure_instructions</div><div class="line">	.macosx_version_min <span class="number">10</span>, <span class="number">12</span></div><div class="line">	.globl	_main</div><div class="line">	.p2align	<span class="number">4</span>, <span class="number">0x90</span></div><div class="line">_main:                                  <span class="meta">## @main</span></div><div class="line">	.cfi_startproc</div><div class="line">    <span class="meta">## BB#0:</span></div><div class="line">	pushq	%rbp</div><div class="line">Ltmp0:</div><div class="line">	.cfi_def_cfa_offset <span class="number">16</span></div><div class="line">Ltmp1:</div><div class="line">	.cfi_offset %rbp, <span class="number">-16</span></div><div class="line">	movq	%rsp, %rbp</div><div class="line">Ltmp2:</div><div class="line">	.cfi_def_cfa_register %rbp</div><div class="line">	subq	$<span class="number">32</span>, %rsp</div><div class="line">	leaq	L_.str(%rip), %rax</div><div class="line">	movl	$<span class="number">0</span>, <span class="number">-4</span>(%rbp)</div><div class="line">	movl	%edi, <span class="number">-8</span>(%rbp)</div><div class="line">	movq	%rsi, <span class="number">-16</span>(%rbp)</div><div class="line">	movq	%rax, %rdi</div><div class="line">	movb	$<span class="number">0</span>, %al</div><div class="line">	callq	_printf</div><div class="line">	xorl	%ecx, %ecx</div><div class="line">	movl	%eax, <span class="number">-20</span>(%rbp)         <span class="meta">## 4-byte Spill</span></div><div class="line">	movl	%ecx, %eax</div><div class="line">	addq	$<span class="number">32</span>, %rsp</div><div class="line">	popq	%rbp</div><div class="line">	retq</div><div class="line">	.cfi_endproc</div><div class="line"></div><div class="line">	.section	__TEXT,__cstring,cstring_literals</div><div class="line">L_.str:                                 <span class="meta">## @.str</span></div><div class="line">	.asciz	<span class="string">"Hello workd"</span></div><div class="line"></div><div class="line"></div><div class="line">.subsections_via_symbols</div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="生成目标文件"><a href="#生成目标文件" class="headerlink" title="生成目标文件"></a>生成目标文件</h2><p>输入命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -fmodules -c compileTest.c -o compileTest.o</div></pre></td></tr></table></figure>
<p>输出文件compileTest.o:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">cffa edfe <span class="number">0700</span> <span class="number">0001</span> <span class="number">0300</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span></div><div class="line"><span class="number">0400</span> <span class="number">0000</span> <span class="number">0002</span> <span class="number">0000</span> <span class="number">0020</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">1900</span> <span class="number">0000</span> <span class="number">8801</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line">a000 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2002</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line">a000 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0700</span> <span class="number">0000</span> <span class="number">0700</span> <span class="number">0000</span></div><div class="line"><span class="number">0400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">7465</span> <span class="number">7874</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">5445</span> <span class="number">5854</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">3400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2002</span> <span class="number">0000</span> <span class="number">0400</span> <span class="number">0000</span></div><div class="line">c002 <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">0004</span> <span class="number">0080</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">6373</span> <span class="number">7472</span> <span class="number">696</span>e</div><div class="line"><span class="number">6700</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">5445</span> <span class="number">5854</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">3400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0</span>c00 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5402</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">636f</span> <span class="number">6</span>d70 <span class="number">6163</span></div><div class="line"><span class="number">745f</span> <span class="number">756</span>e <span class="number">7769</span> <span class="number">6e64</span> <span class="number">5f</span>5f <span class="number">4</span>c44 <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">4000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">2000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">6002</span> <span class="number">0000</span> <span class="number">0300</span> <span class="number">0000</span></div><div class="line">d002 <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0002</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">6568</span> <span class="number">5f</span>66 <span class="number">7261</span></div><div class="line"><span class="number">6</span>d65 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">5445</span> <span class="number">5854</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">6000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">4000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">8002</span> <span class="number">0000</span> <span class="number">0300</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0b00</span> <span class="number">0068</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2400</span> <span class="number">0000</span> <span class="number">1000</span> <span class="number">0000</span></div><div class="line"><span class="number">000</span>c <span class="number">0</span>a00 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">1800</span> <span class="number">0000</span></div><div class="line">d802 <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> f802 <span class="number">0000</span> <span class="number">1000</span> <span class="number">0000</span></div><div class="line"><span class="number">0b00</span> <span class="number">0000</span> <span class="number">5000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">5548</span> <span class="number">89e5</span> <span class="number">4883</span> ec20 <span class="number">488</span>d <span class="number">0525</span> <span class="number">0000</span> <span class="number">00</span>c7</div><div class="line"><span class="number">45f</span>c <span class="number">0000</span> <span class="number">0000</span> <span class="number">897</span>d f848 <span class="number">8975</span> f048 <span class="number">89</span>c7</div><div class="line">b000 e800 <span class="number">0000</span> <span class="number">0031</span> c989 <span class="number">45</span>ec <span class="number">89</span>c8 <span class="number">4883</span></div><div class="line">c420 <span class="number">5</span>dc3 <span class="number">4865</span> <span class="number">6</span>c6c <span class="number">6f</span>20 <span class="number">776f</span> <span class="number">726b</span> <span class="number">6400</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">3400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">1400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">017</span>a <span class="number">5200</span> <span class="number">0178</span> <span class="number">1001</span></div><div class="line"><span class="number">100</span>c <span class="number">0708</span> <span class="number">9001</span> <span class="number">0000</span> <span class="number">2400</span> <span class="number">0000</span> <span class="number">1</span>c00 <span class="number">0000</span></div><div class="line"><span class="number">80f</span>f ffff ffff ffff <span class="number">3400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0041</span> <span class="number">0e10</span> <span class="number">8602</span> <span class="number">430</span>d <span class="number">0600</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">2300</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">002</span>d <span class="number">0b00</span> <span class="number">0000</span> <span class="number">0200</span> <span class="number">0015</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0006</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0f</span>01 <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0700</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">005f</span> <span class="number">6</span>d61 <span class="number">696</span>e <span class="number">005f</span></div><div class="line"><span class="number">7072</span> <span class="number">696</span>e <span class="number">7466</span> <span class="number">0000</span></div></pre></td></tr></table></figure>
<h2 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h2><p>输入命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang compileTest.o -o compileTest</div></pre></td></tr></table></figure>
<p>输出可执行文件compileTest,执行如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./compileTest</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输出</div><div class="line">Hello world</div></pre></td></tr></table></figure>
<h2 id="Example传送门"><a href="#Example传送门" class="headerlink" title="Example传送门"></a>Example传送门</h2><p><a href="https://github.com/blackteachinese/compile_principle_introduce/tree/master" target="_blank" rel="external">https://github.com/blackteachinese/compile_principle_introduce/tree/master</a></p>
<h1 id="编译器-compiler"><a href="#编译器-compiler" class="headerlink" title="编译器 (compiler)"></a>编译器 (compiler)</h1><p>编译器是一个程序，可以阅读以某一种语言(源语言)编写的程序，并把该程序翻译成为一个等价的、用另一种语言(目标语言)编写的程序。</p>
<h1 id="解释器-interpreter"><a href="#解释器-interpreter" class="headerlink" title="解释器 (interpreter)"></a>解释器 (interpreter)</h1><p>解释器不通过翻译的方式生成目标程序，直接利用用户提供的输入执行源程序中指定的操作。</p>
<h2 id="编译器和解析器的区别"><a href="#编译器和解析器的区别" class="headerlink" title="编译器和解析器的区别"></a>编译器和解析器的区别</h2><p>编译型语言在编译过程中生成目标平台的指令，解释型语言在运行过程中才生成目标平台的指令。<br>虚拟机的任务是在运行过程中将中间代码翻译成目标平台的指令。</p>
<h1 id="语言处理流程"><a href="#语言处理流程" class="headerlink" title="语言处理流程"></a>语言处理流程</h1><p>预处理器 (preprocessor)<br>编译器 (compiler)<br>汇编器 (assembler)<br>链接器 (linker)/加载器 (loader)</p>
<h1 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h1><ul>
<li>词法单元 (token)</li>
<li>抽象语法树 (AST - abstract syntax tree)</li>
<li>类型检查 (type checking)</li>
<li>三地址代码 (three-address code)</li>
<li>中间表示形式 (IR - intermediate representation)<ul>
<li>中间语言 (IL - intermediate language)</li>
<li>字节码 (bytecode)</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编译器结构&quot;&gt;&lt;a href=&quot;#编译器结构&quot; class=&quot;headerlink&quot; title=&quot;编译器结构&quot;&gt;&lt;/a&gt;编译器结构&lt;/h1&gt;&lt;p&gt;编译器由两个部分组成：分析 (analysis)部分和综合 (synthesis)部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="compile" scheme="http://blackteachinese.com/categories/compile/"/>
    
    
      <category term="compile" scheme="http://blackteachinese.com/tags/compile/"/>
    
  </entry>
  
  <entry>
    <title>WebRTC源码如何编译iOS使用的Framework</title>
    <link href="http://blackteachinese.com/2017/04/18/webrtc-compile-ios-framework/"/>
    <id>http://blackteachinese.com/2017/04/18/webrtc-compile-ios-framework/</id>
    <published>2017-04-18T15:21:09.000Z</published>
    <updated>2017-04-19T16:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webRTC简介"><a href="#webRTC简介" class="headerlink" title="webRTC简介"></a>webRTC简介</h2><h2 id="编译工具准备"><a href="#编译工具准备" class="headerlink" title="编译工具准备"></a>编译工具准备</h2><ul>
<li>depot_tools<ul>
<li>depot_tools是Chromium 和 Chromium OS管理代码拉取的脚本包。里面包含了gclient, gcl, git-cl, repo</li>
</ul>
</li>
<li>创建一个build工作目录<ul>
<li>/webrtc_build</li>
</ul>
</li>
<li>在webrtc_build目录下，使用git下载Chromium的depot_tools工具</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</div></pre></td></tr></table></figure>
<ul>
<li>添加depot_tools到你OS的环境变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=`<span class="built_in">pwd</span>`/depot_tools:<span class="string">"<span class="variable">$PATH</span>"</span></div></pre></td></tr></table></figure>
<h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><p>在webrtc_build目录下，使用命令行拉取webRTC的源码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fetch --nohooks webrtc_ios</div><div class="line">gclient sync</div></pre></td></tr></table></figure>
<p>得到源码：src/…</p>
<h2 id="开一个新的分支"><a href="#开一个新的分支" class="headerlink" title="开一个新的分支"></a>开一个新的分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git new-branch &lt;branch name&gt;</div></pre></td></tr></table></figure>
<h2 id="使用GN生成Ninja工程文件"><a href="#使用GN生成Ninja工程文件" class="headerlink" title="使用GN生成Ninja工程文件"></a>使用GN生成Ninja工程文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># debug build for 64-bit iOS</span></div><div class="line">gn gen out/ios_64 --args=<span class="string">'target_os="ios" target_cpu="arm64"'</span></div><div class="line"><span class="comment"># debug build for simulator</span></div><div class="line">gn gen out/ios_sim --args=<span class="string">'target_os="ios" target_cpu="x64"'</span></div></pre></td></tr></table></figure>
<h2 id="命令行编译Ninja工程"><a href="#命令行编译Ninja工程" class="headerlink" title="命令行编译Ninja工程"></a>命令行编译Ninja工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ninja -C out/ios_64 AppRTCMobile</div></pre></td></tr></table></figure>
<p>AppRTCMobile是其中一个Target,可以切换别的</p>
<h2 id="生成Xcode工程"><a href="#生成Xcode工程" class="headerlink" title="生成Xcode工程"></a>生成Xcode工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gn gen out/ios --args=&apos;target_os=&quot;ios&quot; target_cpu=&quot;arm64&quot;&apos; --ide=xcode</div><div class="line">open -a Xcode.app out/ios/all.xcworkspace</div></pre></td></tr></table></figure>
<h2 id="编译webRTC-framwork"><a href="#编译webRTC-framwork" class="headerlink" title="编译webRTC.framwork"></a>编译webRTC.framwork</h2><ul>
<li>查看编译选项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/tools-webrtc/ios/build_ios_libs.py --help</div></pre></td></tr></table></figure>
<ul>
<li>默认会编译出全部架构的 [‘arm64’, ‘arm’, ‘x64’, ‘x86’] 的 framework.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/tools-webrtc/ios/build_ios_libs.py</div></pre></td></tr></table></figure>
<ul>
<li>只编译ARM架构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/tools-webrtc/ios/build_ios_libs.py --arch &#123;&apos;arm64&apos;,&apos;arm&apos;&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1feses56wbmj31gs0j6q8t.jpg" alt=""></p>
<ul>
<li>xcode8.3的编译错误</li>
</ul>
<p>如果你的XCode版本是8.3，执行build_ios_libs.py会出现下面的错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: taking address of packed member &apos;time_entered&apos; of class or structure &apos;sctp_state_cookie&apos; may result in an unaligned pointer value [-Werror,-Waddress-of-packed-member]</div></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79gy1fesetelf94j31hg0twdq7.jpg" alt=""></p>
<p>原因是有两个文件有错需要改正：<br>third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_input.c<br>third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_output.c<br>具体改正点下面可以查看<br><a href="https://trac.webkit.org/changeset/211848/webkit/trunk/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_output.c" target="_blank" rel="external">sctp_input.c改正</a><br><a href="https://trac.webkit.org/changeset/211848/webkit/trunk/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_input.c" target="_blank" rel="external">sctp_output.c改正</a></p>
<ul>
<li><p>编译配置文件错误<br>你把编译好的WebRTC.framework放到Demo工程跃跃欲试，却可能发现编译不过。<br>日了🐶了。。。<br> “Could not build module ‘WebRTC’”<br> “‘WebRTC/RTCVideoCapturer.h’ file not found”<br><img src="http://ww3.sinaimg.cn/large/006tNc79gy1fesetv8i40j31jm0t8qhw.jpg" alt=""></p>
<p>太可怕了。。看来编译的脚本又有问题，欲哭无泪。。。<br>一通找终于找到生成WebRTC.framework头文件的脚本。<br><img src="http://ww3.sinaimg.cn/large/006tNc79gy1fesesq52cmj30tu18mgwa.jpg" alt=""></p>
<p>缺了下面几个头文件链接</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;objc/Framework/Headers/WebRTC/RTCCameraVideoCapturer.h&quot;,</div><div class="line">&quot;objc/Framework/Headers/WebRTC/RTCNSGLVideoView.h&quot;,</div><div class="line">&quot;objc/Framework/Headers/WebRTC/RTCVideoCapturer.h&quot;,</div></pre></td></tr></table></figure>
<p>修改BUILD.gn，再使用build_ios_libs.py编译，就可以得到完美的WebRTC.framework。</p>
<ul>
<li>把编译好的WebRTC.framework导入demo工程，编译demo工程,发现动态库找不到。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dyld: Library not loaded: @rpath/WebRTC.framework/WebRTC</div></pre></td></tr></table></figure>
<p>在Embedded Binaries +WebRTC.framework即可</p>
<p>最后附上修改后的文件BUILD.gn、sctp_input.c、sctp_output.c<br>以及编译成功后的webRTC.Framework(arm和All)</p>
<p><a href="https://github.com/blackteachinese/WebRTCCompileFix" target="_blank" rel="external">git地址：https://github.com/blackteachinese/WebRTCCompileFix</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webRTC简介&quot;&gt;&lt;a href=&quot;#webRTC简介&quot; class=&quot;headerlink&quot; title=&quot;webRTC简介&quot;&gt;&lt;/a&gt;webRTC简介&lt;/h2&gt;&lt;h2 id=&quot;编译工具准备&quot;&gt;&lt;a href=&quot;#编译工具准备&quot; class=&quot;headerli
    
    </summary>
    
      <category term="webrtc" scheme="http://blackteachinese.com/categories/webrtc/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
      <category term="compile" scheme="http://blackteachinese.com/tags/compile/"/>
    
      <category term="webrtc" scheme="http://blackteachinese.com/tags/webrtc/"/>
    
  </entry>
  
  <entry>
    <title>Mac上使用intelliJ开发WEbServer(Servlet)、mysql的新手教程</title>
    <link href="http://blackteachinese.com/2017/04/09/server-intelliJ-Servlet-and-mysql-mac-guide/"/>
    <id>http://blackteachinese.com/2017/04/09/server-intelliJ-Servlet-and-mysql-mac-guide/</id>
    <published>2017-04-09T09:03:57.000Z</published>
    <updated>2017-04-12T15:52:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Servlet是Java提供的用于开发Web服务器应用程序的一个组件，运行在服务器端，由Servlet容器所管理，用于生成动态的内容。Servlet是平台独立的Java类，编写一个Servlet，实际上就是按照Servlet规范编写一个Java类。</div></pre></td></tr></table></figure>
<h3 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSP是Servlet的一种特殊形式，每个JSP页面就是一个Servlet实例——JSP页面由系统编译成Servlet，Servlet再负责响应用户请求。JSP其实也是Servlet的一种简化，使用JSP时，其实还是使用Servlet，因为Web应用中的每个JSP页面都会由Servlet容器生成对应的Servlet。对于Tomcat而言，JSP页面生成的Servlet放在work路径对应的Web应用下。</div></pre></td></tr></table></figure>
<h2 id="IntelliJ开发WebServer"><a href="#IntelliJ开发WebServer" class="headerlink" title="IntelliJ开发WebServer"></a>IntelliJ开发WebServer</h2><h3 id="Demo源码github地址"><a href="#Demo源码github地址" class="headerlink" title="Demo源码github地址"></a>Demo源码github地址</h3><p><a href="https://github.com/blackteachinese/servletDemo" target="_blank" rel="external">https://github.com/blackteachinese/servletDemo</a></p>
<h3 id="搭建Webserver工程环境"><a href="#搭建Webserver工程环境" class="headerlink" title="搭建Webserver工程环境"></a>搭建Webserver工程环境</h3><ul>
<li>创建一个Maven Demo工程</li>
</ul>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fegnm20xl9j31k614g7ht.jpg" alt=""></p>
<ul>
<li>项目名称右键，选择”Add Framework Support”</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegol1jdxwj31kw0oggwi.jpg" alt=""></p>
<ul>
<li><p>添加Web Application<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegns27f26j315w0wodla.jpg" alt=""></p>
</li>
<li><p>添加完后可以看到WebServer的目录<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fegohsev6aj31kw0oen5p.jpg" alt=""></p>
</li>
<li><p>配置Artifact打包部署设置<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fekapz6ibvj31kw0zkat2.jpg" alt=""></p>
</li>
<li><p>配置Tomcat服务器<br><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fego68iog8j31kw0yf138.jpg" alt=""></p>
</li>
<li><p>Maven依赖配置<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fekbzxggzxj31kw0zke1q.jpg" alt=""></p>
</li>
</ul>
<h3 id="开发一个Get请求接口"><a href="#开发一个Get请求接口" class="headerlink" title="开发一个Get请求接口"></a>开发一个Get请求接口</h3><ul>
<li>创建一个formGetApi.html,做为表单承载页<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegpiusk8pj31kw0zkx0h.jpg" alt=""></li>
<li>在Index.jsp配置跳转到formGetApi.html页面<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegplchmg6j31kw0zkx00.jpg" alt=""></li>
<li>创建一个继承于HttpServlet的Java类GetApiTest<ul>
<li>你会发现HttpServlet找不到。不用急，选中“HttpServlet”按“option”+”enter”,点击添加Maven依赖,导入HttpServlet的依赖即可。<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegpzl7dutj31kw0zk4ig.jpg" alt=""><br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegq0dby9jj31kw0zk4qp.jpg" alt=""></li>
</ul>
</li>
<li>重载HttpServlet的“service”方法。通过“getParameter”和“getParameterValues”获取表单的字段，并将获取到的结果输出回浏览器。<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegq84bcd0j31kw0zktwj.jpg" alt=""></li>
<li><p>web.xml里配置api的映射</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"</div><div class="line">         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</div><div class="line">         version="3.1"&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;GetApiServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;GetApiTest&lt;/servlet-class&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;GetApiServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/getApi&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>启动Tomcat<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegqhun83wj31kw0zk1h9.jpg" alt=""></p>
<h3 id="开发一个Post请求接口"><a href="#开发一个Post请求接口" class="headerlink" title="开发一个Post请求接口"></a>开发一个Post请求接口</h3></li>
<li>创建一个formPostApi.html。唯一的不同是对”method”的设置。<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegreb6o2aj31kw0zktus.jpg" alt=""></li>
<li>创建一个继承于HttpServlet的Java类PostApiTest。<ul>
<li>post请求需要先对request、response对象设置CharacterEncoding<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span>  <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">// right to read chinese</span></div><div class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">        <span class="comment">// right to output chinese</span></div><div class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">        PrintWriter out = resp.getWriter();</div><div class="line">        <span class="comment">// get name value</span></div><div class="line">        String name = req.getParameter(<span class="string">"name"</span>);</div><div class="line">        out.println(<span class="string">"&lt;h1&gt;Hello,"</span>+name+<span class="string">"&lt;/h1&gt;"</span>);</div><div class="line">        <span class="comment">// get info value</span></div><div class="line">        String[] infos = req.getParameterValues(<span class="string">"info"</span>);</div><div class="line">        <span class="keyword">if</span> (infos != <span class="keyword">null</span>) &#123;</div><div class="line">            out.print(<span class="string">"&lt;h1&gt;info :&lt;/h1&gt;"</span>);</div><div class="line">            <span class="keyword">for</span> (String contact :infos) &#123;</div><div class="line">                out.print(<span class="string">"&lt;h1&gt;"</span>+contact+<span class="string">"&lt;/h1&gt;"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fegs5i2yuej31kw0zktw1.jpg" alt=""></li>
</ul>
</li>
</ul>
<h3 id="使用mysql储存提交的表单数据"><a href="#使用mysql储存提交的表单数据" class="headerlink" title="使用mysql储存提交的表单数据"></a>使用mysql储存提交的表单数据</h3><ul>
<li>创建一个formMysqlApi.html页面</li>
<li>web.xml映射配置</li>
<li>创建一个继承于HttpServlet的Java类MysqlApiTest。<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegxj3mr6gj31kw0zktxp.jpg" alt=""><h3 id="mql操作"><a href="#mql操作" class="headerlink" title="mql操作"></a>mql操作</h3></li>
</ul>
<h4 id="IntelliJ添加一个Datasource"><a href="#IntelliJ添加一个Datasource" class="headerlink" title="IntelliJ添加一个Datasource"></a>IntelliJ添加一个Datasource</h4><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegwssbwsij31kw0zkb1s.jpg" alt=""><br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegx5ivyf0j31kw0zkh6b.jpg" alt=""></p>
<h4 id="mysql命令行创建一个DataBase"><a href="#mysql命令行创建一个DataBase" class="headerlink" title="mysql命令行创建一个DataBase"></a>mysql命令行创建一个DataBase</h4><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fegx6wfmamj30ew0203yp.jpg" alt=""></p>
<h4 id="IntelliJ创建一个createDB-sql文件，创建userInfo表"><a href="#IntelliJ创建一个createDB-sql文件，创建userInfo表" class="headerlink" title="IntelliJ创建一个createDB.sql文件，创建userInfo表"></a>IntelliJ创建一个createDB.sql文件，创建userInfo表</h4><p><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegx9n7gb7j31kw0zkqlc.jpg" alt=""></p>
<h4 id="mysql命令行设置userInfo表character为UTF8"><a href="#mysql命令行设置userInfo表character为UTF8" class="headerlink" title="mysql命令行设置userInfo表character为UTF8"></a>mysql命令行设置userInfo表character为UTF8</h4><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegxbs3pw7j30ss084abd.jpg" alt=""></p>
<h4 id="IntelliJ创建一个insertDB-sql文件，插入一条数据"><a href="#IntelliJ创建一个insertDB-sql文件，插入一条数据" class="headerlink" title="IntelliJ创建一个insertDB.sql文件，插入一条数据"></a>IntelliJ创建一个insertDB.sql文件，插入一条数据</h4><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fegxd9h002j31kw0zk1a3.jpg" alt=""></p>
<h4 id="动态加载mysql驱动"><a href="#动态加载mysql驱动" class="headerlink" title="动态加载mysql驱动"></a>动态加载mysql驱动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div></pre></td></tr></table></figure>
<h4 id="JDBC连接MySQL"><a href="#JDBC连接MySQL" class="headerlink" title="JDBC连接MySQL"></a>JDBC连接MySQL</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/webserverDemo?user=root&amp;password=19880622"</span>);</div></pre></td></tr></table></figure>
<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><h3 id="IntelliJ环境搭建"><a href="#IntelliJ环境搭建" class="headerlink" title="IntelliJ环境搭建"></a>IntelliJ环境搭建</h3><h3 id="mysql环境搭建"><a href="#mysql环境搭建" class="headerlink" title="mysql环境搭建"></a>mysql环境搭建</h3><h3 id="常用mysql命令"><a href="#常用mysql命令" class="headerlink" title="常用mysql命令"></a>常用mysql命令</h3><ul>
<li>连接mysql:<ul>
<li>格式： mysql -h主机地址 -u用户名 －p用户密码</li>
<li>example:mysql -uroot -p</li>
</ul>
</li>
<li>退出MYSQL命令<ul>
<li>格式：exit （回车）</li>
</ul>
</li>
<li>创建数据库<ul>
<li>命令：create databas &lt;数据库名&gt;;</li>
</ul>
</li>
<li>显示数据库<ul>
<li>命令：show databases;</li>
</ul>
</li>
<li>连接数据库<ul>
<li>命令： use &lt;数据库名&gt;</li>
</ul>
</li>
<li>创建数据库表<ul>
<li>命令：create table &lt;表名&gt; ( &lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);</li>
</ul>
</li>
<li>删除表<ul>
<li>命令：drop table &lt;表名&gt;</li>
</ul>
</li>
<li>插入表数据 <ul>
<li>命令：insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]</li>
</ul>
</li>
<li>查看表中所有数据<ul>
<li>命令： select &lt;字段1，字段2，…&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;</li>
<li>example:select * from MyClass;</li>
</ul>
</li>
</ul>
<h3 id="MySQL的JDBC-URL格式"><a href="#MySQL的JDBC-URL格式" class="headerlink" title="MySQL的JDBC URL格式"></a>MySQL的JDBC URL格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc:mysql//[hostname][:port]/[dbname][?param1=value1][&amp;param2=value2]….</div></pre></td></tr></table></figure>
<p>Example：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc:mysql://localhost:3306/sample_db?user=root&amp;password=your_password</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h1&gt;&lt;h2 id=&quot;什么是Servlet&quot;&gt;&lt;a href=&quot;#什么是Servlet&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="server" scheme="http://blackteachinese.com/categories/server/"/>
    
    
      <category term="intelliJ" scheme="http://blackteachinese.com/tags/intelliJ/"/>
    
      <category term="Servlet" scheme="http://blackteachinese.com/tags/Servlet/"/>
    
      <category term="mysql" scheme="http://blackteachinese.com/tags/mysql/"/>
    
      <category term="Mac" scheme="http://blackteachinese.com/tags/Mac/"/>
    
      <category term="WEbServer" scheme="http://blackteachinese.com/tags/WEbServer/"/>
    
  </entry>
  
  <entry>
    <title>巴菲特的投资思维如何用于日常生活</title>
    <link href="http://blackteachinese.com/2017/04/04/financial-use-invest-sense/"/>
    <id>http://blackteachinese.com/2017/04/04/financial-use-invest-sense/</id>
    <published>2017-04-04T07:36:16.000Z</published>
    <updated>2017-04-04T09:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学会权衡风险与收益"><a href="#学会权衡风险与收益" class="headerlink" title="学会权衡风险与收益"></a>学会权衡风险与收益</h1><p>首先，我们做事情要有明确的目的，不同的目的要采用不同的方法。<br>大部分人在生活中很容易受别人影响。<br>看到朋友给他的孩子报了钢琴、英语、绘画等兴趣班，就想象自己的孩子会落后于别人，赶紧自己也给孩子报了相应的培训班。</p>
<p>危机意识敏锐是人类进化的优良习惯。在原始森林里，当你看到身边的人突然加速逃跑的时候，如果你非常理智思考一下，观察一下身边的情况，你很可能就野兽吃了。于是活下来的都拥有容易受他人影响的基因。但现代生活比原始森林复杂多了，光依靠过去的本能的反应已经远远不够了。我们应该明确好自己的目标，而不是别人给孩子报英语，我们就不加思索的也报英语。</p>
<p>那我们应该怎么做？每个孩子有着不一样的基因，各方面的能力不一样，兴趣爱好也不一样。譬如，你发现自己孩子对音乐特别敏感，听到音乐会跟着哼、身体跟着节奏舞动。那说明你的孩子对音乐、舞蹈比较敏锐，可以尝试往这个方向引导。于是这就成为你权衡给孩子哪些教育其中一个目标。即便是要给孩子报兴趣班，也要依据你积累下来的这些目标和方向。不盲目跟风。</p>
<h1 id="切莫好高骛远。"><a href="#切莫好高骛远。" class="headerlink" title="切莫好高骛远。"></a>切莫好高骛远。</h1><p>我们在制定目标时不能好高骛远。如果你好高骛远，那么你定的目标通常会没有可执行性。</p>
<p>比如你定下这样的目标，“我今年的理财投资回报率要达到30%”。有些人可能会觉得也并不是很难，牛市的时候几个涨停就够了。天了噜，巴菲特每年的投资回报率就12%左右。他养着一个全球最贵的投资团队，每天分析各行业趋势、各国政策的影响、企业的动态，最后收益也就平均12%。</p>
<p>我并非说没有任何人的投资的回报能高于巴菲特，只是非常少，可能低于5%。而且即便你某一年投资回报高于巴菲特并不代表你平均每年投资回报率能高于巴菲特，也就是说你的投资策略、投资能力并不优于巴菲特，只是刚好今年的投资运气特别好。这其实又说到另外一个主题，是关于自我认知能力，大部分人的自我认知能力都很差，这个且不说。</p>
<p>在生活中好高骛远会带来什么实际性的错误呢？就像上面的例子，如果你定的理财回报率是30%，那你就会关注到很多风险极高的投资产品。比如一些区块链的垃圾币包装的理财产品、期货产品。你也更容易被别人忽悠去买这些风险极高、甚至完全是骗局的传销型理财产品。如果你定的目标是30岁前实现财富自由，你可能就会忽视基础的积累，只去做那些看起来有可能的事情。比如买彩票、盲目创业、高风险投资。你买股票时可能会加5倍杠杆，不翻倍的投资你不会考虑。</p>
<h1 id="权衡回报和风险"><a href="#权衡回报和风险" class="headerlink" title="权衡回报和风险"></a>权衡回报和风险</h1><p>我们需要考虑的是回报和风险的比例，而不仅仅是回报本身。<br>是的，我们常常听别人说这个回报率是10%非常高，这个回报率是12%相当赞。但却很少有人说，这个理财产品往年的实际投资回报是多少。多大的百分比是亏损、多大的百分百是0%～5%之间。大家都对风险的分析做得不够，能大概知道A产品风险较低、B产品风险高一点就已经很不错了。更别提最后通过概率权的思想计算出实际的投资回报率（而不是发行方包装的回报率）。</p>
<p>在生活中我们同样要学会权衡回报和收益。比如：周六有个李开复的讲座要不要去听。</p>
<ul>
<li>先算一下要花的时间。 <ul>
<li>路上时间+讲座时间，共6个小时</li>
</ul>
</li>
<li>初步预计一下收益。<ul>
<li>认识几个行业朋友？听到李开复对人工智能的干货？感受一下气氛，激发一下自己的热情？</li>
</ul>
</li>
<li>替代方案／机会成本<ul>
<li>陪老婆孩子</li>
<li>看半本书</li>
<li>打场球锻炼一下</li>
<li>花两个小时看视频直播，省下4个小时干别的。</li>
</ul>
</li>
</ul>
<h1 id="切换有成本"><a href="#切换有成本" class="headerlink" title="切换有成本"></a>切换有成本</h1><p>最后，任何事情都有一个准入的成本，或者说切换的成本。大到换工作，小到换手机，换电脑，都是如此。到新单位前三个月乃至半年，要重新学习和适应，其实做不了太重要的事情，这就是准入成本。换一台电脑，很多旧的文件要导出来，要装新软件，这都是准入成本。考虑到准入成本，你就不应该切换工作太频繁，在一个公司待不到2年通常都是一件成本较高的事情。</p>
<p>PS：这些思想听起来是很简单道理，大家或多或少都听过这样的说法，但平时却很难做不到。这是由于我们长久以来形成的错误的思维习惯，你不下意识去纠正，即便听过N遍也很难真正吸收。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;学会权衡风险与收益&quot;&gt;&lt;a href=&quot;#学会权衡风险与收益&quot; class=&quot;headerlink&quot; title=&quot;学会权衡风险与收益&quot;&gt;&lt;/a&gt;学会权衡风险与收益&lt;/h1&gt;&lt;p&gt;首先，我们做事情要有明确的目的，不同的目的要采用不同的方法。&lt;br&gt;大部分人在生活中
    
    </summary>
    
      <category term="思维" scheme="http://blackteachinese.com/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="投资" scheme="http://blackteachinese.com/tags/%E6%8A%95%E8%B5%84/"/>
    
      <category term="思维" scheme="http://blackteachinese.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="理财" scheme="http://blackteachinese.com/tags/%E7%90%86%E8%B4%A2/"/>
    
      <category term="生活" scheme="http://blackteachinese.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>比尔盖茨的成功不靠天赋和努力</title>
    <link href="http://blackteachinese.com/2017/03/29/success_outliers/"/>
    <id>http://blackteachinese.com/2017/03/29/success_outliers/</id>
    <published>2017-03-29T13:37:07.000Z</published>
    <updated>2017-04-04T10:36:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-优势积累比天赋更重要"><a href="#一-优势积累比天赋更重要" class="headerlink" title="一 .优势积累比天赋更重要"></a>一 .优势积累比天赋更重要</h1><h2 id="机遇比天赋更重要"><a href="#机遇比天赋更重要" class="headerlink" title="机遇比天赋更重要"></a>机遇比天赋更重要</h2><p>加拿大著名球队老虎队的队员里25个球员，有17个球员的出生日期在1～3月。为什么有么明显的倾向性？加拿大冰球选拔机制是按年龄分组，5岁一组、6岁一组。同样是1990年出生，1月份出生的小孩和12月份出生的小孩分在一组。对于小孩来说差了10几个月，身体发育就差很多，年初出生的球员就占据很大的优势。所以年初出生的小孩一开始表现就会更好，表现更好就会被筛选到特训组，得到更好的训练。得到更好的训练，表现就更好，如此不断积累优势，最后年初出生的小孩称为顶级球员的机率就大大提升。</p>
<h2 id="知道一万小时理论也没用"><a href="#知道一万小时理论也没用" class="headerlink" title="知道一万小时理论也没用"></a>知道一万小时理论也没用</h2><p>不是每个人都有机会在合适的时机进行一万小时的训练。比如加拿大的冰球运动员，如果你小的时候进不了第一梯队，就没能进行优质的训练，很难达到一万小时。而且年龄大了再完成一万小时的训练也没有用了，因为运动员的身体条件高峰期是受年龄限制的。</p>
<h2 id="社会环境变革比努力重要得多"><a href="#社会环境变革比努力重要得多" class="headerlink" title="社会环境变革比努力重要得多"></a>社会环境变革比努力重要得多</h2><p>70后毕业参加工作买一套房子，相当于80后工作10年。最近毕业的清华大学学生，买不起北京房子不要太多。</p>
<h1 id="二-文化背景对成功影响很大"><a href="#二-文化背景对成功影响很大" class="headerlink" title="二.文化背景对成功影响很大"></a>二.文化背景对成功影响很大</h1><p>20世纪90年代韩国大航航空公司飞机失事率是同期美国联合航空的17倍，但究其原因竟然不是飞机设备、也不是管理问题。他们做了大量调研，听取飞机黑匣子录音，最终发现韩国文化是最根本的原因。因为韩国是一个等级分明的国家。在飞行过程中，机长做了一些错误的决策，副机长以及其他成员不敢说，没有了其他成员的有力监督，飞机失事率就变高了很多。</p>
<h1 id="我们该怎么做"><a href="#我们该怎么做" class="headerlink" title="我们该怎么做"></a>我们该怎么做</h1><h2 id="挤入第一梯队"><a href="#挤入第一梯队" class="headerlink" title="挤入第一梯队"></a>挤入第一梯队</h2><p>学习和工作时要想办法进入“第一梯队”，这样才能获得高质量的训练，加速积累达到一万小时的训练，从了增加优势积累的机会。</p>
<h2 id="如何获得社会变革红利"><a href="#如何获得社会变革红利" class="headerlink" title="如何获得社会变革红利"></a>如何获得社会变革红利</h2><p>花时间研究未来趋势，训练自己的预见能力，并且在未来趋势到来之前，开始一万小时的积累。比尔盖茨在大家还没用电脑前，就有了计算机编程的10万小时积累。<br>我们需要一点运气，找到风口并且在风口前已经做好了准备。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-优势积累比天赋更重要&quot;&gt;&lt;a href=&quot;#一-优势积累比天赋更重要&quot; class=&quot;headerlink&quot; title=&quot;一 .优势积累比天赋更重要&quot;&gt;&lt;/a&gt;一 .优势积累比天赋更重要&lt;/h1&gt;&lt;h2 id=&quot;机遇比天赋更重要&quot;&gt;&lt;a href=&quot;#机遇比
    
    </summary>
    
      <category term="思维" scheme="http://blackteachinese.com/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="成功" scheme="http://blackteachinese.com/tags/%E6%88%90%E5%8A%9F/"/>
    
      <category term="努力" scheme="http://blackteachinese.com/tags/%E5%8A%AA%E5%8A%9B/"/>
    
      <category term="天赋" scheme="http://blackteachinese.com/tags/%E5%A4%A9%E8%B5%8B/"/>
    
      <category term="比尔盖茨" scheme="http://blackteachinese.com/tags/%E6%AF%94%E5%B0%94%E7%9B%96%E8%8C%A8/"/>
    
      <category term="优势积累" scheme="http://blackteachinese.com/tags/%E4%BC%98%E5%8A%BF%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="逆袭" scheme="http://blackteachinese.com/tags/%E9%80%86%E8%A2%AD/"/>
    
      <category term="一万小时理论" scheme="http://blackteachinese.com/tags/%E4%B8%80%E4%B8%87%E5%B0%8F%E6%97%B6%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>内存泄漏监控</title>
    <link href="http://blackteachinese.com/2017/03/14/ios_memoryLeak_tool/"/>
    <id>http://blackteachinese.com/2017/03/14/ios_memoryLeak_tool/</id>
    <published>2017-03-14T02:18:21.000Z</published>
    <updated>2017-04-09T09:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要做app内存泄漏监控？"><a href="#为什么要做app内存泄漏监控？" class="headerlink" title="为什么要做app内存泄漏监控？"></a>为什么要做app内存泄漏监控？</h2><p>内存泄漏将导致app内存占用变大，成为iphone要kill App的时候优先考虑的对象.<br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fduvum23wsj31870j3jwx.jpg" alt=""></p>
<h2 id="监控内存泄漏的时机"><a href="#监控内存泄漏的时机" class="headerlink" title="监控内存泄漏的时机"></a>监控内存泄漏的时机</h2><ol>
<li>UIViewController调用”dismissViewControllerAnimated:”的时候</li>
<li>UInavigationController调用”popToRootViewControllerAnimated:”等pop方法</li>
<li>UITabbbarViewController、UIPageViewController、UISplitViewController+MemoryLeak需要释放时，对应的内嵌视图控制器也需要释放。<br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fduvtrj272j31080hgn00.jpg" alt=""></li>
</ol>
<h2 id="监控小技巧"><a href="#监控小技巧" class="headerlink" title="监控小技巧"></a>监控小技巧</h2><p>创建一个block,block持有需要释放的视图的weak指针，当监测时机到时，执行这个block，如果weak指针不为nil,则该试图已经内存泄漏了。<br><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fduvux09v8j313i0ngjtw.jpg" alt=""></p>
<h2 id="监控对象"><a href="#监控对象" class="headerlink" title="监控对象"></a>监控对象</h2><ol>
<li>所有需要释放的视图控制器</li>
<li>视图控制器的View,及其每一层嵌套的Subview</li>
</ol>
<h2 id="视图树的记录"><a href="#视图树的记录" class="headerlink" title="视图树的记录"></a>视图树的记录</h2><p>监测到内存泄漏后，为了方便开发定位到具体泄漏的视图，我们可以泄漏的视图树记录下来。</p>
<h2 id="泄漏后如何及时提醒"><a href="#泄漏后如何及时提醒" class="headerlink" title="泄漏后如何及时提醒"></a>泄漏后如何及时提醒</h2><p>泄漏后怎么提醒开发者比较合适呢。</p>
<ol>
<li>发现泄漏马上把泄漏的视图树log打印出来</li>
<li>悬浮一个提醒款，显示当前泄漏的数量</li>
<li>命中断言（会阻断开发，容易被喷）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要做app内存泄漏监控？&quot;&gt;&lt;a href=&quot;#为什么要做app内存泄漏监控？&quot; class=&quot;headerlink&quot; title=&quot;为什么要做app内存泄漏监控？&quot;&gt;&lt;/a&gt;为什么要做app内存泄漏监控？&lt;/h2&gt;&lt;p&gt;内存泄漏将导致app内存占用变大，成
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="内存泄漏" scheme="http://blackteachinese.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
      <category term="监控" scheme="http://blackteachinese.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="报警" scheme="http://blackteachinese.com/tags/%E6%8A%A5%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>iOS侧滑出现的卡死Bug</title>
    <link href="http://blackteachinese.com/2016/12/30/ios-ui-left-slip-bug/"/>
    <id>http://blackteachinese.com/2016/12/30/ios-ui-left-slip-bug/</id>
    <published>2016-12-30T10:30:07.000Z</published>
    <updated>2017-04-09T08:59:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道iOS7以后，系统UINavigationController自带侧滑返回上一级。它是通过navigationController中的interactivePopGestureRecognizer属性来控制。</p>
<p>某一天测试妹妹跑过来跟我说，我测出一个bug，进去某一个页面后回到RootViewController，左滑会导致视图堆栈变乱。我试了一下，果真如此。我想起以前曾经遇到一个bug，如果是自定义UINavigationController并且设置了自定义的leftBarButtonItem，那在UINavigationController的rootViewController上滑动返回时，会出现界面卡死的情况。</p>
<p>赶紧查了一下我们的自定义XXNavigationController,缺失设置了leftBarButtonItem。但是仔细查看了代码，我们其实是禁止了rootViewController左滑返回的事件。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer &#123;</div><div class="line">    <span class="keyword">if</span> (gestureRecognizer == <span class="keyword">self</span>.interactivePopGestureRecognizer) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.viewControllers.count &lt;= <span class="number">1</span> ||</div><div class="line">            <span class="keyword">self</span>.visibleViewController == [<span class="keyword">self</span>.viewControllers firstObject]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>天了噜！这应该没有问题的，什么情况。经过一番仔细查看，发现只有进入某个页面，左滑才会出这个问题。到底这个做了什么？终于被我发现一行要命的代码。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.delegate = <span class="literal">nil</span>;</div></pre></td></tr></table></figure>
<p>interactivePopGestureRecognizer的代理被设置成nil了。。。。<br>怎么处理好呢？</p>
<p>首先，创建一个类XXXDelegate专门处理侧滑手势的delegate事件。并实现上面“gestureRecognizerShouldBegin:gestureRecognizer”方法的处理。</p>
<p>接着，在XXTabbarController把每个NavgationController对应创建一个XXXDelegate。每次回到TabbarController任意一个子页面“viewDidAppear”的时候，把对应ChildViewController的NavgationController的interactivePopGestureRecognizer.delegate设置成对应的XXXDelegate;</p>
<p>结论，这样不论哪个页面把interactivePopGestureRecognizer的代理设置成nil，都能保证回到rootViewController，interactivePopGestureRecognizer.delegate都能设置成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道iOS7以后，系统UINavigationController自带侧滑返回上一级。它是通过navigationController中的interactivePopGestureRecognizer属性来控制。&lt;/p&gt;
&lt;p&gt;某一天测试妹妹跑过来跟我说，我测出一个b
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
      <category term="左滑bug" scheme="http://blackteachinese.com/tags/%E5%B7%A6%E6%BB%91bug/"/>
    
      <category term="interactivePopGestureRecognizer" scheme="http://blackteachinese.com/tags/interactivePopGestureRecognizer/"/>
    
      <category term="左滑卡死" scheme="http://blackteachinese.com/tags/%E5%B7%A6%E6%BB%91%E5%8D%A1%E6%AD%BB/"/>
    
  </entry>
  
  <entry>
    <title>NSURL编码问题</title>
    <link href="http://blackteachinese.com/2014/08/16/ios-url-encode/"/>
    <id>http://blackteachinese.com/2014/08/16/ios-url-encode/</id>
    <published>2014-08-16T08:33:37.000Z</published>
    <updated>2017-04-09T09:17:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用url生成NSURL时需要注意非法字符的问题。<br>举个例子：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *value = <span class="string">@"http://blackteachinese.com/2017/life/红茶!@#$%^&amp;*()"</span>;</div><div class="line"><span class="built_in">NSString</span> *urlString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"blacktea://yumi?key=%@"</span>, value];</div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:urlString];</div></pre></td></tr></table></figure></p>
<p>上面这个例子，当你使用url时你会发现url为nil。什么原因呢？是因为由于url支持26个英文字母、数字和少数几个特殊字符，因此，对于url中包含非标准url的字符时，就需要对其进行编码。于是你就需要使用CFURLCreateStringByAddingPercentEscapes进行URLEcodeing</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *value = <span class="string">@"http://blackteachinese.com/2017/life/红茶!@#$%^&amp;*()"</span>;</div><div class="line"><span class="built_in">NSString</span> *urlString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"blacktea://yumi?key=%@"</span>, value];</div><div class="line"> urlString =  (__bridge_transfer  <span class="built_in">NSString</span> *)<span class="built_in">CFURLCreateStringByAddingPercentEscapes</span>(kCFAllocatorDefault,</div><div class="line">                                                                                  (__bridge <span class="built_in">CFStringRef</span>)urlString,</div><div class="line">                                                                                  <span class="literal">NULL</span>,</div><div class="line">                                                                                  (__bridge <span class="built_in">CFStringRef</span>)<span class="string">@":/?&amp;=;+!@#$()',*"</span>,</div><div class="line">                                                                                  <span class="built_in">CFStringConvertNSStringEncodingToEncoding</span>(<span class="built_in">NSUTF8StringEncoding</span>));</div><div class="line"></div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:urlString];</div></pre></td></tr></table></figure>
<p>这样的话url就不空</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在使用url生成NSURL时需要注意非法字符的问题。&lt;br&gt;举个例子：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div 
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="NSURL编码" scheme="http://blackteachinese.com/tags/NSURL%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
</feed>
