<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blacktea&#39;s Life</title>
  <subtitle>A programmer who love music and football</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blackteachinese.com/"/>
  <updated>2017-08-29T09:48:17.000Z</updated>
  <id>http://blackteachinese.com/</id>
  
  <author>
    <name>Blacktea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里巴巴国际无线技术部 - 在这里遇见最好的自己</title>
    <link href="http://blackteachinese.com/2017/08/16/Invite_Job_aliabbamd/"/>
    <id>http://blackteachinese.com/2017/08/16/Invite_Job_aliabbamd/</id>
    <published>2017-08-16T14:33:49.000Z</published>
    <updated>2017-08-29T09:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我们做什么"><a href="#我们做什么" class="headerlink" title="我们做什么"></a>我们做什么</h1><p>阿里巴巴国际无线技术部背靠阿里巴巴集团和阿里巴巴国际站，阿里巴巴国际站是全球领先的跨境B2B贸易服务平台，服务全世界数以千万计的采购商和供应商，阿里巴巴国际站（www.alibaba.com）帮助中小企业拓展国际贸易的出口营销推广服务，专注服务于全球中小微企业，在平台上，通过向海外买家展示、推广供应商的企业和产品，进而获得贸易商机和订单，买卖双方可以在线更高效地找到适合的彼此，并更快更安心地达成交易，是出口企业拓展国际贸易的首选跨境贸易平台。</p>
<p>阿里巴巴国际站技术致力于打造一站式eWTP全球国际B类贸易服务平台解决方案，基于大数据在搜索、推荐、营销、流量、金融等场景中提供全方位一站式的服务，赋能卖家。</p>
<p>近年来，随着智能手机的普及无线的趋势已经锐不可当。阿里巴巴国际无线技术部不仅是站在阿里巴巴集团和阿里巴巴国际站两个巨人的肩上，更是站在无线时代的浪潮之上。来吧少年，一起为全球中小企业服务！</p>
<h1 id="我们在哪里"><a href="#我们在哪里" class="headerlink" title="我们在哪里"></a>我们在哪里</h1><p><em>杭州 - 一座来了就不想走的城市</em><br>杭州有“欲把西湖比西子，淡妆浓抹总相宜”的西湖，<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/175b41acb93011a4e220fbcf498603f0.png" alt=""><br>杭州有“钱塘岸上春如织，淼淼寒潮带晴色”的钱塘江（潮），<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/4781472e7fb735b122b5a47faf8c135a.png" alt=""><br>杭州有“最爱湖东行不足，绿杨阴里白沙堤”的白堤，<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/691676d5035cbdd8aa78e2514f7e4b26.png" alt=""><br>。。。。。。</p>
<p>从古至今无数的文人墨客为杭州驻足，给杭州添色。正所谓“你在杭州看风景,看风景的人在历史中看你”。古有一本《西湖梦寻》让无数人慕名杭州，今有一家“阿里巴巴”让追梦人逐梦杭州。来吧少年，“江南无所有，聊赠一聘书”。</p>
<h1 id="为什么是我们"><a href="#为什么是我们" class="headerlink" title="为什么是我们"></a>为什么是我们</h1><p>阿里巴巴早已经是一家庞大的集团公司，有大家熟知的淘宝、天猫等等。然而我却要说请记住它们，但请来阿里巴巴国际无线技术部：</p>
<h2 id="内部环境：国际化-集团三大战略之一"><a href="#内部环境：国际化-集团三大战略之一" class="headerlink" title="内部环境：国际化 - 集团三大战略之一"></a>内部环境：国际化 - 集团三大战略之一</h2><p>早在2015年阿里巴巴集团提出：农村化、国际化、大数据和云计算是阿里巴巴集团未来的三大战略，2016年马老师又创造性的提出了eWTP，2016年9月马老师在二十国集团工商峰会（B20）发表演讲，系统性的阐述eWTP的理念、愿景和行动计划。并且在一年中几乎飞遍全球，向各国政府、国际组织描述和倡议eWTP。<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/04a5d40cf5de4a9d7cb7e8b585cd92dc.png" alt=""><br>2017年6月阿里巴巴在美国底特律举办大规模的论坛，马老师做了“中国的贸易机会”的主题演讲，更是承诺未来的5年内在美国创造100万的工作机。<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/e6d2d85ca980dee8afe223cd3e10c71e.png" alt=""><br>无论是国际化、eWTP和中美贸易阿里巴巴国际无线技术部都是最重要的战场。</p>
<h2 id="外部环境：一带一路-国家级顶层战略"><a href="#外部环境：一带一路-国家级顶层战略" class="headerlink" title="外部环境：一带一路 - 国家级顶层战略"></a>外部环境：一带一路 - 国家级顶层战略</h2><p>2013年，中国首次超越美国跃居世界第一大贸易国。持续三年世界第一之后，世贸组织（WTO）的最新数据显示，2016年中国的进出口贸易额被美国反超，丧失了“世界第一外贸国家”的称号。</p>
<p>2015国家发展改革委、外交部、商务部联合发布了《推动共建丝绸之路经济带和21世纪海上丝绸之路的愿景与行动》，即是大家熟知的“一带一路”。它将充分依靠中国与有关国家既有的双多边机制，借助既有的、行之有效的区域合作平台，一带一路旨在借用古代丝绸之路的历史符号，高举和平发展的旗帜，积极发展与沿线国家的经济合作伙伴关系，共同打造政治互信、经济融合、文化包容的利益共同体、命运共同体和责任共同体。可以说“一带一路”和eWTP有异曲同工之秒。</p>
<p>2017年3月16号《中国新外贸模式研究报告》正式发布，重点分析了以阿里巴巴为代表的新外贸模式。结论是：新外贸模式极大降低了中国外贸的交易成本，同时交易平台提供的信息、数据和生态价值，会随时间增加为企业带来更大价值。阿里巴巴提倡的新外贸模式是外贸行业的新拐点。</p>
<p>无论是内部环境还是外部环境，作为阿里巴巴发家的阿里巴巴国际站正站在新的历史起点欲展翅翱翔，来吧少年，一起鹰击长空。</p>
<h1 id="我们的技术"><a href="#我们的技术" class="headerlink" title="我们的技术"></a>我们的技术</h1><p>在新技术上无论是Andriod还是iOS，我们积极跟进业内新技术，试验落地。比如：在iWatch产品发布之初便做了适配、遵循Andriod的MD规范、DeepLink、Firebase等；在国际化上自研多语言的实时更新引擎、RTL适配，做到覆盖全球所有主流语种、货币单位等。</p>
<p>阿里巴巴国际无线技术部出品的Alibaba.com Andriod APP 多次获得Google Play官方推荐，以2017年3月10日为例：我们获得Google Play 104个国家的主页和购物分类的黄金展位。这是我们不断追求卓越，不断提升用户体验，不断创新的结果。由于我们在技术上的精益求精，我们始终和Google保持着非常良好的合作关系。<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/8603c70eae9fb9f962fc0a0bda80f413.png" alt=""></p>
<p>更多的荣誉：<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/d8f8a426f79f3e77a425bf6a0a1c997d.png" alt=""></p>
<p>来吧少年，一起码出未来！</p>
<h1 id="我们的团队"><a href="#我们的团队" class="headerlink" title="我们的团队"></a>我们的团队</h1><p>阿里巴巴国际无线技术部现聚集40多名江湖三大名门正派（Andriod, iOS,JAVA）的顶级高手，由江湖人称“小马哥”的带头大哥领导，在这里每一个人都身怀绝技，一起来走进这些可爱的小伙伴吧：</p>
<h2 id="如果你是终生学习者，如果你对认知科学、商业本质感兴趣，来吧少年！"><a href="#如果你是终生学习者，如果你对认知科学、商业本质感兴趣，来吧少年！" class="headerlink" title="如果你是终生学习者，如果你对认知科学、商业本质感兴趣，来吧少年！"></a>如果你是终生学习者，如果你对认知科学、商业本质感兴趣，来吧少年！</h2><p>“小马哥”之所以称为“小马哥”，不仅仅因为他姓马，也不仅仅他的英文名叫“Jack”，更重要的是有马老师的风采。如果你常年关注“得到APP”，你一定对傅盛、刘润、罗胖、李笑来等等如数家珍，那么来吧少年，在这里近距离感受“小马哥”价值2W的《认知升级》。在这里每一天都是成长！</p>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/b537531d13ce08f1463bce9e97ac0acc.png" alt=""></p>
<h2 id="如果你是IOS的开发者，又常见混迹开源社区，来吧少年！"><a href="#如果你是IOS的开发者，又常见混迹开源社区，来吧少年！" class="headerlink" title="如果你是IOS的开发者，又常见混迹开源社区，来吧少年！"></a>如果你是IOS的开发者，又常见混迹开源社区，来吧少年！</h2><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/60ea9f6cad94a3e0ac2e1bb121e8bc86.png" alt=""></p>
<h2 id="如果你怀有一颗不安分的心，来吧少年！"><a href="#如果你怀有一颗不安分的心，来吧少年！" class="headerlink" title="如果你怀有一颗不安分的心，来吧少年！"></a>如果你怀有一颗不安分的心，来吧少年！</h2><p>我们一起去探索这个世界：<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/6b33d913bad296d6a9284c25cbd25f57.png" alt=""></p>
<h2 id="如果你精通八大菜系，来吧少年！"><a href="#如果你精通八大菜系，来吧少年！" class="headerlink" title="如果你精通八大菜系，来吧少年！"></a>如果你精通八大菜系，来吧少年！</h2><p>我们一起去吃遍全球：<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/5858ddc3d4ec7baac08fc659ca1fb739.png" alt=""></p>
<p>如果以上这些都还不够打动你，那么下面一张一定可以<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/e49449564295d68aa2dbe212193b7cf6.png" alt=""></p>
<h1 id="不要压抑你的天性了！打开邮箱把你的iOS-Android简历发到blackteachinese-gmail-com吧！"><a href="#不要压抑你的天性了！打开邮箱把你的iOS-Android简历发到blackteachinese-gmail-com吧！" class="headerlink" title="不要压抑你的天性了！打开邮箱把你的iOS/Android简历发到blackteachinese@gmail.com吧！"></a>不要压抑你的天性了！打开邮箱把你的iOS/Android简历发到blackteachinese@gmail.com吧！</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我们做什么&quot;&gt;&lt;a href=&quot;#我们做什么&quot; class=&quot;headerlink&quot; title=&quot;我们做什么&quot;&gt;&lt;/a&gt;我们做什么&lt;/h1&gt;&lt;p&gt;阿里巴巴国际无线技术部背靠阿里巴巴集团和阿里巴巴国际站，阿里巴巴国际站是全球领先的跨境B2B贸易服务平台，服务全世界
    
    </summary>
    
      <category term="Invite" scheme="http://blackteachinese.com/categories/Invite/"/>
    
    
      <category term="Invite" scheme="http://blackteachinese.com/tags/Invite/"/>
    
  </entry>
  
  <entry>
    <title>《未来简史》————虚构比真实更重要</title>
    <link href="http://blackteachinese.com/2017/08/16/history-make-believe/"/>
    <id>http://blackteachinese.com/2017/08/16/history-make-believe/</id>
    <published>2017-08-16T14:33:49.000Z</published>
    <updated>2017-08-18T00:49:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>赫拉利提出了一个了解历史的理由。了解历史可以让我们了解历史给我带上的枷锁，让我们不再被历史的枷锁困住。</p>
<p>美国中产阶级们喜欢在自己家的小别墅前养一片绿油油、整齐的草坪。他们还会买除草机等各种设备，并且定期去修剪、浇灌、维护这块草坪。事实上这很浪费时间，也没有太多实际的价值，但为什么他们还要维持这样的习惯呢？</p>
<p>在中世纪欧洲，维护这样的草坪是很费人力、物力的，那个时候没有先进的设备，只有贵族家才能养得起，这是尊贵的表现。现在只要愿意花时间，中产阶级们都能养得起。那么这恰恰就失去了养殖草坪的尊贵性。就好像LV、Gucci等奢侈品如果大家都买得起，就失去了显示身份的价值。而了解了这段历史，我们可以知道自己为什么会有维护草坪这种自己都无法解释的习惯。不用再为这段偶然产生的历史习惯，而买单。</p>
<p>人和自然是我们常常思考的问题。人真的是第一可宝贵的吗？</p>
<p>回顾历史，在采集狩猎时代，人类相信万物有灵，相信泛灵论。人类每天需要猜测动物的想法、避免被动物偷袭、还要想办法捕获动物。采集狩猎时代人类只是大自然食物链上普通的一环，没有太大的优势。</p>
<p>农业社会，人驯养了很多动物，动物成了人类的私有物品。人对动物可以为所欲为，不再需要考虑对方的感受，人和动物不再平等。这时候泛灵论就不满足时代的需要了，于是诞生了各种有神论。基督教宣布，上帝给人类永久的灵魂，而其他动物是没有灵魂的。人类成为第二可宝贵的。</p>
<p>现代社会，进化论逐渐被社会认可，基督教那套灵魂的说法就站不住脚了。那人又如何比别的动物更宝贵呢？有人给出了答案，人有意识。这个理由还是很有市场的，它很难被证伪。科学家人认为人根本不需要意识。旧的记忆和新的外部刺激，对大脑来说都是电信号和化学反应。我们看到危险信号靠近后，视觉信号传递给大脑，大脑把神经信号传递给腿，腿受到命令就可以开始跑了。恐惧、害怕、惊慌等主观体验根本没有什么用。而且，现在科学家已经有足够证据证明哺乳动物和鸟类、鱼类都是有感情的。讨论意识不能说明人比动物宝贵。</p>
<p>那人到底为什么可宝贵呢？<br>因为，突然有一天，人类基因突变，成为一个会幻想、懂虚构的年轻人。<br>人能虚构东西，并且能相信虚构的东西。虚构出来各种新的概念，上帝、国家、金钱、公司、价值观，能让人群实现大规模、跨越时间和空间的合作。</p>
<p>国家也是虚构的，没有哪片土地天生属于某个国家。过去有一个国家，几千年来都维系着的文化和传统。突然有一天，在这个国家的土地上发生了一场战争。战争打完，这个国家被拆成了两片区域。这两片区域分别被植入了不同的想象共同体。最后出现了2个互相仇视的国家。</p>
<p>这是现在我们认为人类为什么比别的动物更可贵的原因。这些虚构的概念甚至比真实存在的都显得重要。比如宗教的出现维系着大尺度的社会秩序。</p>
<p>宗教是什么？<br>赫拉利总结了宗教的3个特点。<br>1 它有一套号称不是人发明的，而且不能被人改变的道德规范，要求人们必须遵守。<br>2 它给人们一个许诺，只要你遵从这套法规，就会有什么好处。<br>3 它的目的是为了巩固自己设想的社会秩序</p>
<p>我想起我一个大学同学，一个信仰基督教的女生。她是一个善良、乐于助人，有所为有所不为。她相信以她的标准区为人处事，一定会收获幸福。她有一个特点，内心没有恐惧。她不惧怕现在、不惧怕未来，不惧怕自己的出生低微，不惧怕别人有更好的机会，不惧怕天灾、不惧怕人祸。</p>
<p>这样的人，我们认为是有强大内心的。这也是基督教、佛教等主流宗教给社会带来的正面意义。每个宗教都有自己一套道德体系，只要这套道德体系无限趋近于社会共同的认知，那么我们可以只要大家去遵守，社会会变得更和谐。即便它给于教民的许诺是没有能力实现的。</p>
<p>这么说来，各种主义、有价值观和远景的公司文化，其实也符合宗教的特点。这也是为什么管理学会认为，最高级的管理是价值观、理念的管理。大家都遵守同样的规定、并且愿意相信未来的收获和意义，管理起来成本是相当的低啊。所有人一颗心、指哪打哪，不论战略和战术如何调整和部署，都能朝同一个方向去发力，效果肯定是杠杠的6啊。</p>
<p>看到这里，你估计也已经认为虚构的影响力确实很6，那你有没有想过你可以怎么使用虚构的思维呢？<br>虚构影响力可以这么大，是因为我们可以赋予虚构概念价值和意义，从而聚集更多的人。<br>我们做一个产品，要思考这个产品是否有改变世界的意义。做某一个项目，也需要思考它是否有影响深远的价值。<br>有新的想法，要尝试给想法定义一个新的概念。虚构的新概念，至少是需要经过思考和抽象的过程。大家对新概念的好奇，也能引发思考和传播。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;赫拉利提出了一个了解历史的理由。了解历史可以让我们了解历史给我带上的枷锁，让我们不再被历史的枷锁困住。&lt;/p&gt;
&lt;p&gt;美国中产阶级们喜欢在自己家的小别墅前养一片绿油油、整齐的草坪。他们还会买除草机等各种设备，并且定期去修剪、浇灌、维护这块草坪。事实上这很浪费时间，也没有太多
    
    </summary>
    
      <category term="history" scheme="http://blackteachinese.com/categories/history/"/>
    
    
      <category term="history" scheme="http://blackteachinese.com/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>TodayExtension入坑指南</title>
    <link href="http://blackteachinese.com/2017/08/14/ios-widget/"/>
    <id>http://blackteachinese.com/2017/08/14/ios-widget/</id>
    <published>2017-08-14T07:59:52.000Z</published>
    <updated>2017-08-14T08:01:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加Today-Extension"><a href="#添加Today-Extension" class="headerlink" title="添加Today Extension"></a>添加Today Extension</h3><p>File &gt; New &gt; Target &gt; Application Extension &gt; Today Extension</p>
<p><img src="http://img4.tbcdn.cn/L1/461/1/04aebe034c437aa65f8da769235e07c79d37fc94" alt="_2016_08_18_12_01_36"></p>
<h3 id="Widget和主程序共享数据"><a href="#Widget和主程序共享数据" class="headerlink" title="Widget和主程序共享数据"></a>Widget和主程序共享数据</h3><p>App Groups<br><em>iOS8以后，同一个开发者账号可以通过group共享资源，我们可以通过App Groups,共享Widget和程序的NSUserDefaults的数据</em></p>
<ul>
<li>注意:suiteName必须和dev center中定义的app group的identifier ID一致</li>
<li>App的Target和Widget的Target都要设置为同一个group<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSUserDefaults *ud = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.blacktea&quot;];</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://img3.tbcdn.cn/L1/461/1/e376eaf6c6e83565091a1f1acdb26b26ecfc8fe0" alt="_2016_08_17_7_48_46"></p>
<h3 id="同过Widget插件启动App"><a href="#同过Widget插件启动App" class="headerlink" title="同过Widget插件启动App"></a>同过Widget插件启动App</h3><p>NSExtensionContext</p>
<ul>
<li><p>主程序设置URL Schemes</p>
<p><img src="http://img3.tbcdn.cn/L1/461/1/34ae0051adea4361cd94f045e4f538b392142aca" alt="_2016_08_17_11_42_19"></p>
</li>
<li><p>通过UIViewController的extensionContext属性，可以通过Scheme启动App主程序</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self.extensionContext openURL:[NSURL URLWithString:@&quot;blacktea://finished&quot;] completionHandler:nil];</div></pre></td></tr></table></figure>
<h3 id="调整Widget尺寸"><a href="#调整Widget尺寸" class="headerlink" title="调整Widget尺寸"></a>调整Widget尺寸</h3><p>设置preferredContentSize</p>
<ul>
<li>设置宽度是不生效的，默认是整屏的宽度，直接设置高度即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.preferredContentSize = CGSizeMake(0, 80 * 3);</div></pre></td></tr></table></figure>
<h3 id="调整Widget的Edge"><a href="#调整Widget的Edge" class="headerlink" title="调整Widget的Edge"></a>调整Widget的Edge</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (UIEdgeInsets)widgetMarginInsetsForProposedMarginInsets:(UIEdgeInsets)margins</div><div class="line">&#123;</div><div class="line">    margins.bottom = 10.0;</div><div class="line">    margins.left = 0;</div><div class="line">    margins.right = 0;</div><div class="line">    margins.top = 10.0;</div><div class="line">    return margins;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="系统通知用户刷新界面"><a href="#系统通知用户刷新界面" class="headerlink" title="系统通知用户刷新界面"></a>系统通知用户刷新界面</h3><p><em>系统会在适当的时候让Widget刷新数据。可以做一些网络数据请求，并更新Widget视图的数据。</em></p>
<ul>
<li>需要实现NCWidgetProviding协议和widgetPerformUpdateWithCompletionHandler方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (void)widgetPerformUpdateWithCompletionHandler:(void (^)(NCUpdateResult))completionHandler &#123;</div><div class="line">    // Perform any setup necessary in order to update the view.</div><div class="line">    </div><div class="line">    // If an error is encountered, use NCUpdateResultFailed</div><div class="line">    // If there&apos;s no update required, use NCUpdateResultNoData</div><div class="line">    // If there&apos;s an update, use NCUpdateResultNewData</div><div class="line">   // 网络请求，成功或失败通过completionHandler告知系统</div><div class="line">    completionHandler(NCUpdateResultNewData);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Widget-调试"><a href="#Widget-调试" class="headerlink" title="Widget 调试"></a>Widget 调试</h3><ul>
<li>调试</li>
</ul>
<p><em>需要通过Debug设置才能对Wigget代码进行调试</em><br>Debug &gt; Attach to Process by PID or Name</p>
<p><img src="http://img3.tbcdn.cn/L1/461/1/526ab9be951c7012f60ba93a0c5f18f9092e86bf" alt="_2016_08_18_11_17_49"></p>
<ul>
<li>Log</li>
</ul>
<p><em>Widget的Log需要通过Devices的console查看</em><br>Windows &gt; Devices &gt; 对应的设备</p>
<p><img src="http://img1.tbcdn.cn/L1/461/1/7741604004f2c9e8a0a0c96ee074025acecbcbf6" alt="_2016_08_18_11_29_49"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;添加Today-Extension&quot;&gt;&lt;a href=&quot;#添加Today-Extension&quot; class=&quot;headerlink&quot; title=&quot;添加Today Extension&quot;&gt;&lt;/a&gt;添加Today Extension&lt;/h3&gt;&lt;p&gt;File &amp;gt; 
    
    </summary>
    
      <category term="default" scheme="http://blackteachinese.com/categories/default/"/>
    
    
      <category term="default" scheme="http://blackteachinese.com/tags/default/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blackteachinese.com/2017/07/25/chart_%20graphviz/"/>
    <id>http://blackteachinese.com/2017/07/25/chart_ graphviz/</id>
    <published>2017-07-25T05:43:54.000Z</published>
    <updated>2017-07-25T07:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Graphviz"><a href="#Graphviz" class="headerlink" title="Graphviz"></a>Graphviz</h1><hr>
<p>title: 使用graphviz<br>categories:</p>
<ul>
<li><p>tags:</p>
<p>date: 2017-07-12 21:39:27</p>
</li>
</ul>
<hr>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul>
<li><a href="http://www.graphviz.org/pdf/dotguide.pdf" target="_blank" rel="external">官方文档</a></li>
<li><a href="http://www.graphviz.org/Documentation.php" target="_blank" rel="external">Graphviz官网</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Graphviz&quot;&gt;&lt;a href=&quot;#Graphviz&quot; class=&quot;headerlink&quot; title=&quot;Graphviz&quot;&gt;&lt;/a&gt;Graphviz&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;title: 使用graphviz&lt;br&gt;categories:&lt;/p&gt;
&lt;ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何面试一个iOS工程师</title>
    <link href="http://blackteachinese.com/2017/07/12/manage_interview/"/>
    <id>http://blackteachinese.com/2017/07/12/manage_interview/</id>
    <published>2017-07-12T13:39:27.000Z</published>
    <updated>2017-07-23T10:47:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x1-我们的考察重点是什么？"><a href="#0x1-我们的考察重点是什么？" class="headerlink" title="0x1 我们的考察重点是什么？"></a>0x1 我们的考察重点是什么？</h1><p>对于一个客户端开发工程师我们需要考察的关键能力可以抽象为5个方面。基础能力、专项能力、架构能力、系统分析能力、价值产出能力。</p>
<p>对于一个客户开发工程师，基础能力都有什么呢？<br>我的定义是，能够支撑这个工程师完成90%开发工作所需要具备的能力。</p>
<p>什么是专项能力呢？<br>音视频处理、性能优化、网络通信、工程效能、疑难问题排查这些都算。<br>一个工程师是否有专线领域的积累，往往可以看出这个人是否有技术追求、是否有技术深度积累的意识。另外，一个团队也需要具备各种专项能力的人，去解决不同的难题。</p>
<p>架构能力不是面试架构师才要考察的能力吗？<br>当然不是。处理很复杂的系统，需要架构能力。设计一个简单的模块也需要架构的能力。例如设计一个监控模块、智能图片加载模块、UI组件库。一个大公司的部门设计、组织架构如何安排相当于复杂系统的架构设计。一个项目组如何安排每一个角色的工作职责、协作方式、监督机制、激励与惩罚机制就相当于是一个小模块的架构设计。</p>
<p>只有具备了系统分析能力，才能对系统内各功能模块进行合理的设计和安排。<br>在实际工作里，你不仅需要考虑技术层面的问题，你还需要考虑业务发展对架构的要求、有多少资源可以用，项目成本和价值产出比的情况等综合因素。而且你还需要考虑这些因素会不断的变化。系统性、综合性的分析能力这个时候就显得十分重要。<br>另外，我认为这也是人类和人工智能最大的区别。人类的大脑实际上在处理复杂问题、综合性问题的能力是远远强与现在的人工智能的。</p>
<p>最后是价值产出能力。对于一个工程师，价值的产出有许多维度和层次，下面我介绍最常见的3种。<br>第一层，完成项目组布置的日常工作。<br>第二层，通过分析，找到目前项目组存在的问题，主动产出解决这些问题的方案，并推动这些方案的执行。<br>第三层，可以根据业务的现状和发展方，能规划出技术团队各阶段需要储备的基础建设、架构的发展、人员的培养方向，并针对这些规划制定高效、可执行的方案。</p>
<p>不同公司在不同的阶段，对于一个客户端研发工程师的要求都是不一样的。我们需要针对项目组当前的实际需要和未来的发展趋势、着重对其中几项关键点进行考察。</p>
<h1 id="0x2-面试的方法论"><a href="#0x2-面试的方法论" class="headerlink" title="0x2 面试的方法论"></a>0x2 面试的方法论</h1><p>面试时我们需要更真实的反馈，我们需要使用STAR（行为面试方法），多问情景问题、开发性问题，挖掘候选者实际情景处理问题的细节，来考察他的能力。<br>STAR的方法有4个关键词，situation(情景)、task（任务）、action（行动）、result（结果）。<br>根据这4个关键词逐层深入问问题。</p>
<p>1做这个项目前有什么困难？<br>2你是怎么做的？<br>3为什么这样做？<br>4结果怎么样？<br>5再做一次，有什么地方可以改进？</p>
<h1 id="0x3-基础能力考察"><a href="#0x3-基础能力考察" class="headerlink" title="0x3 基础能力考察"></a>0x3 基础能力考察</h1><p>c语言、oc、swift<br>开发环境、工具<br>UI<br>网络层<br>多线程<br>设计模式<br>….</p>
<p>这些都是一个iOS开发工程师需要具备的基础能力。基础能力是首要考察点，如果这部分能力有严重的欠缺，说明候选者是不够专业的。<br>对于基础能力的考察，要尽量考察得全面。准备好各项考察点的问题，其中同一个考察点，要准备好3个层次的问题，这样可以更好地定位候选者每个知识点的掌握的深度。</p>
<ul>
<li>tableView的delegate、datasource各自复杂哪些事情?</li>
<li>有什么办法让tableView变得更加流畅？</li>
<li>如果要自己写一个tableView，介绍一下思路。有哪些关键点要注意的？</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fhtzv53jkrj31kw1hk7wh.jpg" alt="附上一个iOS技术树"></p>
<h1 id="0x4-进阶能力考察"><a href="#0x4-进阶能力考察" class="headerlink" title="0x4 进阶能力考察"></a>0x4 进阶能力考察</h1><p>进阶能力包括前面提到的专线能力、架构能力、系统分析能力、表达能力。这部分能力的考察首先应该结合候选者过往开发的商业项目、开源项目。挖掘对方过往项目里的亮点，使用STAR方法去评估对方各项进阶能力。</p>
<ul>
<li>有没有别的方法？</li>
<li>遇到什么困难，怎么解决？</li>
<li>怎么保障性能／安全性？</li>
<li>实际效果怎么样？怎么体现？</li>
</ul>
<h1 id="0x5-程序员通用技能"><a href="#0x5-程序员通用技能" class="headerlink" title="0x5 程序员通用技能"></a>0x5 程序员通用技能</h1><ul>
<li>sql</li>
<li>正则</li>
<li>数据结构</li>
<li>基础算法</li>
<li>网络编程</li>
<li>…</li>
</ul>
<p>程序员一些通用的技能也是需要考察的。通过这部分内容的考察，可以看出候选者的计算机基础水平掌握的程度。</p>
<p>一些非科班出生的候选者，往往这部分知识会掌握得较差一些。但他们是否有意识地去补充这部分知识，是很容易问出来。</p>
<h1 id="0x6-潜力"><a href="#0x6-潜力" class="headerlink" title="0x6 潜力"></a>0x6 潜力</h1><p>什么程序员有潜力？</p>
<p>我的定义是，在未来可以遇见的3到5年内，进步的空间比同级别的人要大，进步的速度相对要更快。</p>
<p>很多人可以觉得年轻就有潜力，其实未必。我们应该细化到候选人身上的一些基能力、性格、思维、习惯。下面我列举一些，有潜力的考察点。</p>
<ul>
<li>英语水平</li>
<li>学习习惯</li>
<li>工作习惯</li>
<li>耐操性</li>
<li>总结能力</li>
<li>说服力</li>
<li>表现能力</li>
<li>管理意识</li>
<li>共情能力</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x1-我们的考察重点是什么？&quot;&gt;&lt;a href=&quot;#0x1-我们的考察重点是什么？&quot; class=&quot;headerlink&quot; title=&quot;0x1 我们的考察重点是什么？&quot;&gt;&lt;/a&gt;0x1 我们的考察重点是什么？&lt;/h1&gt;&lt;p&gt;对于一个客户端开发工程师我们需要考察
    
    </summary>
    
      <category term="管理" scheme="http://blackteachinese.com/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="管理、面试、iOS、招聘" scheme="http://blackteachinese.com/tags/%E7%AE%A1%E7%90%86%E3%80%81%E9%9D%A2%E8%AF%95%E3%80%81iOS%E3%80%81%E6%8B%9B%E8%81%98/"/>
    
  </entry>
  
  <entry>
    <title>10分钟入门arm64汇编</title>
    <link href="http://blackteachinese.com/2017/07/12/arm64/"/>
    <id>http://blackteachinese.com/2017/07/12/arm64/</id>
    <published>2017-07-12T13:39:27.000Z</published>
    <updated>2017-07-16T09:32:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h2><p>堆栈严格来说应该叫做栈，栈(Stack)是限定仅在一端进行插入或删除操作的线性表。因此，对栈来说，可以进行插入或删除操作的一端端称为栈顶(top)，相应地，另一端称为栈底(bottom)。由于堆栈只允许在一端进行操作，因而按照后进先出（LIFO-Last In First Out）的原理运作。</p>
<h2 id="会变化的栈顶"><a href="#会变化的栈顶" class="headerlink" title="会变化的栈顶"></a>会变化的栈顶</h2><p>从栈顶的定义来看，栈顶的位置是可变的。空栈时，栈顶和栈底重合；满栈时，栈顶离栈底最远。ARM为堆栈提供了硬件支持，它使用一个专门的寄存器（堆栈指针）指向堆栈的栈顶。</p>
<h2 id="两种存储器堆栈"><a href="#两种存储器堆栈" class="headerlink" title="两种存储器堆栈"></a>两种存储器堆栈</h2><p>递增堆栈：向上生长：向高地址方向生长<br>递减堆栈：向下生长：向低地址方向生长<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhlu7dlg1cj30go0750sv.jpg" alt=""></p>
<h2 id="ARM堆栈的生长方向"><a href="#ARM堆栈的生长方向" class="headerlink" title="ARM堆栈的生长方向"></a>ARM堆栈的生长方向</h2><p>虽然ARM处理器核对于两种生长方式的堆栈均支持，但ADS的C语言编译器仅支持一种方式，即从上往下长，并且必须是满递减堆栈。所以STMFD等指令用的最多。</p>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器是用来存储CPU在计算过程中临时数据的, arm64有32个通用寄存器(这里不对浮点数/向量寄存器等做说明):<br>x0-x31, 这些寄存器可以直接在汇编代码里面使用, 也是最经常被使用到的寄存器.</p>
<ul>
<li>SP寄存器, Stack Pointer, 指向栈低的指针. 它是一个隐含的寄存器, 可以在内存操作指令中通过x31寄存器来访问.</li>
<li>PC寄存器, Program Counter, 记录当前执行的代码的地址. 它是一个隐含的寄存器, 无法被直接访问, 只能被特定的指令隐含访问.</li>
<li>LR寄存器, Link Register, 指向返回地址, 即return时回到的地址. 它就是x30, 可以随意访问读写, 意味着程序可以随意改变方法的返回地址.</li>
<li>FP寄存器, Frame Pointer, 指向上一次方法调用的frame的最高位地址, frame位于栈上. 它就是x29, 可以随意访问读写.</li>
</ul>
<p>FP是指向frame的最高位地址, frame位于栈上, 那frame是什么呢?<br>frame其实就是一个按照方法调用顺序, 从栈的高地址向低地址依次存放的一组数据, 用于存放上一次方法调用的关键信息. 数据可以参考下图:<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fhluegxwbnj30or0jv3zr.jpg" alt=""></p>
<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">add x0,x0,#1            ;x0 &lt;==x0+1 ,把x0的内容加1。</div><div class="line">add x0,x0,#0x30         ;x0 &lt;==x0+0x30,把x0的内容加 0x30。</div><div class="line">add x0,x1,x3            ;x0 &lt;==x1+x3, 把x1的内容加上x3的内容放入x0</div><div class="line">add x0,x1,x3,lsl #3     ;x0 &lt;==x0+x3*8 ,x3的值左移3位就是乘以8，结果与x1的值相, 放入x0.</div><div class="line">add x0,x1,[x2]          ;x0 &lt;==x1+[x2], 把x1的内容加上x2的内容作为地址取内存内容放入x0</div><div class="line">ldr x0,[x1]             ;x0 &lt;==[x1], 把x1的内容作为地址取内存内容放入x0</div><div class="line">str x0,[x1]             ;[x1] &lt;== x0, 把x0的内容放入x1的内容作为地址的内存中</div><div class="line">ldr x0,[x1,#4]          ;x0 &lt;==[x1+4], 把x1的内容加上4, 作为内存地址, 取其内容放入x0</div><div class="line">ldr x0,[x1,#4]!         ;x0 &lt;==[x1+4]、 x1&lt;==x1+4, 把x1的内容加上4, 作为内存地址, 取其内容放入x0, 然后把x1的内容加上4放入x1</div><div class="line">ldr x0,[x1],#4          ;x0 &lt;==[x1] 、x1 &lt;==x1+4, 把x1的内容作为内存地址取内存内容放入x0, 并把x1的内容加上4放入x1</div><div class="line">ldr x0,[x1,x2]          ;x0 &lt;==[x1+x2], 把x1和x2的内容相加, 作为内存地址取内存内容放入x0</div></pre></td></tr></table></figure>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>b 跳转到地址（无返回）, 不会改变LR寄存器的值<br>bl 跳转到地址（有返回）, 会改变LR寄存器的值为返回地址<br>ldr/ldur 地址对应的内容加载到寄存器<br>str/stur 寄存器内容存储到内存地址<br>ldp/stp 取/存一对数据(2个)<br>cbz/cbnz 为零跳转到地址/不为零跳转到<br>add 加法运算<br>mov 寄存器之间内容移动<br>ldp/stp 从栈取/存数据<br>adrp, 用来定位数据段中的数据用, 因为aslr会导致代码及数据的地址随机化, 用adrp来根据pc做辅助定位</p>
<h2 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h2><p><code>main函数汇编解析</code></p>
<ul>
<li>设置Debug-&gt;Debug Workflow-&gt;Always Show Disassembly</li>
<li>打断点到callMe函数。PS：callMe调用别的方法才会被保存frame</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">void callYou() &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">void callMe(int a, int b) &#123;</div><div class="line">    callYou();</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    int a = 4;</div><div class="line">    int b = 10;</div><div class="line">    callMe(a, b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码编译结果如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">libdyld.dylib`start:</div><div class="line">    0x18aad55b4 &lt;+0&gt;: nop    </div><div class="line">    0x18aad55b8 &lt;+4&gt;: bl     0x18ab05378               ; exit</div><div class="line">    0x18aad55bc &lt;+8&gt;: brk    #0x3</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Arm64`main:</div><div class="line">    0x100026c24 &lt;+0&gt;:  sub    sp, sp, #0x30             ; =0x30 ;编译器计算到此次方法调用要48bit的栈,把栈底减48bit留出空位存临时变量</div><div class="line">    0x100026c28 &lt;+4&gt;:  stp    x29, x30, [sp, #0x20] ;将fp和lr存入栈的sp+32的地址</div><div class="line">    0x100026c2c &lt;+8&gt;:  add    x29, sp, #0x20            ; =0x20 ;sp+32后存入x29，fp此时的位置就是sp+32</div><div class="line">    0x100026c30 &lt;+12&gt;: mov    w8, #0xa ;将10存到寄存器w8</div><div class="line">    0x100026c34 &lt;+16&gt;: orr    w9, wzr, #0x4 ;将4与wzr进行或运算，存到寄存器W9</div><div class="line">    0x100026c38 &lt;+20&gt;: stur   w0, [x29, #-0x4] ;把w0(main方法的第一个参数, argc),存入x29减4的位置</div><div class="line">    0x100026c3c &lt;+24&gt;: str    x1, [sp, #0x10] ;将x1(main方法的第二个参数*argv[])，存入sp-16的位置</div><div class="line">    0x100026c40 &lt;+28&gt;: str    w9, [sp, #0xc] ;将w9的值，存入到sp+12的位置</div><div class="line">    0x100026c44 &lt;+32&gt;: str    w8, [sp, #0x8] ;将w8的值，存入到sp+8的位置</div><div class="line">    0x100026c48 &lt;+36&gt;: ldr    w0, [sp, #0xc] ;将sp+12地址对应的内容加载到寄存器w0</div><div class="line">    0x100026c4c &lt;+40&gt;: ldr    w1, [sp, #0x8] ;将sp+8地址对应的内容加载到寄存器w1</div><div class="line">    0x100026c50 &lt;+44&gt;: bl     0x100026c00               ; callMe at main.m:16 ;调用callMe方法,将w0、w1作为参数</div><div class="line">-&gt;  0x100026c54 &lt;+48&gt;: mov    w8, #0x0 ;将0存到w8</div><div class="line">    0x100026c58 &lt;+52&gt;: mov    x0, x8 ;将0存到x0</div><div class="line">    0x100026c5c &lt;+56&gt;: ldp    x29, x30, [sp, #0x20] ;从栈里把最开始保存的fp和lr还原回来</div><div class="line">    0x100026c60 &lt;+60&gt;: add    sp, sp, #0x30             ; =0x30 ;sp+48后,存到sp(跳到下一个frame的位置)</div><div class="line">    0x100026c64 &lt;+64&gt;: ret ;返回</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Arm64`callMe:</div><div class="line">    0x100026c00 &lt;+0&gt;:  sub    sp, sp, #0x20             ; =0x20 ;编译器计算到此次方法调用要用到32bit的栈，把栈底减32bit留出空位存临时变量</div><div class="line">    0x100026c04 &lt;+4&gt;:  stp    x29, x30, [sp, #0x10] ;将fp和lr寄存器存入到sp+16的位置</div><div class="line">    0x100026c08 &lt;+8&gt;:  add    x29, sp, #0x10            ; =0x10 ; 将sp+16后，存入到x29</div><div class="line">    0x100026c0c &lt;+12&gt;: stur   w0, [x29, #-0x4] ; 将w0（第一个参数）存入到x29 -4的位置</div><div class="line">    0x100026c10 &lt;+16&gt;: str    w1, [sp, #0x8] ;将w1(第二个参数) 存入到sp+8的位置</div><div class="line">-&gt;  0x100026c14 &lt;+20&gt;: bl     0x100026bfc               ; callYou at main.m:14 ; 调用callYou方法</div><div class="line">    0x100026c18 &lt;+24&gt;: ldp    x29, x30, [sp, #0x10] ;从栈里把最开始保存的fp和lr还原回来</div><div class="line">    0x100026c1c &lt;+28&gt;: add    sp, sp, #0x20             ; =0x20 ;sp+32后，存入到sp(跳到下一个frame的位置)</div><div class="line">    0x100026c20 &lt;+32&gt;: ret</div></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fhlu8cthldj30yk04uabc.jpg" alt="从start-&gt;main-&gt;callme-&gt;callYou有3个frame"></p>
<h2 id="sp的正负偏移"><a href="#sp的正负偏移" class="headerlink" title="sp的正负偏移"></a>sp的正负偏移</h2><p>sp存取的时候有的偏移量是正数, 有的是负数, 这有什么区别呢?<br>在stack里面, sp指针之下(负数偏移量)的数据是不保证安全的, 可能被覆盖, 而sp指针之上(正数偏移量)的数据是安全的. 放到负数偏移量一般都是临时存一下数据, 需要被整个方法用到的数据一般放到sp的正数偏移位置.</p>
<h2 id="git地址"><a href="#git地址" class="headerlink" title="git地址"></a>git地址</h2><p><a href="https://github.com/blackteachinese/arm64Example" target="_blank" rel="external">demo传送门</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.element14.com/community/servlet/JiveServlet/previewBody/41836-102-1-229511/ARM.Reference_Manual.pdf" target="_blank" rel="external">ARM Reference Manual: https://www.element14.com/community/servlet/JiveServlet/previewBody/41836-102-1-229511/ARM.Reference_Manual.pdf</a></p>
<p><a href="https://developer.apple.com/library/content/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html" target="_blank" rel="external">ARM64 Function Calling Conventions: https://developer.apple.com/library/content/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html</a></p>
<p><a href="http://blog.chinaunix.net/uid-25871104-id-2938389.html" target="_blank" rel="external">FP寄存器及frame pointer介绍: http://blog.chinaunix.net/uid-25871104-id-2938389.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是栈？&quot;&gt;&lt;a href=&quot;#什么是栈？&quot; class=&quot;headerlink&quot; title=&quot;什么是栈？&quot;&gt;&lt;/a&gt;什么是栈？&lt;/h2&gt;&lt;p&gt;堆栈严格来说应该叫做栈，栈(Stack)是限定仅在一端进行插入或删除操作的线性表。因此，对栈来说，可以进行插入或删除
    
    </summary>
    
      <category term="default" scheme="http://blackteachinese.com/categories/default/"/>
    
    
      <category term="default" scheme="http://blackteachinese.com/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>成为值得被爱的人</title>
    <link href="http://blackteachinese.com/2017/07/10/thought-to-be-lovely-man/"/>
    <id>http://blackteachinese.com/2017/07/10/thought-to-be-lovely-man/</id>
    <published>2017-07-10T14:01:06.000Z</published>
    <updated>2017-07-10T14:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>人不但天生希望被爱，而且希望自己成为值得被爱的人。<br>我们天生都是自利的。也许有人不同意这个观点。是的，你会不求回报地对某个人好，这很棒。但是这也是自利的表现。<br>我们对家人好，可能是我们喜欢得到家人的温暖的感觉。我们不希望家人远离我们，于是我们对他们额外的好。因为，我们不是活在只有一个人的世界里。我们的自利，会驱动我们，希望被别人爱。<br>被一个人爱还不够，我们还希望被更多人爱、持续地被爱。因此，我们便需要称为值得被爱的人。<br>是的，这也许便是我们一生为之奋斗的目标。即便你是一个放荡不羁的自由主义者，当你看到美得无法用言语表达的巴塞罗那夜景，你也不可能只希望独自欣赏。你至少会希望，有一个和你一样的人、你爱的人，能够和你一起分享，你内心的喜悦。</p>
<p>我们如何成为一个值得被爱的人？<br>很多人一生在不断追求名利，希望通过名利的获取，让自己指得被爱。这确实是一种方法，但是这并不一定是最好的方法。因为如果你即便很有钱、很有名气，也不一定就特别值得被爱。你可以只是值得被拥有。<br>追求智慧和美德是更好的方法。<br>培养自己的美德，比如正义之气、比如仁慈的内心、比如不以物喜、不以己悲的价值观。<br>寻求改变世界的智慧。这并不是说要你做声么大事，恰恰是“不做大事的智慧”。我们要做的是，从我做起、从小事做起。见到别人做好事，就鼓掌，见到坏事就站出来说话，这样无数的你一起，就能通过“涌现”的办法，改变世界</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人不但天生希望被爱，而且希望自己成为值得被爱的人。&lt;br&gt;我们天生都是自利的。也许有人不同意这个观点。是的，你会不求回报地对某个人好，这很棒。但是这也是自利的表现。&lt;br&gt;我们对家人好，可能是我们喜欢得到家人的温暖的感觉。我们不希望家人远离我们，于是我们对他们额外的好。因为
    
    </summary>
    
      <category term="心灵" scheme="http://blackteachinese.com/categories/%E5%BF%83%E7%81%B5/"/>
    
    
      <category term="心灵" scheme="http://blackteachinese.com/tags/%E5%BF%83%E7%81%B5/"/>
    
  </entry>
  
  <entry>
    <title>webrtc实现音视频通话</title>
    <link href="http://blackteachinese.com/2017/05/09/webrtc-flow-introduce/"/>
    <id>http://blackteachinese.com/2017/05/09/webrtc-flow-introduce/</id>
    <published>2017-05-09T07:32:17.000Z</published>
    <updated>2017-07-23T11:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webrtc是什么？"><a href="#webrtc是什么？" class="headerlink" title="webrtc是什么？"></a>webrtc是什么？</h2><p>webrtc(Web Real-Time Communication)是跨平台的音视频实时通话协议。<br>使用webrtc开发一个移动端的实时音视频通讯协议功能需要具备以下几项能力，NAT穿越、SignalChannel信令通道、webRTC会话建立、音视频数据获取、音视频数据传输。</p>
<h2 id="NAT穿越技术"><a href="#NAT穿越技术" class="headerlink" title="NAT穿越技术"></a>NAT穿越技术</h2><h3 id="ICE"><a href="#ICE" class="headerlink" title="ICE"></a>ICE</h3><p>由以下几个技术和协议组成的：STUN、NAT、TURN、SDP，这些协议技术，帮助ICE共同实现了NAT/防火墙穿越。</p>
<h3 id="STUN"><a href="#STUN" class="headerlink" title="STUN"></a>STUN</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h4><p>STUN（Session Traversal Utilities for NAT，NAT会话传输应用程序）是一种网络协议，它允许位于NAT（或多重NAT）后的客户端找出自己的公网地址，查出自己位于哪种类型的NAT之后以及NAT为某一个本地端口所绑定的Internet端端口。</p>
<h4 id="2-作用"><a href="#2-作用" class="headerlink" title="2 作用"></a>2 作用</h4><p>STUN服务器部署2个IP以及2个port。A客户端通过向STUN服务器不同IP发UDP包。再根据是否能收到STUN服务器的response等等来判断。1是否当前在公网2NAT的类型</p>
<h4 id="3-NAT探测过程"><a href="#3-NAT探测过程" class="headerlink" title="3 NAT探测过程"></a>3 NAT探测过程</h4><h5 id="STEP1："><a href="#STEP1：" class="headerlink" title="STEP1："></a>STEP1：</h5><p>B向C的IP1的pot1端口发送一个UDP 包。C收到这个包后，会把它收到包的源IP和port写到UDP包中，然后把此包通过IP1和port1发还给B。这个IP和port也就是NAT的外网 IP和port，也就是说你在STEP1中就得到了NAT的外网IP。当B收到此UDP后，把此UDP中的IP和自己的IP做比较，如果是一样的，就说明自己是在公网。如果不一样，说明有NAT的存在，系统进行STEP2的操作。 </p>
<h5 id="STEP2："><a href="#STEP2：" class="headerlink" title="STEP2："></a>STEP2：</h5><p>B向C的IP1发送一个UDP包，请求C通过另外一个IP2和PORT（不同与SETP1的IP1）向B返回一个UDP数据包。我们来分析一下，如果B收到了这个数据包，那说明什么？说明NAT来着不拒，不对数据包进行任何过滤，这也就是STUN标准中的full cone NAT。如果没收到，那么系统进行STEP3的操作。 </p>
<h5 id="STEP3："><a href="#STEP3：" class="headerlink" title="STEP3："></a>STEP3：</h5><p>B向C的IP2的port2发送一个数据包，C收到数据包后，把它收到包的源IP和port写到UDP包中，然后通过自己的IP2和port2把此包发还给B。如果这个port和step1中的port一样，那么可以肯定这个NAT是个CONE NAT，否则是对称NAT。</p>
<h5 id="STEP4："><a href="#STEP4：" class="headerlink" title="STEP4："></a>STEP4：</h5><p>B向C的IP2的一个端口PD发送一个数据请求包，要求C用IP2和不同于PD的port返回一个数据包给B。 </p>
<p>我们来分析结果：如果B收到了，那也就意味着只要IP相同，即使port不同，NAT也允许UDP包通过。显然这是restrict cone NAT。如果没收到，没别的好说，port restrict NAT. </p>
<h5 id="4-获取客户端公网地址"><a href="#4-获取客户端公网地址" class="headerlink" title="4 获取客户端公网地址"></a>4 获取客户端公网地址</h5><p>客户端A向STUN服务器发送一个UDP包1。STUN服务器接收到UDP包1后，将该UDP包的源IP和源Port写到UDP包2发送给A。A收到UDP包2后，打开一看，源IP和源Port就是自己的公网地址</p>
<h3 id="TURN（数据中转）"><a href="#TURN（数据中转）" class="headerlink" title="TURN（数据中转）"></a>TURN（数据中转）</h3><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1 概念"></a>1 概念</h4><p>TURN（Traversal Using Relay NAT），是一种资料传输协议（data-transfer protocol）。通过中继服务器，穿透 NAT 或防火墙使两个 TCP 或 UPD 客户端建立连接。</p>
<h4 id="2-作用-1"><a href="#2-作用-1" class="headerlink" title="2 作用"></a>2 作用</h4><p>如果使用STUN打洞失败，只能使用TURN服务器做中转数据</p>
<h2 id="信令通道（SignalChannel）"><a href="#信令通道（SignalChannel）" class="headerlink" title="信令通道（SignalChannel）"></a>信令通道（SignalChannel）</h2><p>Signalling 来发现各个 Peer，通过 Signalling 来控制各个 Peer 之间连接的建立和断开。（通常用WebSocket/MQTT/Socket原生/XMPP）</p>
<h2 id="webRTC协议"><a href="#webRTC协议" class="headerlink" title="webRTC协议"></a>webRTC协议</h2><h3 id="WebRTC会话建立"><a href="#WebRTC会话建立" class="headerlink" title="WebRTC会话建立"></a>WebRTC会话建立</h3><h4 id="SDP（客户端配置信息）"><a href="#SDP（客户端配置信息）" class="headerlink" title="SDP（客户端配置信息）"></a>SDP（客户端配置信息）</h4><p>会话描述协议Session Description Protocol (SDP) 是一个描述多媒体连接内容的协议，例如分辨率，格式，编码，加密算法等</p>
<h4 id="JSEP（会话建立协议JavaScript-Session-Establishment-Protocol）"><a href="#JSEP（会话建立协议JavaScript-Session-Establishment-Protocol）" class="headerlink" title="JSEP（会话建立协议JavaScript Session Establishment Protocol）"></a>JSEP（会话建立协议JavaScript Session Establishment Protocol）</h4><p>•    呼叫方发送 offer；<br>•    被呼叫方接受这个 offer；<br>•    被呼叫方发送 answer；<br>•    呼叫方接受 answer</p>
<h4 id="必要信息"><a href="#必要信息" class="headerlink" title="必要信息"></a>必要信息</h4><p>1    本地客户端的配置信息；<br>2    远程客户端的配置信息；<br>3    远程参与建立P2P连接的信息：主要是 IP 和端口。</p>
<h4 id="P2P连接的过程"><a href="#P2P连接的过程" class="headerlink" title="P2P连接的过程"></a>P2P连接的过程</h4><p>1    A和B连接上服务端，建立一个TCP长连接（任意协议都可以，WebSocket/MQTT/Socket原生/XMPP），我们这里为了省事，直接采用WebSocket，这样一个信令通道就有了。</p>
<p>2    A从ice server（STUN Server）获取ice candidate并发送给Socket服务端，并生成包含session description（SDP）的offer，发送给Socket服务端。</p>
<p>3 Socket服务端把A的offer和ice candidate转发给B，B会保存下A这些信息。</p>
<p>4 然后B发送包含自己session description的answer(因为它收到的是offer，所以返回的是answer，但是内容都是SDP)和ice candidate给Socket服务端</p>
<p>5 Socket服务端把B的answer和ice candidate给A，A保存下B的这些信息。至此A与B建立起了一个P2P连接。</p>
<h3 id="获取音视频数据"><a href="#获取音视频数据" class="headerlink" title="获取音视频数据"></a>获取音视频数据</h3><p>MediaStream：<br>媒体流，一个媒体流包含 0 个到多个的媒体数据源，媒体流里面的数据源在呈现（render）必须同步</p>
<p>MediaStreamTrack：<br>媒体数据源，一个媒体数据源构成一个 MediaStreamTrack，比如音频数据源和视频数据源，多个相互之间有关联的媒体数据源（比如有同步关系的音频视频媒体数据源）构成一个媒体流（MediaStream）。</p>
<h3 id="传输音频和视频数据"><a href="#传输音频和视频数据" class="headerlink" title="传输音频和视频数据"></a>传输音频和视频数据</h3><p>PeerConnection（RTCPeerConnection (C++)）：</p>
<p>表示一个 WebRTC 通讯连接对象，它维护与这个通讯连接相关的 MediaStream，处理通讯双方信令事件，完成通讯数据的传输。</p>
<h3 id="传输任意二进制数据"><a href="#传输任意二进制数据" class="headerlink" title="传输任意二进制数据"></a>传输任意二进制数据</h3><p>DataChannel（RTCDataChannel）</p>
<p>数据通道，两个 WebRTC 终端的连接建立后，它们可以通过这个数据通道传输任意类型的数据。</p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul>
<li>对通话对象的安全身份认证</li>
<li>对通话内容的加密</li>
</ul>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ul>
<li>对客户端的合法性认证，对自身的保护</li>
<li>对合法客户端的保护</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webrtc是什么？&quot;&gt;&lt;a href=&quot;#webrtc是什么？&quot; class=&quot;headerlink&quot; title=&quot;webrtc是什么？&quot;&gt;&lt;/a&gt;webrtc是什么？&lt;/h2&gt;&lt;p&gt;webrtc(Web Real-Time Communication)是跨平
    
    </summary>
    
      <category term="voip" scheme="http://blackteachinese.com/categories/voip/"/>
    
    
      <category term="voip" scheme="http://blackteachinese.com/tags/voip/"/>
    
  </entry>
  
  <entry>
    <title>编译原理入门</title>
    <link href="http://blackteachinese.com/2017/04/25/compile-principleintroduce/"/>
    <id>http://blackteachinese.com/2017/04/25/compile-principleintroduce/</id>
    <published>2017-04-25T06:12:53.000Z</published>
    <updated>2017-04-25T13:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译器结构"><a href="#编译器结构" class="headerlink" title="编译器结构"></a>编译器结构</h1><p>编译器由两个部分组成：分析 (analysis)部分和综合 (synthesis)部分。</p>
<ul>
<li>分析部分也称前端 (front end)，它把源程序分解成为多个组成要素，并在这些要素之上加上语法结构，然后使用这个结构来创建该源程序的一个中间表示。</li>
<li>分析部分还会收集有关源程序的信息，放在一个称为符号表 (symbol table)的数据结构中。符号表将和中间表示形式一起传送给综合部分。</li>
<li>综合部分也称后端 (back end)，根据中间表示和符号表中的信息来构造用户期待的目标程序。</li>
</ul>
<h1 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h1><ul>
<li>词法分析<ul>
<li>词法分析器读入组成源程序的字符流，将他们切分组织成有意义的词法单元 (token)的序列作为输出。</li>
</ul>
</li>
<li>语法分析<ul>
<li>语法分析器根据各个词法单元，创建树形中间表示，常用语法树 (syntax tree)。语法分析只判断源程序在结构上是否正确。</li>
</ul>
</li>
<li>语义分析<ul>
<li>使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致。语义分析是判断结构正确的源程序所表达的意义是否正确，其中一个重要部分是类型检查 (type checking)。</li>
</ul>
</li>
<li>中间代码生成<ul>
<li>编译器根据语法树和符号表，生成一个明确的低级的或类机器语言的中间表示 (intermediate representation)。三地址代码 (three-address code)是一种常见的中间表示形式。 </li>
</ul>
</li>
<li>代码优化（机器无关）<ul>
<li>机器无关的代码优化步骤试图改进中间代码，以便生成更好的目标代码。 </li>
</ul>
</li>
<li>代码生成器<ul>
<li>代码生成器以源程序的中间表示形式作为输入，并把它映射到目标语言。如果目标语言是机器代码，就必须为程序使用的每个变量选择寄存器或内存位置。然后，中间指令被翻译成为能够完成相同任务的机器指令序列 </li>
</ul>
</li>
<li>代码优化（机器相关）<ul>
<li>优化目标机器语言 </li>
</ul>
</li>
</ul>
<h2 id="查看编译步骤"><a href="#查看编译步骤" class="headerlink" title="查看编译步骤"></a>查看编译步骤</h2><p>创建文件 compileText.c</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line">  <span class="keyword">int</span> main (<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</div><div class="line">  printf(<span class="string">"Hello workd"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用clnag/llvm,输入下面命令查看编译步骤：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -ccc-print-phases compileTest.c</div></pre></td></tr></table></figure>
<p>输出得到编译步骤：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span>: input, <span class="string">"compileTest.c"</span>, c</div><div class="line"><span class="number">1</span>: preprocessor, &#123;<span class="number">0</span>&#125;, cpp-output</div><div class="line"><span class="number">2</span>: compiler, &#123;<span class="number">1</span>&#125;, ir</div><div class="line"><span class="number">3</span>: backend, &#123;<span class="number">2</span>&#125;, assembler</div><div class="line"><span class="number">4</span>: assembler, &#123;<span class="number">3</span>&#125;, object</div><div class="line"><span class="number">5</span>: linker, &#123;<span class="number">4</span>&#125;, image</div><div class="line"><span class="number">6</span>: bind-arch, <span class="string">"x86_64"</span>, &#123;<span class="number">5</span>&#125;, image</div></pre></td></tr></table></figure></p>
<h1 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h1><p>符号表记录源程序中使用的变量的名字，并收集和每个名字的各种属性有关的信息。如一个名字的存储分配、类型、作用域、参数数量和类型、返回类型等。<br>符号表为每个变量名字创建一个记录条目。编译器可以向记录中快速存放和获取数据。</p>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p>创建文件 compileText.c</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line">  <span class="keyword">int</span> main (<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</div><div class="line">  printf(<span class="string">"Hello workd"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输入以下命令：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -fmodules -fsyntax-only -Xclang -dump-tokens compileTest.c</div></pre></td></tr></table></figure>
<p>输出token序列：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">annot_module_include '#include &lt;s'		Loc=&lt;compileTest.c:1:1&gt;</div><div class="line">int 'int'		Loc=&lt;compileTest.c:2:1&gt;</div><div class="line">identifier 'main'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:5&gt;</div><div class="line">l_paren '('	 [LeadingSpace]	Loc=&lt;compileTest.c:2:10&gt;</div><div class="line">int 'int'		Loc=&lt;compileTest.c:2:11&gt;</div><div class="line">identifier 'argc'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:15&gt;</div><div class="line">comma ','		Loc=&lt;compileTest.c:2:19&gt;</div><div class="line">char 'char'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:21&gt;</div><div class="line">star '*'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:26&gt;</div><div class="line">identifier 'argv'		Loc=&lt;compileTest.c:2:27&gt;</div><div class="line">l_square '['		Loc=&lt;compileTest.c:2:31&gt;</div><div class="line">r_square ']'		Loc=&lt;compileTest.c:2:32&gt;</div><div class="line">r_paren ')'		Loc=&lt;compileTest.c:2:33&gt;</div><div class="line">l_brace '&#123;'	 [LeadingSpace]	Loc=&lt;compileTest.c:2:35&gt;</div><div class="line">identifier 'printf'	 [StartOfLine] [LeadingSpace]	Loc=&lt;compileTest.c:3:5&gt;</div><div class="line">l_paren '('		Loc=&lt;compileTest.c:3:11&gt;</div><div class="line">string_literal '"Hello workd"'		Loc=&lt;compileTest.c:3:12&gt;</div><div class="line">r_paren ')'		Loc=&lt;compileTest.c:3:25&gt;</div><div class="line">semi ';'		Loc=&lt;compileTest.c:3:26&gt;</div><div class="line">return 'return'	 [StartOfLine] [LeadingSpace]	Loc=&lt;compileTest.c:4:5&gt;</div><div class="line">numeric_constant '0'	 [LeadingSpace]	Loc=&lt;compileTest.c:4:12&gt;</div><div class="line">semi ';'		Loc=&lt;compileTest.c:4:13&gt;</div><div class="line">r_brace '&#125;'	 [StartOfLine]	Loc=&lt;compileTest.c:5:1&gt;</div><div class="line">eof ''		Loc=&lt;compileTest.c:5:2&gt;</div></pre></td></tr></table></figure>
<h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><p>输入以下命令：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -fmodules -fsyntax-only -Xclang -ast-dump compileTest.c</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">TranslationUnitDecl 0x7f8e4d81fad0 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt;</div><div class="line">|-TypedefDecl 0x7f8e4d820018 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __int128_t '__int128'</div><div class="line">| `-BuiltinType 0x7f8e4d81fd40 '__int128'</div><div class="line">|-TypedefDecl 0x7f8e4d820078 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __uint128_t 'unsigned __int128'</div><div class="line">| `-BuiltinType 0x7f8e4d81fd60 'unsigned __int128'</div><div class="line">|-TypedefDecl 0x7f8e4d820368 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __NSConstantString 'struct __NSConstantString_tag'</div><div class="line">| `-RecordType 0x7f8e4d820170 'struct __NSConstantString_tag'</div><div class="line">|   `-Record 0x7f8e4d8200c8 '__NSConstantString_tag'</div><div class="line">|-TypedefDecl 0x7f8e4d8203f8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_ms_va_list 'char *'</div><div class="line">| `-PointerType 0x7f8e4d8203c0 'char *'</div><div class="line">|   `-BuiltinType 0x7f8e4d81fb60 'char'</div><div class="line">|-TypedefDecl 0x7f8e4d8206d8 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_va_list 'struct __va_list_tag [1]'</div><div class="line">| `-ConstantArrayType 0x7f8e4d820680 'struct __va_list_tag [1]' 1</div><div class="line">|   `-RecordType 0x7f8e4d8204f0 'struct __va_list_tag'</div><div class="line">|     `-Record 0x7f8e4d820448 '__va_list_tag'</div><div class="line">|-ImportDecl 0x7f8e4d98ada0 &lt;compileTest.c:1:1&gt; col:1 implicit Darwin.C.stdio</div><div class="line">|-FunctionDecl 0x7f8e4d98b040 &lt;line:2:1, line:5:1&gt; line:2:5 main 'int (int, char **)'</div><div class="line">| |-ParmVarDecl 0x7f8e4d98ade8 &lt;col:11, col:15&gt; col:15 argc 'int'</div><div class="line">| |-ParmVarDecl 0x7f8e4d98af00 &lt;col:21, col:32&gt; col:27 argv 'char **':'char **'</div><div class="line">| `-CompoundStmt 0x7f8e4d9e9ab0 &lt;col:35, line:5:1&gt;</div><div class="line">|   |-CallExpr 0x7f8e4d9e9a18 &lt;line:3:5, col:25&gt; 'int'</div><div class="line">|   | |-ImplicitCastExpr 0x7f8e4d9e9a00 &lt;col:5&gt; 'int (*)(const char *, ...)' &lt;FunctionToPointerDecay&gt;</div><div class="line">|   | | `-DeclRefExpr 0x7f8e4d98b538 &lt;col:5&gt; 'int (const char *, ...)' Function 0x7f8e4d98b158 'printf' 'int (const char *, ...)'</div><div class="line">|   | `-ImplicitCastExpr 0x7f8e4d9e9a60 &lt;col:12&gt; 'const char *' &lt;BitCast&gt;</div><div class="line">|   |   `-ImplicitCastExpr 0x7f8e4d9e9a48 &lt;col:12&gt; 'char *' &lt;ArrayToPointerDecay&gt;</div><div class="line">|   |     `-StringLiteral 0x7f8e4d98b598 &lt;col:12&gt; 'char [12]' lvalue "Hello workd"</div><div class="line">|   `-ReturnStmt 0x7f8e4d9e9a98 &lt;line:4:5, col:12&gt;</div><div class="line">|     `-IntegerLiteral 0x7f8e4d9e9a78 &lt;col:12&gt; 'int' 0</div><div class="line">`-&lt;undeserialized declarations&gt;</div></pre></td></tr></table></figure>
<h2 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h2><p>输入命令：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -S -emit-llvm compileTest.c -o compileTest.ll</div></pre></td></tr></table></figure>
<p>得到compileTest.ll文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">; ModuleID = 'compileTest.c'</div><div class="line">source_filename = "compileTest.c"</div><div class="line">target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"</div><div class="line">target triple = "x86_64-apple-macosx10.12.0"</div><div class="line"></div><div class="line">@.str = private unnamed_addr constant [12 x i8] c"Hello workd\00", align 1</div><div class="line"></div><div class="line">; Function Attrs: nounwind ssp uwtable</div><div class="line">define i32 @main(i32, i8**) #0 &#123;</div><div class="line">  %3 = alloca i32, align 4</div><div class="line">  %4 = alloca i32, align 4</div><div class="line">  %5 = alloca i8**, align 8</div><div class="line">  store i32 0, i32* %3, align 4</div><div class="line">  store i32 %0, i32* %4, align 4</div><div class="line">  store i8** %1, i8*** %5, align 8</div><div class="line">  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))</div><div class="line">  ret i32 0</div><div class="line">&#125;</div><div class="line"></div><div class="line">declare i32 @printf(i8*, ...) #1</div><div class="line"></div><div class="line">attributes #0 = &#123; nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" &#125;</div><div class="line">attributes #1 = &#123; "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" &#125;</div><div class="line"></div><div class="line">!llvm.module.flags = !&#123;!0&#125;</div><div class="line">!llvm.ident = !&#123;!1&#125;</div><div class="line"></div><div class="line">!0 = !&#123;i32 1, !"PIC Level", i32 2&#125;</div><div class="line">!1 = !&#123;!"Apple LLVM version 8.1.0 (clang-802.0.41)"&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="生成汇编"><a href="#生成汇编" class="headerlink" title="生成汇编"></a>生成汇编</h2><p>输入命令：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -S compileTest.c -o compileTest.s</div></pre></td></tr></table></figure>
<p>得到compileTest.s:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">	.section	__TEXT,__text,regular,pure_instructions</div><div class="line">	.macosx_version_min <span class="number">10</span>, <span class="number">12</span></div><div class="line">	.globl	_main</div><div class="line">	.p2align	<span class="number">4</span>, <span class="number">0x90</span></div><div class="line">_main:                                  <span class="meta">## @main</span></div><div class="line">	.cfi_startproc</div><div class="line">    <span class="meta">## BB#0:</span></div><div class="line">	pushq	%rbp</div><div class="line">Ltmp0:</div><div class="line">	.cfi_def_cfa_offset <span class="number">16</span></div><div class="line">Ltmp1:</div><div class="line">	.cfi_offset %rbp, <span class="number">-16</span></div><div class="line">	movq	%rsp, %rbp</div><div class="line">Ltmp2:</div><div class="line">	.cfi_def_cfa_register %rbp</div><div class="line">	subq	$<span class="number">32</span>, %rsp</div><div class="line">	leaq	L_.str(%rip), %rax</div><div class="line">	movl	$<span class="number">0</span>, <span class="number">-4</span>(%rbp)</div><div class="line">	movl	%edi, <span class="number">-8</span>(%rbp)</div><div class="line">	movq	%rsi, <span class="number">-16</span>(%rbp)</div><div class="line">	movq	%rax, %rdi</div><div class="line">	movb	$<span class="number">0</span>, %al</div><div class="line">	callq	_printf</div><div class="line">	xorl	%ecx, %ecx</div><div class="line">	movl	%eax, <span class="number">-20</span>(%rbp)         <span class="meta">## 4-byte Spill</span></div><div class="line">	movl	%ecx, %eax</div><div class="line">	addq	$<span class="number">32</span>, %rsp</div><div class="line">	popq	%rbp</div><div class="line">	retq</div><div class="line">	.cfi_endproc</div><div class="line"></div><div class="line">	.section	__TEXT,__cstring,cstring_literals</div><div class="line">L_.str:                                 <span class="meta">## @.str</span></div><div class="line">	.asciz	<span class="string">"Hello workd"</span></div><div class="line"></div><div class="line"></div><div class="line">.subsections_via_symbols</div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="生成目标文件"><a href="#生成目标文件" class="headerlink" title="生成目标文件"></a>生成目标文件</h2><p>输入命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -fmodules -c compileTest.c -o compileTest.o</div></pre></td></tr></table></figure>
<p>输出文件compileTest.o:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">cffa edfe <span class="number">0700</span> <span class="number">0001</span> <span class="number">0300</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span></div><div class="line"><span class="number">0400</span> <span class="number">0000</span> <span class="number">0002</span> <span class="number">0000</span> <span class="number">0020</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">1900</span> <span class="number">0000</span> <span class="number">8801</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line">a000 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2002</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line">a000 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0700</span> <span class="number">0000</span> <span class="number">0700</span> <span class="number">0000</span></div><div class="line"><span class="number">0400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">7465</span> <span class="number">7874</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">5445</span> <span class="number">5854</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">3400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2002</span> <span class="number">0000</span> <span class="number">0400</span> <span class="number">0000</span></div><div class="line">c002 <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">0004</span> <span class="number">0080</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">6373</span> <span class="number">7472</span> <span class="number">696</span>e</div><div class="line"><span class="number">6700</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">5445</span> <span class="number">5854</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">3400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0</span>c00 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5402</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">636f</span> <span class="number">6</span>d70 <span class="number">6163</span></div><div class="line"><span class="number">745f</span> <span class="number">756</span>e <span class="number">7769</span> <span class="number">6e64</span> <span class="number">5f</span>5f <span class="number">4</span>c44 <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">4000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">2000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">6002</span> <span class="number">0000</span> <span class="number">0300</span> <span class="number">0000</span></div><div class="line">d002 <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0002</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">6568</span> <span class="number">5f</span>66 <span class="number">7261</span></div><div class="line"><span class="number">6</span>d65 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">5f</span>5f <span class="number">5445</span> <span class="number">5854</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">6000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">4000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">8002</span> <span class="number">0000</span> <span class="number">0300</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0b00</span> <span class="number">0068</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2400</span> <span class="number">0000</span> <span class="number">1000</span> <span class="number">0000</span></div><div class="line"><span class="number">000</span>c <span class="number">0</span>a00 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">1800</span> <span class="number">0000</span></div><div class="line">d802 <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> f802 <span class="number">0000</span> <span class="number">1000</span> <span class="number">0000</span></div><div class="line"><span class="number">0b00</span> <span class="number">0000</span> <span class="number">5000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">5548</span> <span class="number">89e5</span> <span class="number">4883</span> ec20 <span class="number">488</span>d <span class="number">0525</span> <span class="number">0000</span> <span class="number">00</span>c7</div><div class="line"><span class="number">45f</span>c <span class="number">0000</span> <span class="number">0000</span> <span class="number">897</span>d f848 <span class="number">8975</span> f048 <span class="number">89</span>c7</div><div class="line">b000 e800 <span class="number">0000</span> <span class="number">0031</span> c989 <span class="number">45</span>ec <span class="number">89</span>c8 <span class="number">4883</span></div><div class="line">c420 <span class="number">5</span>dc3 <span class="number">4865</span> <span class="number">6</span>c6c <span class="number">6f</span>20 <span class="number">776f</span> <span class="number">726b</span> <span class="number">6400</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">3400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">1400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">017</span>a <span class="number">5200</span> <span class="number">0178</span> <span class="number">1001</span></div><div class="line"><span class="number">100</span>c <span class="number">0708</span> <span class="number">9001</span> <span class="number">0000</span> <span class="number">2400</span> <span class="number">0000</span> <span class="number">1</span>c00 <span class="number">0000</span></div><div class="line"><span class="number">80f</span>f ffff ffff ffff <span class="number">3400</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">0041</span> <span class="number">0e10</span> <span class="number">8602</span> <span class="number">430</span>d <span class="number">0600</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></div><div class="line"><span class="number">2300</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">002</span>d <span class="number">0b00</span> <span class="number">0000</span> <span class="number">0200</span> <span class="number">0015</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0006</span> <span class="number">0100</span> <span class="number">0000</span> <span class="number">0f</span>01 <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0700</span> <span class="number">0000</span> <span class="number">0100</span> <span class="number">0000</span></div><div class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">005f</span> <span class="number">6</span>d61 <span class="number">696</span>e <span class="number">005f</span></div><div class="line"><span class="number">7072</span> <span class="number">696</span>e <span class="number">7466</span> <span class="number">0000</span></div></pre></td></tr></table></figure>
<h2 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h2><p>输入命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang compileTest.o -o compileTest</div></pre></td></tr></table></figure>
<p>输出可执行文件compileTest,执行如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./compileTest</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输出</div><div class="line">Hello world</div></pre></td></tr></table></figure>
<h2 id="Example传送门"><a href="#Example传送门" class="headerlink" title="Example传送门"></a>Example传送门</h2><p><a href="https://github.com/blackteachinese/compile_principle_introduce/tree/master" target="_blank" rel="external">https://github.com/blackteachinese/compile_principle_introduce/tree/master</a></p>
<h1 id="编译器-compiler"><a href="#编译器-compiler" class="headerlink" title="编译器 (compiler)"></a>编译器 (compiler)</h1><p>编译器是一个程序，可以阅读以某一种语言(源语言)编写的程序，并把该程序翻译成为一个等价的、用另一种语言(目标语言)编写的程序。</p>
<h1 id="解释器-interpreter"><a href="#解释器-interpreter" class="headerlink" title="解释器 (interpreter)"></a>解释器 (interpreter)</h1><p>解释器不通过翻译的方式生成目标程序，直接利用用户提供的输入执行源程序中指定的操作。</p>
<h2 id="编译器和解析器的区别"><a href="#编译器和解析器的区别" class="headerlink" title="编译器和解析器的区别"></a>编译器和解析器的区别</h2><p>编译型语言在编译过程中生成目标平台的指令，解释型语言在运行过程中才生成目标平台的指令。<br>虚拟机的任务是在运行过程中将中间代码翻译成目标平台的指令。</p>
<h1 id="语言处理流程"><a href="#语言处理流程" class="headerlink" title="语言处理流程"></a>语言处理流程</h1><p>预处理器 (preprocessor)<br>编译器 (compiler)<br>汇编器 (assembler)<br>链接器 (linker)/加载器 (loader)</p>
<h1 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h1><ul>
<li>词法单元 (token)</li>
<li>抽象语法树 (AST - abstract syntax tree)</li>
<li>类型检查 (type checking)</li>
<li>三地址代码 (three-address code)</li>
<li>中间表示形式 (IR - intermediate representation)<ul>
<li>中间语言 (IL - intermediate language)</li>
<li>字节码 (bytecode)</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编译器结构&quot;&gt;&lt;a href=&quot;#编译器结构&quot; class=&quot;headerlink&quot; title=&quot;编译器结构&quot;&gt;&lt;/a&gt;编译器结构&lt;/h1&gt;&lt;p&gt;编译器由两个部分组成：分析 (analysis)部分和综合 (synthesis)部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="compile" scheme="http://blackteachinese.com/categories/compile/"/>
    
    
      <category term="compile" scheme="http://blackteachinese.com/tags/compile/"/>
    
  </entry>
  
  <entry>
    <title>WebRTC源码如何编译iOS使用的Framework</title>
    <link href="http://blackteachinese.com/2017/04/18/webrtc-compile-ios-framework/"/>
    <id>http://blackteachinese.com/2017/04/18/webrtc-compile-ios-framework/</id>
    <published>2017-04-18T15:21:09.000Z</published>
    <updated>2017-04-19T16:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webRTC简介"><a href="#webRTC简介" class="headerlink" title="webRTC简介"></a>webRTC简介</h2><h2 id="编译工具准备"><a href="#编译工具准备" class="headerlink" title="编译工具准备"></a>编译工具准备</h2><ul>
<li>depot_tools<ul>
<li>depot_tools是Chromium 和 Chromium OS管理代码拉取的脚本包。里面包含了gclient, gcl, git-cl, repo</li>
</ul>
</li>
<li>创建一个build工作目录<ul>
<li>/webrtc_build</li>
</ul>
</li>
<li>在webrtc_build目录下，使用git下载Chromium的depot_tools工具</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</div></pre></td></tr></table></figure>
<ul>
<li>添加depot_tools到你OS的环境变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=`<span class="built_in">pwd</span>`/depot_tools:<span class="string">"<span class="variable">$PATH</span>"</span></div></pre></td></tr></table></figure>
<h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><p>在webrtc_build目录下，使用命令行拉取webRTC的源码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fetch --nohooks webrtc_ios</div><div class="line">gclient sync</div></pre></td></tr></table></figure>
<p>得到源码：src/…</p>
<h2 id="开一个新的分支"><a href="#开一个新的分支" class="headerlink" title="开一个新的分支"></a>开一个新的分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git new-branch &lt;branch name&gt;</div></pre></td></tr></table></figure>
<h2 id="使用GN生成Ninja工程文件"><a href="#使用GN生成Ninja工程文件" class="headerlink" title="使用GN生成Ninja工程文件"></a>使用GN生成Ninja工程文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># debug build for 64-bit iOS</span></div><div class="line">gn gen out/ios_64 --args=<span class="string">'target_os="ios" target_cpu="arm64"'</span></div><div class="line"><span class="comment"># debug build for simulator</span></div><div class="line">gn gen out/ios_sim --args=<span class="string">'target_os="ios" target_cpu="x64"'</span></div></pre></td></tr></table></figure>
<h2 id="命令行编译Ninja工程"><a href="#命令行编译Ninja工程" class="headerlink" title="命令行编译Ninja工程"></a>命令行编译Ninja工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ninja -C out/ios_64 AppRTCMobile</div></pre></td></tr></table></figure>
<p>AppRTCMobile是其中一个Target,可以切换别的</p>
<h2 id="生成Xcode工程"><a href="#生成Xcode工程" class="headerlink" title="生成Xcode工程"></a>生成Xcode工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gn gen out/ios --args=&apos;target_os=&quot;ios&quot; target_cpu=&quot;arm64&quot;&apos; --ide=xcode</div><div class="line">open -a Xcode.app out/ios/all.xcworkspace</div></pre></td></tr></table></figure>
<h2 id="编译webRTC-framwork"><a href="#编译webRTC-framwork" class="headerlink" title="编译webRTC.framwork"></a>编译webRTC.framwork</h2><ul>
<li>查看编译选项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/tools-webrtc/ios/build_ios_libs.py --help</div></pre></td></tr></table></figure>
<ul>
<li>默认会编译出全部架构的 [‘arm64’, ‘arm’, ‘x64’, ‘x86’] 的 framework.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/tools-webrtc/ios/build_ios_libs.py</div></pre></td></tr></table></figure>
<ul>
<li>只编译ARM架构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/tools-webrtc/ios/build_ios_libs.py --arch &#123;&apos;arm64&apos;,&apos;arm&apos;&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1feses56wbmj31gs0j6q8t.jpg" alt=""></p>
<ul>
<li>xcode8.3的编译错误</li>
</ul>
<p>如果你的XCode版本是8.3，执行build_ios_libs.py会出现下面的错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: taking address of packed member &apos;time_entered&apos; of class or structure &apos;sctp_state_cookie&apos; may result in an unaligned pointer value [-Werror,-Waddress-of-packed-member]</div></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79gy1fesetelf94j31hg0twdq7.jpg" alt=""></p>
<p>原因是有两个文件有错需要改正：<br>third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_input.c<br>third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_output.c<br>具体改正点下面可以查看<br><a href="https://trac.webkit.org/changeset/211848/webkit/trunk/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_output.c" target="_blank" rel="external">sctp_input.c改正</a><br><a href="https://trac.webkit.org/changeset/211848/webkit/trunk/Source/ThirdParty/libwebrtc/Source/third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_input.c" target="_blank" rel="external">sctp_output.c改正</a></p>
<ul>
<li><p>编译配置文件错误<br>你把编译好的WebRTC.framework放到Demo工程跃跃欲试，却可能发现编译不过。<br>日了🐶了。。。<br> “Could not build module ‘WebRTC’”<br> “‘WebRTC/RTCVideoCapturer.h’ file not found”<br><img src="http://ww3.sinaimg.cn/large/006tNc79gy1fesetv8i40j31jm0t8qhw.jpg" alt=""></p>
<p>太可怕了。。看来编译的脚本又有问题，欲哭无泪。。。<br>一通找终于找到生成WebRTC.framework头文件的脚本。<br><img src="http://ww3.sinaimg.cn/large/006tNc79gy1fesesq52cmj30tu18mgwa.jpg" alt=""></p>
<p>缺了下面几个头文件链接</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;objc/Framework/Headers/WebRTC/RTCCameraVideoCapturer.h&quot;,</div><div class="line">&quot;objc/Framework/Headers/WebRTC/RTCNSGLVideoView.h&quot;,</div><div class="line">&quot;objc/Framework/Headers/WebRTC/RTCVideoCapturer.h&quot;,</div></pre></td></tr></table></figure>
<p>修改BUILD.gn，再使用build_ios_libs.py编译，就可以得到完美的WebRTC.framework。</p>
<ul>
<li>把编译好的WebRTC.framework导入demo工程，编译demo工程,发现动态库找不到。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dyld: Library not loaded: @rpath/WebRTC.framework/WebRTC</div></pre></td></tr></table></figure>
<p>在Embedded Binaries +WebRTC.framework即可</p>
<p>最后附上修改后的文件BUILD.gn、sctp_input.c、sctp_output.c<br>以及编译成功后的webRTC.Framework(arm和All)</p>
<p><a href="https://github.com/blackteachinese/WebRTCCompileFix" target="_blank" rel="external">git地址：https://github.com/blackteachinese/WebRTCCompileFix</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webRTC简介&quot;&gt;&lt;a href=&quot;#webRTC简介&quot; class=&quot;headerlink&quot; title=&quot;webRTC简介&quot;&gt;&lt;/a&gt;webRTC简介&lt;/h2&gt;&lt;h2 id=&quot;编译工具准备&quot;&gt;&lt;a href=&quot;#编译工具准备&quot; class=&quot;headerli
    
    </summary>
    
      <category term="webrtc" scheme="http://blackteachinese.com/categories/webrtc/"/>
    
    
      <category term="compile" scheme="http://blackteachinese.com/tags/compile/"/>
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
      <category term="webrtc" scheme="http://blackteachinese.com/tags/webrtc/"/>
    
  </entry>
  
  <entry>
    <title>Mac上使用intelliJ开发WEbServer(Servlet)、mysql的新手教程</title>
    <link href="http://blackteachinese.com/2017/04/09/server-intelliJ-Servlet-and-mysql-mac-guide/"/>
    <id>http://blackteachinese.com/2017/04/09/server-intelliJ-Servlet-and-mysql-mac-guide/</id>
    <published>2017-04-09T09:03:57.000Z</published>
    <updated>2017-04-12T15:52:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Servlet是Java提供的用于开发Web服务器应用程序的一个组件，运行在服务器端，由Servlet容器所管理，用于生成动态的内容。Servlet是平台独立的Java类，编写一个Servlet，实际上就是按照Servlet规范编写一个Java类。</div></pre></td></tr></table></figure>
<h3 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSP是Servlet的一种特殊形式，每个JSP页面就是一个Servlet实例——JSP页面由系统编译成Servlet，Servlet再负责响应用户请求。JSP其实也是Servlet的一种简化，使用JSP时，其实还是使用Servlet，因为Web应用中的每个JSP页面都会由Servlet容器生成对应的Servlet。对于Tomcat而言，JSP页面生成的Servlet放在work路径对应的Web应用下。</div></pre></td></tr></table></figure>
<h2 id="IntelliJ开发WebServer"><a href="#IntelliJ开发WebServer" class="headerlink" title="IntelliJ开发WebServer"></a>IntelliJ开发WebServer</h2><h3 id="Demo源码github地址"><a href="#Demo源码github地址" class="headerlink" title="Demo源码github地址"></a>Demo源码github地址</h3><p><a href="https://github.com/blackteachinese/servletDemo" target="_blank" rel="external">https://github.com/blackteachinese/servletDemo</a></p>
<h3 id="搭建Webserver工程环境"><a href="#搭建Webserver工程环境" class="headerlink" title="搭建Webserver工程环境"></a>搭建Webserver工程环境</h3><ul>
<li>创建一个Maven Demo工程</li>
</ul>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fegnm20xl9j31k614g7ht.jpg" alt=""></p>
<ul>
<li>项目名称右键，选择”Add Framework Support”</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegol1jdxwj31kw0oggwi.jpg" alt=""></p>
<ul>
<li><p>添加Web Application<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegns27f26j315w0wodla.jpg" alt=""></p>
</li>
<li><p>添加完后可以看到WebServer的目录<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fegohsev6aj31kw0oen5p.jpg" alt=""></p>
</li>
<li><p>配置Artifact打包部署设置<br><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fekapz6ibvj31kw0zkat2.jpg" alt=""></p>
</li>
<li><p>配置Tomcat服务器<br><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fego68iog8j31kw0yf138.jpg" alt=""></p>
</li>
<li><p>Maven依赖配置<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fekbzxggzxj31kw0zke1q.jpg" alt=""></p>
</li>
</ul>
<h3 id="开发一个Get请求接口"><a href="#开发一个Get请求接口" class="headerlink" title="开发一个Get请求接口"></a>开发一个Get请求接口</h3><ul>
<li>创建一个formGetApi.html,做为表单承载页<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegpiusk8pj31kw0zkx0h.jpg" alt=""></li>
<li>在Index.jsp配置跳转到formGetApi.html页面<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegplchmg6j31kw0zkx00.jpg" alt=""></li>
<li>创建一个继承于HttpServlet的Java类GetApiTest<ul>
<li>你会发现HttpServlet找不到。不用急，选中“HttpServlet”按“option”+”enter”,点击添加Maven依赖,导入HttpServlet的依赖即可。<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegpzl7dutj31kw0zk4ig.jpg" alt=""><br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegq0dby9jj31kw0zk4qp.jpg" alt=""></li>
</ul>
</li>
<li>重载HttpServlet的“service”方法。通过“getParameter”和“getParameterValues”获取表单的字段，并将获取到的结果输出回浏览器。<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegq84bcd0j31kw0zktwj.jpg" alt=""></li>
<li><p>web.xml里配置api的映射</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"</div><div class="line">         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</div><div class="line">         version="3.1"&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;GetApiServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;GetApiTest&lt;/servlet-class&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;GetApiServlet&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/getApi&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>启动Tomcat<br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegqhun83wj31kw0zk1h9.jpg" alt=""></p>
<h3 id="开发一个Post请求接口"><a href="#开发一个Post请求接口" class="headerlink" title="开发一个Post请求接口"></a>开发一个Post请求接口</h3></li>
<li>创建一个formPostApi.html。唯一的不同是对”method”的设置。<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegreb6o2aj31kw0zktus.jpg" alt=""></li>
<li>创建一个继承于HttpServlet的Java类PostApiTest。<ul>
<li>post请求需要先对request、response对象设置CharacterEncoding<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span>  <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">// right to read chinese</span></div><div class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">        <span class="comment">// right to output chinese</span></div><div class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">        PrintWriter out = resp.getWriter();</div><div class="line">        <span class="comment">// get name value</span></div><div class="line">        String name = req.getParameter(<span class="string">"name"</span>);</div><div class="line">        out.println(<span class="string">"&lt;h1&gt;Hello,"</span>+name+<span class="string">"&lt;/h1&gt;"</span>);</div><div class="line">        <span class="comment">// get info value</span></div><div class="line">        String[] infos = req.getParameterValues(<span class="string">"info"</span>);</div><div class="line">        <span class="keyword">if</span> (infos != <span class="keyword">null</span>) &#123;</div><div class="line">            out.print(<span class="string">"&lt;h1&gt;info :&lt;/h1&gt;"</span>);</div><div class="line">            <span class="keyword">for</span> (String contact :infos) &#123;</div><div class="line">                out.print(<span class="string">"&lt;h1&gt;"</span>+contact+<span class="string">"&lt;/h1&gt;"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fegs5i2yuej31kw0zktw1.jpg" alt=""></li>
</ul>
</li>
</ul>
<h3 id="使用mysql储存提交的表单数据"><a href="#使用mysql储存提交的表单数据" class="headerlink" title="使用mysql储存提交的表单数据"></a>使用mysql储存提交的表单数据</h3><ul>
<li>创建一个formMysqlApi.html页面</li>
<li>web.xml映射配置</li>
<li>创建一个继承于HttpServlet的Java类MysqlApiTest。<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegxj3mr6gj31kw0zktxp.jpg" alt=""><h3 id="mql操作"><a href="#mql操作" class="headerlink" title="mql操作"></a>mql操作</h3></li>
</ul>
<h4 id="IntelliJ添加一个Datasource"><a href="#IntelliJ添加一个Datasource" class="headerlink" title="IntelliJ添加一个Datasource"></a>IntelliJ添加一个Datasource</h4><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegwssbwsij31kw0zkb1s.jpg" alt=""><br><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegx5ivyf0j31kw0zkh6b.jpg" alt=""></p>
<h4 id="mysql命令行创建一个DataBase"><a href="#mysql命令行创建一个DataBase" class="headerlink" title="mysql命令行创建一个DataBase"></a>mysql命令行创建一个DataBase</h4><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fegx6wfmamj30ew0203yp.jpg" alt=""></p>
<h4 id="IntelliJ创建一个createDB-sql文件，创建userInfo表"><a href="#IntelliJ创建一个createDB-sql文件，创建userInfo表" class="headerlink" title="IntelliJ创建一个createDB.sql文件，创建userInfo表"></a>IntelliJ创建一个createDB.sql文件，创建userInfo表</h4><p><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fegx9n7gb7j31kw0zkqlc.jpg" alt=""></p>
<h4 id="mysql命令行设置userInfo表character为UTF8"><a href="#mysql命令行设置userInfo表character为UTF8" class="headerlink" title="mysql命令行设置userInfo表character为UTF8"></a>mysql命令行设置userInfo表character为UTF8</h4><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fegxbs3pw7j30ss084abd.jpg" alt=""></p>
<h4 id="IntelliJ创建一个insertDB-sql文件，插入一条数据"><a href="#IntelliJ创建一个insertDB-sql文件，插入一条数据" class="headerlink" title="IntelliJ创建一个insertDB.sql文件，插入一条数据"></a>IntelliJ创建一个insertDB.sql文件，插入一条数据</h4><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fegxd9h002j31kw0zk1a3.jpg" alt=""></p>
<h4 id="动态加载mysql驱动"><a href="#动态加载mysql驱动" class="headerlink" title="动态加载mysql驱动"></a>动态加载mysql驱动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div></pre></td></tr></table></figure>
<h4 id="JDBC连接MySQL"><a href="#JDBC连接MySQL" class="headerlink" title="JDBC连接MySQL"></a>JDBC连接MySQL</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/webserverDemo?user=root&amp;password=19880622"</span>);</div></pre></td></tr></table></figure>
<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><h3 id="IntelliJ环境搭建"><a href="#IntelliJ环境搭建" class="headerlink" title="IntelliJ环境搭建"></a>IntelliJ环境搭建</h3><h3 id="mysql环境搭建"><a href="#mysql环境搭建" class="headerlink" title="mysql环境搭建"></a>mysql环境搭建</h3><h3 id="常用mysql命令"><a href="#常用mysql命令" class="headerlink" title="常用mysql命令"></a>常用mysql命令</h3><ul>
<li>连接mysql:<ul>
<li>格式： mysql -h主机地址 -u用户名 －p用户密码</li>
<li>example:mysql -uroot -p</li>
</ul>
</li>
<li>退出MYSQL命令<ul>
<li>格式：exit （回车）</li>
</ul>
</li>
<li>创建数据库<ul>
<li>命令：create databas &lt;数据库名&gt;;</li>
</ul>
</li>
<li>显示数据库<ul>
<li>命令：show databases;</li>
</ul>
</li>
<li>连接数据库<ul>
<li>命令： use &lt;数据库名&gt;</li>
</ul>
</li>
<li>创建数据库表<ul>
<li>命令：create table &lt;表名&gt; ( &lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);</li>
</ul>
</li>
<li>删除表<ul>
<li>命令：drop table &lt;表名&gt;</li>
</ul>
</li>
<li>插入表数据 <ul>
<li>命令：insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]</li>
</ul>
</li>
<li>查看表中所有数据<ul>
<li>命令： select &lt;字段1，字段2，…&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;</li>
<li>example:select * from MyClass;</li>
</ul>
</li>
</ul>
<h3 id="MySQL的JDBC-URL格式"><a href="#MySQL的JDBC-URL格式" class="headerlink" title="MySQL的JDBC URL格式"></a>MySQL的JDBC URL格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc:mysql//[hostname][:port]/[dbname][?param1=value1][&amp;param2=value2]….</div></pre></td></tr></table></figure>
<p>Example：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc:mysql://localhost:3306/sample_db?user=root&amp;password=your_password</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h1&gt;&lt;h2 id=&quot;什么是Servlet&quot;&gt;&lt;a href=&quot;#什么是Servlet&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="server" scheme="http://blackteachinese.com/categories/server/"/>
    
    
      <category term="intelliJ" scheme="http://blackteachinese.com/tags/intelliJ/"/>
    
      <category term="Servlet" scheme="http://blackteachinese.com/tags/Servlet/"/>
    
      <category term="mysql" scheme="http://blackteachinese.com/tags/mysql/"/>
    
      <category term="Mac" scheme="http://blackteachinese.com/tags/Mac/"/>
    
      <category term="WEbServer" scheme="http://blackteachinese.com/tags/WEbServer/"/>
    
  </entry>
  
  <entry>
    <title>巴菲特的投资思维如何用于日常生活</title>
    <link href="http://blackteachinese.com/2017/04/04/financial-use-invest-sense/"/>
    <id>http://blackteachinese.com/2017/04/04/financial-use-invest-sense/</id>
    <published>2017-04-04T07:36:16.000Z</published>
    <updated>2017-04-04T09:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学会权衡风险与收益"><a href="#学会权衡风险与收益" class="headerlink" title="学会权衡风险与收益"></a>学会权衡风险与收益</h1><p>首先，我们做事情要有明确的目的，不同的目的要采用不同的方法。<br>大部分人在生活中很容易受别人影响。<br>看到朋友给他的孩子报了钢琴、英语、绘画等兴趣班，就想象自己的孩子会落后于别人，赶紧自己也给孩子报了相应的培训班。</p>
<p>危机意识敏锐是人类进化的优良习惯。在原始森林里，当你看到身边的人突然加速逃跑的时候，如果你非常理智思考一下，观察一下身边的情况，你很可能就野兽吃了。于是活下来的都拥有容易受他人影响的基因。但现代生活比原始森林复杂多了，光依靠过去的本能的反应已经远远不够了。我们应该明确好自己的目标，而不是别人给孩子报英语，我们就不加思索的也报英语。</p>
<p>那我们应该怎么做？每个孩子有着不一样的基因，各方面的能力不一样，兴趣爱好也不一样。譬如，你发现自己孩子对音乐特别敏感，听到音乐会跟着哼、身体跟着节奏舞动。那说明你的孩子对音乐、舞蹈比较敏锐，可以尝试往这个方向引导。于是这就成为你权衡给孩子哪些教育其中一个目标。即便是要给孩子报兴趣班，也要依据你积累下来的这些目标和方向。不盲目跟风。</p>
<h1 id="切莫好高骛远。"><a href="#切莫好高骛远。" class="headerlink" title="切莫好高骛远。"></a>切莫好高骛远。</h1><p>我们在制定目标时不能好高骛远。如果你好高骛远，那么你定的目标通常会没有可执行性。</p>
<p>比如你定下这样的目标，“我今年的理财投资回报率要达到30%”。有些人可能会觉得也并不是很难，牛市的时候几个涨停就够了。天了噜，巴菲特每年的投资回报率就12%左右。他养着一个全球最贵的投资团队，每天分析各行业趋势、各国政策的影响、企业的动态，最后收益也就平均12%。</p>
<p>我并非说没有任何人的投资的回报能高于巴菲特，只是非常少，可能低于5%。而且即便你某一年投资回报高于巴菲特并不代表你平均每年投资回报率能高于巴菲特，也就是说你的投资策略、投资能力并不优于巴菲特，只是刚好今年的投资运气特别好。这其实又说到另外一个主题，是关于自我认知能力，大部分人的自我认知能力都很差，这个且不说。</p>
<p>在生活中好高骛远会带来什么实际性的错误呢？就像上面的例子，如果你定的理财回报率是30%，那你就会关注到很多风险极高的投资产品。比如一些区块链的垃圾币包装的理财产品、期货产品。你也更容易被别人忽悠去买这些风险极高、甚至完全是骗局的传销型理财产品。如果你定的目标是30岁前实现财富自由，你可能就会忽视基础的积累，只去做那些看起来有可能的事情。比如买彩票、盲目创业、高风险投资。你买股票时可能会加5倍杠杆，不翻倍的投资你不会考虑。</p>
<h1 id="权衡回报和风险"><a href="#权衡回报和风险" class="headerlink" title="权衡回报和风险"></a>权衡回报和风险</h1><p>我们需要考虑的是回报和风险的比例，而不仅仅是回报本身。<br>是的，我们常常听别人说这个回报率是10%非常高，这个回报率是12%相当赞。但却很少有人说，这个理财产品往年的实际投资回报是多少。多大的百分比是亏损、多大的百分百是0%～5%之间。大家都对风险的分析做得不够，能大概知道A产品风险较低、B产品风险高一点就已经很不错了。更别提最后通过概率权的思想计算出实际的投资回报率（而不是发行方包装的回报率）。</p>
<p>在生活中我们同样要学会权衡回报和收益。比如：周六有个李开复的讲座要不要去听。</p>
<ul>
<li>先算一下要花的时间。 <ul>
<li>路上时间+讲座时间，共6个小时</li>
</ul>
</li>
<li>初步预计一下收益。<ul>
<li>认识几个行业朋友？听到李开复对人工智能的干货？感受一下气氛，激发一下自己的热情？</li>
</ul>
</li>
<li>替代方案／机会成本<ul>
<li>陪老婆孩子</li>
<li>看半本书</li>
<li>打场球锻炼一下</li>
<li>花两个小时看视频直播，省下4个小时干别的。</li>
</ul>
</li>
</ul>
<h1 id="切换有成本"><a href="#切换有成本" class="headerlink" title="切换有成本"></a>切换有成本</h1><p>最后，任何事情都有一个准入的成本，或者说切换的成本。大到换工作，小到换手机，换电脑，都是如此。到新单位前三个月乃至半年，要重新学习和适应，其实做不了太重要的事情，这就是准入成本。换一台电脑，很多旧的文件要导出来，要装新软件，这都是准入成本。考虑到准入成本，你就不应该切换工作太频繁，在一个公司待不到2年通常都是一件成本较高的事情。</p>
<p>PS：这些思想听起来是很简单道理，大家或多或少都听过这样的说法，但平时却很难做不到。这是由于我们长久以来形成的错误的思维习惯，你不下意识去纠正，即便听过N遍也很难真正吸收。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;学会权衡风险与收益&quot;&gt;&lt;a href=&quot;#学会权衡风险与收益&quot; class=&quot;headerlink&quot; title=&quot;学会权衡风险与收益&quot;&gt;&lt;/a&gt;学会权衡风险与收益&lt;/h1&gt;&lt;p&gt;首先，我们做事情要有明确的目的，不同的目的要采用不同的方法。&lt;br&gt;大部分人在生活中
    
    </summary>
    
      <category term="思维" scheme="http://blackteachinese.com/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="投资" scheme="http://blackteachinese.com/tags/%E6%8A%95%E8%B5%84/"/>
    
      <category term="思维" scheme="http://blackteachinese.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="理财" scheme="http://blackteachinese.com/tags/%E7%90%86%E8%B4%A2/"/>
    
      <category term="生活" scheme="http://blackteachinese.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>比天赋更重要是什么？</title>
    <link href="http://blackteachinese.com/2017/03/29/success_outliers/"/>
    <id>http://blackteachinese.com/2017/03/29/success_outliers/</id>
    <published>2017-03-29T13:37:07.000Z</published>
    <updated>2017-07-23T05:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-优势积累比天赋更重要"><a href="#一-优势积累比天赋更重要" class="headerlink" title="一 .优势积累比天赋更重要"></a>一 .优势积累比天赋更重要</h1><h2 id="机遇比天赋更重要"><a href="#机遇比天赋更重要" class="headerlink" title="机遇比天赋更重要"></a>机遇比天赋更重要</h2><p>加拿大著名球队老虎队的队员里25个球员，有17个球员的出生日期在1～3月。为什么有么明显的倾向性？加拿大冰球选拔机制是按年龄分组，5岁一组、6岁一组。同样是1990年出生，1月份出生的小孩和12月份出生的小孩分在一组。对于小孩来说差了10几个月，身体发育就差很多，年初出生的球员就占据很大的优势。所以年初出生的小孩一开始表现就会更好，表现更好就会被筛选到特训组，得到更好的训练。得到更好的训练，表现就更好，如此不断积累优势，最后年初出生的小孩称为顶级球员的机率就大大提升。</p>
<h2 id="知道一万小时理论也没用"><a href="#知道一万小时理论也没用" class="headerlink" title="知道一万小时理论也没用"></a>知道一万小时理论也没用</h2><p>不是每个人都有机会在合适的时机进行一万小时的训练。比如加拿大的冰球运动员，如果你小的时候进不了第一梯队，就没能进行优质的训练，很难达到一万小时。而且年龄大了再完成一万小时的训练也没有用了，因为运动员的身体条件高峰期是受年龄限制的。</p>
<h2 id="社会环境变革比努力重要得多"><a href="#社会环境变革比努力重要得多" class="headerlink" title="社会环境变革比努力重要得多"></a>社会环境变革比努力重要得多</h2><p>70后毕业参加工作买一套房子，相当于80后工作10年。最近毕业的清华大学学生，买不起北京房子不要太多。</p>
<h1 id="二-文化背景对成功影响很大"><a href="#二-文化背景对成功影响很大" class="headerlink" title="二.文化背景对成功影响很大"></a>二.文化背景对成功影响很大</h1><p>20世纪90年代韩国大航航空公司飞机失事率是同期美国联合航空的17倍，但究其原因竟然不是飞机设备、也不是管理问题。他们做了大量调研，听取飞机黑匣子录音，最终发现韩国文化是最根本的原因。因为韩国是一个等级分明的国家。在飞行过程中，机长做了一些错误的决策，副机长以及其他成员不敢说，没有了其他成员的有力监督，飞机失事率就变高了很多。</p>
<h1 id="我们该怎么做"><a href="#我们该怎么做" class="headerlink" title="我们该怎么做"></a>我们该怎么做</h1><h2 id="挤入第一梯队"><a href="#挤入第一梯队" class="headerlink" title="挤入第一梯队"></a>挤入第一梯队</h2><p>学习和工作时要想办法进入“第一梯队”，这样才能获得高质量的训练，加速积累达到一万小时的训练，从了增加优势积累的机会。</p>
<h2 id="如何获得社会变革红利"><a href="#如何获得社会变革红利" class="headerlink" title="如何获得社会变革红利"></a>如何获得社会变革红利</h2><p>花时间研究未来趋势，训练自己的预见能力，并且在未来趋势到来之前，开始一万小时的积累。比尔盖茨在大家还没用电脑前，就有了计算机编程的10万小时积累。<br>我们需要一点运气，找到风口并且在风口前已经做好了准备。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-优势积累比天赋更重要&quot;&gt;&lt;a href=&quot;#一-优势积累比天赋更重要&quot; class=&quot;headerlink&quot; title=&quot;一 .优势积累比天赋更重要&quot;&gt;&lt;/a&gt;一 .优势积累比天赋更重要&lt;/h1&gt;&lt;h2 id=&quot;机遇比天赋更重要&quot;&gt;&lt;a href=&quot;#机遇比
    
    </summary>
    
      <category term="思维" scheme="http://blackteachinese.com/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="成功" scheme="http://blackteachinese.com/tags/%E6%88%90%E5%8A%9F/"/>
    
      <category term="努力" scheme="http://blackteachinese.com/tags/%E5%8A%AA%E5%8A%9B/"/>
    
      <category term="天赋" scheme="http://blackteachinese.com/tags/%E5%A4%A9%E8%B5%8B/"/>
    
      <category term="比尔盖茨" scheme="http://blackteachinese.com/tags/%E6%AF%94%E5%B0%94%E7%9B%96%E8%8C%A8/"/>
    
      <category term="优势积累" scheme="http://blackteachinese.com/tags/%E4%BC%98%E5%8A%BF%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="逆袭" scheme="http://blackteachinese.com/tags/%E9%80%86%E8%A2%AD/"/>
    
      <category term="一万小时理论" scheme="http://blackteachinese.com/tags/%E4%B8%80%E4%B8%87%E5%B0%8F%E6%97%B6%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>内存泄漏监控</title>
    <link href="http://blackteachinese.com/2017/03/14/ios_memoryLeak_tool/"/>
    <id>http://blackteachinese.com/2017/03/14/ios_memoryLeak_tool/</id>
    <published>2017-03-14T02:18:21.000Z</published>
    <updated>2017-04-09T09:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要做app内存泄漏监控？"><a href="#为什么要做app内存泄漏监控？" class="headerlink" title="为什么要做app内存泄漏监控？"></a>为什么要做app内存泄漏监控？</h2><p>内存泄漏将导致app内存占用变大，成为iphone要kill App的时候优先考虑的对象.<br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fduvum23wsj31870j3jwx.jpg" alt=""></p>
<h2 id="监控内存泄漏的时机"><a href="#监控内存泄漏的时机" class="headerlink" title="监控内存泄漏的时机"></a>监控内存泄漏的时机</h2><ol>
<li>UIViewController调用”dismissViewControllerAnimated:”的时候</li>
<li>UInavigationController调用”popToRootViewControllerAnimated:”等pop方法</li>
<li>UITabbbarViewController、UIPageViewController、UISplitViewController+MemoryLeak需要释放时，对应的内嵌视图控制器也需要释放。<br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fduvtrj272j31080hgn00.jpg" alt=""></li>
</ol>
<h2 id="监控小技巧"><a href="#监控小技巧" class="headerlink" title="监控小技巧"></a>监控小技巧</h2><p>创建一个block,block持有需要释放的视图的weak指针，当监测时机到时，执行这个block，如果weak指针不为nil,则该试图已经内存泄漏了。<br><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fduvux09v8j313i0ngjtw.jpg" alt=""></p>
<h2 id="监控对象"><a href="#监控对象" class="headerlink" title="监控对象"></a>监控对象</h2><ol>
<li>所有需要释放的视图控制器</li>
<li>视图控制器的View,及其每一层嵌套的Subview</li>
</ol>
<h2 id="视图树的记录"><a href="#视图树的记录" class="headerlink" title="视图树的记录"></a>视图树的记录</h2><p>监测到内存泄漏后，为了方便开发定位到具体泄漏的视图，我们可以泄漏的视图树记录下来。</p>
<h2 id="泄漏后如何及时提醒"><a href="#泄漏后如何及时提醒" class="headerlink" title="泄漏后如何及时提醒"></a>泄漏后如何及时提醒</h2><p>泄漏后怎么提醒开发者比较合适呢。</p>
<ol>
<li>发现泄漏马上把泄漏的视图树log打印出来</li>
<li>悬浮一个提醒款，显示当前泄漏的数量</li>
<li>命中断言（会阻断开发，容易被喷）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要做app内存泄漏监控？&quot;&gt;&lt;a href=&quot;#为什么要做app内存泄漏监控？&quot; class=&quot;headerlink&quot; title=&quot;为什么要做app内存泄漏监控？&quot;&gt;&lt;/a&gt;为什么要做app内存泄漏监控？&lt;/h2&gt;&lt;p&gt;内存泄漏将导致app内存占用变大，成
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="内存泄漏" scheme="http://blackteachinese.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
      <category term="监控" scheme="http://blackteachinese.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="报警" scheme="http://blackteachinese.com/tags/%E6%8A%A5%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>匠人精神的重要性</title>
    <link href="http://blackteachinese.com/2017/01/15/other-craftsman/"/>
    <id>http://blackteachinese.com/2017/01/15/other-craftsman/</id>
    <published>2017-01-15T07:43:51.000Z</published>
    <updated>2017-08-14T07:53:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近常听到“匠人精神”这个词。难道资本寒冬的来临，让大家突然醒悟，光靠包装、概念就轻松能拿到融资创业的时机已经过去了？</p>
<p>什么是匠人精神？</p>
<p>  第一次听说这个词汇，我脑海里浮现的是一个打铁匠的老师傅。一个勤勤恳恳、认真、古板的手艺人。这应该是很少的一部分人吧。直到最近看了晓松奇谈关于“探寻匠人精神”的节目，才对匠人精神有了新的体会。<br>  一位炸了50多年天妇罗的“早乙女哲哉”说了一句话：”我觉得日本这几十年好像没有什么变化“。要知道这几十年日本可是经历过七八十年代经济腾飞、到1990经济泡沫后的一蹶不振。难道他对外界的感知能力这么弱吗？这有一定关系，但除此之外还和早乙女哲哉对生活和工作的专注有关系。他是一个专注于做好一件事的人，这几十年一直致力于炸天妇罗，不受经济环境的变动，不受身旁人们的价值观的影响，不去关心最近股票的走势，房价是不是又涨了、谁家做了什么生意又发财了、什么行业现在在风口。这放在当今的中国，就是一个稳重、古板的手艺人，不懂得变通，不懂人情世故、不懂理财的人。这绝不是国内老百姓们希望成为的人。<br>  这是一种专注的精神，专注得来还很有安全感，让你安心去专注，不受外界影响。这确实很不容易，这是我一直比较缺乏的精神，也是我们缺乏的精神。我从小到大是一个懒散、随便的人。做很多事情都不追求细致、完美，一直不知道自己喜欢什么，很难专注认定一件事去做坚持一直做。<br>  除了专注精神，我还能体会到一种叫“精进”的精神。“幸村”开了一家小的料理店，从默默无名到米其林1星，再到米其林3星，竟然菜单一直没有换过。那这么多年，这家店难道一直不思进取、没有进步吗？在我北京各种有名的餐厅，几个月就得换菜单，而客户也很乐于去品尝新菜。而幸村说到：“多年来我们没有改变菜单，不是说我们就没有去创新、没有去思考和尝试如何变得更好，而是我们一直在研究我们原有的料理如何做得更好，我们一直在改进我们的菜品”。我认为这就是一种“精进”的精神，我们不满足于好，还可以不断继续做得更好，而不一定非得做各种新的事情，去证明自己什么都好。<br>  专注、精进的精神看似和创新精神有矛盾，其实不然。最近一直很流行的”1万小时“理论告诉我们，专注在一个领域里足够长的时机，人人都能成为专家。如果我们能在同一个领域里，积极去思考也能相处很多有创意的想法，当然我们不能所有新想法都去尝试。我们可以在这些新想法里，选择自己最认可的一个想法，坚持一段时间（比如1个月）去做，如果达到预期，我们再坚持更长的时间”精进“地去做。切忌同时多点开发，一件事情没做到阶段性的时间，看到别的事情有机会就换了。<br>  是的，创新对于世界的发展异常重要，但对于我们个人而言，在自己有限的时间里，做好选择并专注地去做，不断得精进自己的专项技能更重要。想一想，人人都有自己所专注和精进的领域做深、做细，这个社会便有很多不同领域的事业在专注、精进地发展。也许很多人会说，不可能，你必须什么技能都懂，你才能把事业做大。这有一定的道理，补助性的技能我们也需要投入一定时间去学习，比如制作PPT能力、外语能力、基本的社交能力、协作能力等等。但得主次分明，不能搞不清楚自己的专项领域。要相信现在的分工越来越细、只要各种专项的技能能够合理协作，都能干成足够大的事业。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近常听到“匠人精神”这个词。难道资本寒冬的来临，让大家突然醒悟，光靠包装、概念就轻松能拿到融资创业的时机已经过去了？&lt;/p&gt;
&lt;p&gt;什么是匠人精神？&lt;/p&gt;
&lt;p&gt;  第一次听说这个词汇，我脑海里浮现的是一个打铁匠的老师傅。一个勤勤恳恳、认真、古板的手艺人。这应该是很少的
    
    </summary>
    
      <category term="default" scheme="http://blackteachinese.com/categories/default/"/>
    
    
      <category term="default" scheme="http://blackteachinese.com/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>iOS侧滑出现的卡死Bug</title>
    <link href="http://blackteachinese.com/2016/12/30/ios-ui-left-slip-bug/"/>
    <id>http://blackteachinese.com/2016/12/30/ios-ui-left-slip-bug/</id>
    <published>2016-12-30T10:30:07.000Z</published>
    <updated>2017-04-09T08:59:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道iOS7以后，系统UINavigationController自带侧滑返回上一级。它是通过navigationController中的interactivePopGestureRecognizer属性来控制。</p>
<p>某一天测试妹妹跑过来跟我说，我测出一个bug，进去某一个页面后回到RootViewController，左滑会导致视图堆栈变乱。我试了一下，果真如此。我想起以前曾经遇到一个bug，如果是自定义UINavigationController并且设置了自定义的leftBarButtonItem，那在UINavigationController的rootViewController上滑动返回时，会出现界面卡死的情况。</p>
<p>赶紧查了一下我们的自定义XXNavigationController,缺失设置了leftBarButtonItem。但是仔细查看了代码，我们其实是禁止了rootViewController左滑返回的事件。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer &#123;</div><div class="line">    <span class="keyword">if</span> (gestureRecognizer == <span class="keyword">self</span>.interactivePopGestureRecognizer) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.viewControllers.count &lt;= <span class="number">1</span> ||</div><div class="line">            <span class="keyword">self</span>.visibleViewController == [<span class="keyword">self</span>.viewControllers firstObject]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>天了噜！这应该没有问题的，什么情况。经过一番仔细查看，发现只有进入某个页面，左滑才会出这个问题。到底这个做了什么？终于被我发现一行要命的代码。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer.delegate = <span class="literal">nil</span>;</div></pre></td></tr></table></figure>
<p>interactivePopGestureRecognizer的代理被设置成nil了。。。。<br>怎么处理好呢？</p>
<p>首先，创建一个类XXXDelegate专门处理侧滑手势的delegate事件。并实现上面“gestureRecognizerShouldBegin:gestureRecognizer”方法的处理。</p>
<p>接着，在XXTabbarController把每个NavgationController对应创建一个XXXDelegate。每次回到TabbarController任意一个子页面“viewDidAppear”的时候，把对应ChildViewController的NavgationController的interactivePopGestureRecognizer.delegate设置成对应的XXXDelegate;</p>
<p>结论，这样不论哪个页面把interactivePopGestureRecognizer的代理设置成nil，都能保证回到rootViewController，interactivePopGestureRecognizer.delegate都能设置成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道iOS7以后，系统UINavigationController自带侧滑返回上一级。它是通过navigationController中的interactivePopGestureRecognizer属性来控制。&lt;/p&gt;
&lt;p&gt;某一天测试妹妹跑过来跟我说，我测出一个b
    
    </summary>
    
      <category term="iOS" scheme="http://blackteachinese.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://blackteachinese.com/tags/iOS/"/>
    
      <category term="左滑bug" scheme="http://blackteachinese.com/tags/%E5%B7%A6%E6%BB%91bug/"/>
    
      <category term="interactivePopGestureRecognizer" scheme="http://blackteachinese.com/tags/interactivePopGestureRecognizer/"/>
    
      <category term="左滑卡死" scheme="http://blackteachinese.com/tags/%E5%B7%A6%E6%BB%91%E5%8D%A1%E6%AD%BB/"/>
    
  </entry>
  
</feed>
